<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>清纯美女图</title>
    <url>/2019/11/12/picture_girl_2/</url>
    <content><![CDATA[<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>清纯</category>
      </categories>
  </entry>
  <entry>
    <title>性感美女</title>
    <url>/2019/11/12/picture_girl_1/</url>
    <content><![CDATA[<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>性感</category>
      </categories>
  </entry>
  <entry>
    <title>Odoo12-- 列表视图禁止打开表单内容</title>
    <url>/2019/11/07/odoo12_5/</url>
    <content><![CDATA[<p>正常的列表视图做为菜单动作直接打开的话，直接点击是跳转当前动作下的表单视图；还有一种是做为表单视图One2many、Many2many类型的嵌入式列表视图，直接点击打开Dialog窗口展示表单视图，一些特殊的需求场景下往往希望只将信息展示到列表即止，不用更多的详细互动。<br>两种方式：</p>
<a id="more"></a>
<p>1.找到相关的行点击入口，通过万能的context扩展一个独立的禁止打开参数，默认不禁止，视图里通过显式声明使用该功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var ListRenderer = require(&apos;web.ListRenderer&apos;);</span><br><span class="line">ListRenderer.include(&#123;</span><br><span class="line">    _onRowClicked: function (event) &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        var context = self.dataset.get_context().eval();</span><br><span class="line">        if(!context[&quot;disable_open&quot;])&#123;</span><br><span class="line">            self._super.apply(self, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;field name=&quot;sale_ids&quot; context=&quot;&#123;&apos;disable_open&apos;: True&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>2.禁止 鼠标的点击事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;field name=&quot;sale_ids&quot; style=&quot;pointer-events: none;&quot;/&gt;</span><br></pre></td></tr></table></figure>


<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 RPC failed; curl 18 transfer closed with outstanding read data remaining的解决</title>
    <url>/2019/11/07/git_2/</url>
    <content><![CDATA[<p>如图：<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7a5c238b4bb6e991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>解决方案也是网上搜的，总结一下</p><p>一，加大缓存区</p><figure class="highlight plain"><figcaption><span>config --global http.postBuffer 524288000```</span></figcaption><table><tr><td class="code"><pre><span class="line">这个大约是500M</span><br><span class="line">二、少clone一些，–depth 1</span><br><span class="line">```git clone https://github.com/flutter/flutter.git --depth 1</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>–depth 1的含义是复制深度为1，就是每个文件只取最近一次提交，不是整个历史版本。<br>三、换协议<br>clone http方式换成SSH的方式，即 https:// 改为 git://<br>例如<code>git clone https://github.com/flutter/flutter.git</code><br>换成<code>git clone git://github.com/flutter/flutter.git</code></p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- Win下使用GitStats git代码统计工具</title>
    <url>/2019/11/07/git_3/</url>
    <content><![CDATA[<p><strong>gitstats 是一款git历史统计工具，可以生成定量的统计数据，并以html图表的形式展示。统计文件包括文件数量、代码量、提交量、作者信息、每天活跃度、每周活跃度、每月活跃度以及提交数排名等等，信息比较丰富。</strong><br>##安装<br>gitstats 依赖 Git 、Python2 以及Gnuplot。<br>以下是最新的依赖版本。</p><a id="more"></a>
<ul>
<li>Python (&gt;= 2.6.0)</li>
<li>Git (&gt;= 1.5.2.4)</li>
<li>Gnuplot (&gt;= 4.0.0)</li>
</ul>
<p>###1. gitstats<br>可以从<a href="https://github.com/hoxu/gitstats下载gitstats" target="_blank" rel="noopener">https://github.com/hoxu/gitstats下载gitstats</a> ，或者用<a href="https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。" target="_blank" rel="noopener">https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。</a><br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-fc1d49e6401bd36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###2. Python2<br>由于只支持Python2，可以到<a href="https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。</a><br>安装完以后需要配置环境变量，例如安装在C:\Python27 ，则在环境变量path中增加C:\Python27。<br>为了避免多个python冲突，把python安装目录下的python.exe修改为python2.exe。</p>
<hr>
<p>也可以使用conda创建虚拟环境</p>
<p>###3. Gnuplot<br>可以到<a href="https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。" target="_blank" rel="noopener">https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。</a><br>安装完毕后，根据README-Windows.txt里描述，需要配置环境变量，配置到安装目录的bin下，例如D:\gnuplot\bin，同样的，在环境变量path中增加。<br>配置完成后，可以在cmd中输入gnuplot验证。<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-8df7c0f52d4570ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###使用<br>在cmd中使用python执行gitstats中的gitstats.py。<br>命令如下：python2 [gitstats.py路径] [git库路径] [输出结果路径]<br>eg:<br>python2 E:\git\gitstats\gitstats.py E:\git\myTestGit E:\git\git_result</p>
<p>然后等待窗口执行完毕，在输出结果路径里找index.html，打开即可查看详细输出结果。</p>
<hr>
<p>如果错误，可以使用以下方式：<br>1.进入到git的bin目录，运行sh.exe，执行 cd …，退到根目录。打开目录中的cmd</p>
<p>2.在控制台中进入到需要统计的git项目目录，执行 </p>
<p>python 目录/gitstats.py . stats</p>
<p>stats目录生成后，打开其中的index.html<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f68a6db3eaa3b5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python gitstats.py  F:\WORK\PSCLOUD\pscloud  E:\gitstats\result</span><br></pre></td></tr></table></figure>



<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 关于配置模型中的数据问题</title>
    <url>/2019/11/07/odoo12_3/</url>
    <content><![CDATA[<p>####抛砖：<br>res.config.settings 是个瞬态的，会被定时清理。<br>在这里设置的东西，被清理后，这些配置数据是怎么生效的？？？？</p>
<a id="more"></a>
<p><strong>例如：<br>在库存的设置中，我勾选了交货包裹这一项。一段时间后，res.config.settings被清理。清理后，我勾选的项依然有效，是什么原理？<br>能否拿到配置中的某个字段，根据这个字段，在我的代码中做一些判断。</strong></p>
<p>####引玉：</p>
<p>我们一般会继承res.config.settings来定义一些配置信息。 而res.config.settings是一个暂态模型(models.TransientModel)并不能长久保存数据，那数据是保存在什么地方的呢？</p>
<p>简单回答，这些配置数据并不保存在同一个地方，很多设置的状态是通过动态判断来获得的。<br>实际上当我们定义一个一个如下的配置类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyConfigWizard(models.TransientModel):</span><br><span class="line">     _name = &apos;my.settings&apos;</span><br><span class="line">     _inherit = &apos;res.config.settings&apos;</span><br><span class="line"> </span><br><span class="line">    default_foo = fields.type(..., default_model=&apos;my.model&apos;)</span><br><span class="line">    group_bar = fields.Boolean(..., group=&apos;base.group_user&apos;,implied_group=&apos;my.group&apos;)</span><br><span class="line">    module_baz = fields.Boolean(...)</span><br><span class="line">    config_qux = fields.Char(..., config_parameter=&apos;my.parameter&apos;)</span><br><span class="line">    other_field = fields.type(...)</span><br></pre></td></tr></table></figure>

<p>可以看到配置类上的字段分以上5种类型, 也就是：</p>
<p>名字以default_开头，系统会根据设置的值来设置全局的ir.default值<br>名字以group_开头，系统会根据设置的值来配置res.group值<br>名字以module_baz, 系统会根据设置，安装或卸载baz模块<br>字段定义中包含config_parameter属性，系统将设置的值记录到ir.config_parameter表中，其key为config_parameter的值（上例中为：my.parameter), value为本配置字段的值<br>其他字段，则需要继承set_value方法以设定存储的地点，而get_value中设置获取值的方法<br>当打开配置界面时系统会自动调用res.config.settings类的default_get方法，而该方法定义了如何获取这5类字段的设置值的方法。</p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 改变switchButton的显示内容</title>
    <url>/2019/11/07/odoo12_2/</url>
    <content><![CDATA[<p><strong>odoo原本的switchbutton，当鼠标悬浮上去是显示的是英文，比如：View List, View Kanban</strong></p>
<a id="more"></a>
<p><img alt="switchbutton更改前" data-src="https://upload-images.jianshu.io/upload_images/8791854-55ecdf487553ef7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><strong>现在改变其显示内容，可自定义修改。</strong><br><img alt="switchbutton更改后" data-src="https://upload-images.jianshu.io/upload_images/8791854-0ff221f83ce9bbd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>#####原理：在页面加载时候，渲染SwitchButtons时候，对其重写。<br><strong>对<code>abstract_controller.js</code>文件中<code>_renderSwitchButtons</code>方法进行改造。</strong></p>
<p><strong>参考代码：</strong><br><img alt="主要代码" data-src="https://upload-images.jianshu.io/upload_images/8791854-f736cecc922c8943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$switchButtons.each(function (k, v) &#123;</span><br><span class="line">            if (v.type &amp;&amp; v.type === &apos;button&apos;) &#123;</span><br><span class="line">                var data_original_title_node = v.attributes.getNamedItem(&apos;data-original-title&apos;);</span><br><span class="line">                var view_type = v.attributes.getNamedItem(&apos;data-view-type&apos;).nodeValue;</span><br><span class="line">                if (view_type === &apos;list&apos;) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = &apos;列表视图&apos;;</span><br><span class="line">                &#125; else if (view_type === &apos;kanban&apos;) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = &apos;看板视图&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                v.attributes.setNamedItem(data_original_title_node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- statebar根据单据状态动态显示</title>
    <url>/2019/11/07/odoo12_1/</url>
    <content><![CDATA[<h5 id="当状态为草稿或者结算时候，显示结算。"><a href="#当状态为草稿或者结算时候，显示结算。" class="headerlink" title="当状态为草稿或者结算时候，显示结算。"></a>当状态为草稿或者结算时候，显示结算。</h5><p><img alt="已审核状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-351316405b170a57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p>#####当进行结算操作，状态变为‘到期收款’或者其他状态时，就显示单据状态<br><img alt="到期收款状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-0f33c4599f6e2776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img alt="背书状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f627f36b33b68b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>model.py 文件， ‘dynamic_state’选项为动态显示的内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">state = fields.Selection([</span><br><span class="line">    (&apos;draft&apos;, &apos;草稿&apos;),</span><br><span class="line">    (&apos;verify&apos;, &apos;已审核&apos;),</span><br><span class="line">    (&apos;due_payment&apos;, &apos;到期收款&apos;),</span><br><span class="line">    (&apos;discount&apos;, &apos;贴现&apos;),</span><br><span class="line">    (&apos;endorsement&apos;, &apos;背书&apos;),</span><br><span class="line">    (&apos;endorsement_return&apos;, &apos;背书退回&apos;),</span><br><span class="line">    (&apos;bill_return&apos;, &apos;票据退回&apos;),</span><br><span class="line">    (&apos;dynamic_state&apos;, &apos;结算&apos;), # 动态显示，设置默认值为&apos;结算&apos;</span><br><span class="line">   ], string=&apos;单据状态&apos;, copy=False, index=True, track_visibility=&apos;onchange&apos;, track_sequence=3, default=&apos;draft&apos;)</span><br></pre></td></tr></table></figure>
<p><strong>xml文件， ‘dynamic_state’ 会根据单据的状态动态显示 dynamic_visible属性中的值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;field name=&quot;state&quot; widget=&quot;statusbar&quot; readonly=&quot;1&quot; statusbar_visible=&quot;draft,verify,dynamic_state&quot;</span><br><span class="line"></span><br><span class="line">dynamic_visible=&quot;due_payment,discount,endorsement,endorsement_return,bill_return&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>js文件，继承relational_fields.js 。FieldStatus的widget进行重写。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">odoo.define(&apos;ps_base.statusbar_dynamic_visible&apos;, function (require) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var relational_fields = require(&apos;web.relational_fields&apos;);</span><br><span class="line"></span><br><span class="line">relational_fields.FieldStatus.include(&#123;</span><br><span class="line"></span><br><span class="line">_setState: function () &#123;</span><br><span class="line"></span><br><span class="line">var self = this;</span><br><span class="line"></span><br><span class="line">if (this.field.type === &apos;many2one&apos;) &#123;</span><br><span class="line"></span><br><span class="line">this.status_information = _.map(this.record.specialData[this.name], function (info) &#123;</span><br><span class="line"></span><br><span class="line">return _.extend(&#123;</span><br><span class="line"></span><br><span class="line">selected: info.id === self.value.res_id,</span><br><span class="line"></span><br><span class="line">&#125;, info);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">var selection = this.field.selection;</span><br><span class="line"></span><br><span class="line">if (this.attrs.statusbar_visible) &#123;</span><br><span class="line"></span><br><span class="line">var restriction = this.attrs.statusbar_visible;</span><br><span class="line"></span><br><span class="line">if (this.attrs.dynamic_visible) &#123;</span><br><span class="line"></span><br><span class="line">var dynamic_state = this.attrs.dynamic_visible.split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">if (dynamic_state.indexOf(self.value) !== -1) &#123;</span><br><span class="line"></span><br><span class="line">restriction = restriction.replace(&apos;dynamic_state&apos;, self.value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restriction = restriction.split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">selection = _.filter(selection, function (val) &#123;</span><br><span class="line"></span><br><span class="line">return _.contains(restriction, val[0]) || val[0] === self.value;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.status_information = _.map(selection, function (val) &#123;</span><br><span class="line"></span><br><span class="line">return &#123;id: val[0], display_name: val[1], selected: val[0] === self.value, fold: false&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义水滴状引导提示信息</title>
    <url>/2019/11/07/odoo12_6/</url>
    <content><![CDATA[<p><strong>如题，odoo本身自带水滴形状的提示。有时候二开的时候需要给某些按钮添加一个提示，则可以利用odoo的tooltips插件</strong><br><img alt="水滴形状提示.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-dfa69d7a825ad73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p><strong>鼠标移动上去会有文字提示</strong></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-1c30d4414b500cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7c19b939247e26e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-ebc8f9e7637c1aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>我们只需要定义一个tour.js文件就可以，在文件中，我们指定元素位置，绑定相关提示信息就可以。</strong><br>其中：<br><code>trigger</code>:要绑定的元素,<br><code>content</code>:  提示内容,<br><code>position</code>: 位置,<br><code>edition</code>:版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">odoo.define(&apos;crm.tour&apos;, function(require) &#123;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var core = require(&apos;web.core&apos;);</span><br><span class="line">var tour = require(&apos;web_tour.tour&apos;);</span><br><span class="line"></span><br><span class="line">var _t = core._t;</span><br><span class="line"></span><br><span class="line">tour.register(&apos;crm_tour&apos;, &#123;</span><br><span class="line">    url: &quot;/web&quot;,</span><br><span class="line">&#125;, [tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;crm.crm_menu_root&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app.&quot;),</span><br><span class="line">    position: &apos;right&apos;,</span><br><span class="line">    edition: &apos;community&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;crm.crm_menu_root&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app.&quot;),</span><br><span class="line">    position: &apos;bottom&apos;,</span><br><span class="line">    edition: &apos;enterprise&apos;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o-kanban-button-new&quot;,</span><br><span class="line">    extra_trigger: &apos;.o_opportunity_kanban&apos;,</span><br><span class="line">    content: _t(&quot;Click here to &lt;b&gt;create your first opportunity&lt;/b&gt; and add it to your pipeline.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_kanban_quick_create input:first&quot;,</span><br><span class="line">    content: _t(&quot;&lt;b&gt;Choose a name&lt;/b&gt; for your opportunity, example: &lt;i&gt;&apos;Need a new website&apos;&lt;/i&gt;&quot;),</span><br><span class="line">    position: &quot;right&quot;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_kanban_quick_create .o_kanban_add&quot;,</span><br><span class="line">    content: _t(&quot;Click here to &lt;b&gt;add your opportunity&lt;/b&gt;.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_opportunity_kanban .o_kanban_group:first-child .o_kanban_record:last-child&quot;,</span><br><span class="line">    content: _t(&quot;&lt;b&gt;Drag &amp;amp; drop opportunities&lt;/b&gt; between columns as you progress in your sales cycle.&quot;),</span><br><span class="line">    position: &quot;right&quot;,</span><br><span class="line">    run: &quot;drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(2) &quot;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_kanban_record:not(.o_updating) .o_activity_color_default&quot;,</span><br><span class="line">    extra_trigger: &quot;.o_opportunity_kanban&quot;,</span><br><span class="line">    content: _t(&quot;This opportunity has &lt;b&gt;no activity planned&lt;/b&gt;.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_schedule_activity&quot;,</span><br><span class="line">    extra_trigger: &quot;.o_opportunity_kanban&quot;,</span><br><span class="line">    content: _t(&quot;Let&apos;s schedule an activity.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &apos;.modal-body .o_field_many2one&apos;,</span><br><span class="line">    extra_trigger: &quot;.o_opportunity_kanban&quot;,</span><br><span class="line">    content: _t(&quot;&lt;p&gt;You will be able to customize your followup activities. Examples:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;introductory email&lt;/li&gt;&lt;li&gt;call 10 days after&lt;/li&gt;&lt;li&gt;second call 3 days after, ...&lt;/li&gt;&lt;/ol&gt;&lt;p class=&apos;mb0&apos;&gt;&lt;i&gt;Select a standard activity for now.&lt;/i&gt;&lt;/p&gt;&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">    run: function (actions) &#123;</span><br><span class="line">        actions.auto(&apos;.modal-footer button[special=cancel]&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_kanban_record&quot;,</span><br><span class="line">    extra_trigger: &quot;.o_opportunity_kanban&quot;,</span><br><span class="line">    content: _t(&quot;Click on the opportunity to zoom in.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">    run: function (actions) &#123;</span><br><span class="line">        actions.auto(&quot;.o_kanban_record .oe_kanban_action[data-type=edit]&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_opportunity_form .o_chatter_button_new_message&quot;,</span><br><span class="line">    content: _t(&apos;&lt;p&gt;&lt;b&gt;Send messages&lt;/b&gt; to your prospect and get replies automatically attached to this opportunity.&lt;/p&gt;&lt;p class=&quot;mb0&quot;&gt;Type &lt;i&gt;\&apos;@\&apos;&lt;/i&gt; to mention people - it\&apos;s like cc-ing on emails.&lt;/p&gt;&apos;),</span><br><span class="line">    position: &quot;bottom&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.breadcrumb-item:not(.active):last&quot;,</span><br><span class="line">    extra_trigger: &apos;.o_opportunity_form&apos;,</span><br><span class="line">    content: _t(&quot;Use the breadcrumbs to &lt;b&gt;go back to your sales pipeline&lt;/b&gt;.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;</span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;base.menu_administration&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Configuration options are available in the Settings app.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">    edition: &apos;community&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;base.menu_administration&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Configuration options are available in the Settings app.&quot;),</span><br><span class="line">    position: &quot;bottom&quot;,</span><br><span class="line">    edition: &apos;enterprise&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &quot;.o_web_settings_dashboard .o_user_emails&quot;,</span><br><span class="line">    content: _t(&quot;&lt;b&gt;Invite coworkers&lt;/b&gt; via email.&lt;br/&gt;&lt;i&gt;Enter one email per line.&lt;/i&gt;&quot;),</span><br><span class="line">    position: &quot;right&quot;</span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;crm.crm_menu_root&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Good job! You completed the tour of the CRM app.&quot;),</span><br><span class="line">    position: &apos;right&apos;,</span><br><span class="line">    edition: &apos;community&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: &apos;.o_app[data-menu-xmlid=&quot;crm.crm_menu_root&quot;]&apos;,</span><br><span class="line">    content: _t(&quot;Good job! You completed the tour of the CRM app.&quot;),</span><br><span class="line">    position: &apos;bottom&apos;,</span><br><span class="line">    edition: &apos;enterprise&apos;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 refusing to merge unrelated histories 错误</title>
    <url>/2019/11/07/git_1/</url>
    <content><![CDATA[<p>引用</p><p>git pull 失败 ,提示：<code>fatal: refusing to [merge](https://www.centos.bz/tag/merge/) unrelated histories</code></p><p>其实这个问题是因为 两个 根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并</p><a id="more"></a>


<p>具体的方法， 一个种方法： 是 从远端库拉下来代码 ， 本地要加入的代码放到远端库下载到本地的库， 然后提交上去 ， 因为这样的话， 你基于的库就是远端的库， 这是一次<a href="https://www.centos.bz/tag/update/" target="_blank" rel="noopener">update</a>了</p>
<p>第二种方法：<br>使用这个强制的方法</p>
<p><code>git pull origin [master](https://www.centos.bz/tag/master/) --allow-unrelated-histories</code></p>
<p>后面加上 <code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并</p>
<p>后面再push就可以了 <code>[git push](https://www.centos.bz/tag/git-push/) [gitlab](https://www.centos.bz/tag/gitlab/) master:init</code></p>
<p>gitlab是别名 ， 使用</p>
<p><code>git remote add gitlab ssh://xzh@192.168.1.91:50022/opt/gitrepo/withholdings/WithholdingTransaction</code></p>
<p>master是本地的branch名字<br>init是远端要推送的branch名字</p>
<p>本地必须要先add ，<a href="https://www.centos.bz/tag/commit/" target="_blank" rel="noopener">commit</a>完了 才能推上去</p>
<p>关于这个问题，可以参考<a href="http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。" target="_blank" rel="noopener">http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。</a></p>
<p>在进行git pull 时，添加一个可选项</p>
<p><code>git pull origin master --allow-unrelated-histories</code></p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2-- jinja2模板过滤器</title>
    <url>/2019/11/07/jinja2_1/</url>
    <content><![CDATA[<p>###jinja2模板过滤器<br>过滤器是通过管道符号’|‘进行使用的，例如 {{ name|length }} ，<br>将返回name的长度，过滤器相当于一个函数，把当前变量传入到过滤<br>器中，然后过滤器根据自己的功能，返回相应的值，之后再将结果渲染<br>到页面中。</p>
<a id="more"></a>
<p>####基本用法：</p>
 {{变量|过滤器名}} 

<p>####常用过滤器：<br><strong>default过滤器</strong><br>使用方式: {{ value|default('默认值') }} ，如果value这个key不存在，那么就会使用default过滤器提供的默认值。如果你想判断一个值是否为False（例如：None、空字符串、空列表、空字典），那么就必须传递另外一个参数 {{ value|default('默认值',boolean=True) }} 可以使用‘or’来替代default 例如 {{signature or ‘no signature’}} 。<br>####自动转义过滤器：<br><strong>’safe‘过滤器：</strong>可以关闭一个字符串的自动转义。<br><strong>‘escape’过滤器：</strong>对某一改字符串进行转义。<br><strong>’autoescape‘标签，</strong>可以对他里面的代码块关闭或开启自动转义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;  &#123;#使用闭合标签关闭自动转义，off关闭，on开启#&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; talk|escape &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>
<p>等等还有很多常用过滤器，请自行查阅。</p>
<p>####自定义过滤器:<br>过滤器本质上是一个函数。如果在模板中调用这个过滤器，就会将这个变量的值作为第一个参数传给过滤器函数，然后过滤器函数返回过滤后的值，需要使用到一个装饰器，<strong>@app.template_filter(‘自定义过滤器名’)</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.template_filter(&apos;my_cut&apos;)</span><br><span class="line">def cut(value):</span><br><span class="line">    value = value.replace(&apos;hello&apos;, &apos;&apos;)</span><br><span class="line">    return value</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; article|my_cut &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>#####自定义时间处理过滤器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create_time = datetime(2019, 1, 9, 15, 11, 0)  # 发表时间</span><br><span class="line"></span><br><span class="line">@app.template_filter(&apos;handle_time&apos;)</span><br><span class="line">def handle_time(time):</span><br><span class="line">    if isinstance(time, datetime):</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        timestamp = (now - time).total_seconds()</span><br><span class="line">        if timestamp &lt; 60:</span><br><span class="line">            return &apos;刚刚&apos;</span><br><span class="line">        elif 60 &lt;= timestamp &lt;= 60*60:</span><br><span class="line">            minutes = timestamp/60</span><br><span class="line">            return &apos;%s分钟前&apos; % int(minutes)</span><br><span class="line">        elif 60*60 &lt;= timestamp &lt;= 60*60*24:</span><br><span class="line">            hours = timestamp/(60*60)</span><br><span class="line">            return &quot;%s小时前&quot; % int(hours)</span><br><span class="line">        elif 60*60*24 &lt;= timestamp &lt;= 60*60*24*30:</span><br><span class="line">            days = timestamp/(60*60*24)</span><br><span class="line">            return &quot;%s天前&quot; % int(days)</span><br><span class="line">        else:</span><br><span class="line">            return time.strftime(&quot;%Y/%m/%d %H:%M&quot;)</span><br><span class="line">    else:</span><br><span class="line">        return time</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; create_time|handle_time &#125;&#125; &lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>###宏<br>宏类似于Python中的函数，我们在宏中定义行为，还可以进行传递参数，就像Python中的函数一样一样儿的。</p>
<p>在宏中定义一个宏的关键字是macro，后面跟其 宏的名称和参数等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% macro input(name,age=18) %&#125;  # 参数age的默认值为18</span><br><span class="line"> </span><br><span class="line"> &lt;input type=&apos;text&apos; name=&quot; &#123;&#123; name &#125;&#125;&quot; value=&quot; &#123;&#123; age &#125;&#125;&quot; &gt;</span><br><span class="line"> </span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>
<p>调用方法也和Python的类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; input(&apos;daxin&apos;) &#125;&#125; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; input(&apos;daxin&apos;,age=20) &#125;&#125; &lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Jinjia2</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- 查找并且杀死查找出的所有进程</title>
    <url>/2019/11/07/ubuntu_1/</url>
    <content><![CDATA[<p>直接命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep abc | awk &apos;&#123;print $2&#125;&apos; | xargs kill -9</span><br></pre></td></tr></table></figure><p>其中abc为要查找的进程</p><p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- Ubuntu16.04安装Redis</title>
    <url>/2019/11/07/ubuntu_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis是常用基于内存的Key-Value数据库，比Memcache更先进，支持多种数据结构，高效，快速。用Redis可以很轻松解决高并发的数据访问问题；作为实时监控信号处理也非常不错。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Ubuntu 16.04</p>
<h1 id="安装Redis服务器端"><a href="#安装Redis服务器端" class="headerlink" title="安装Redis服务器端"></a>安装Redis服务器端</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>

<p>安装完成后，Redis服务器会自动启动，我们检查Redis服务器程序</p>
<a id="more"></a>

<h2 id="检查Redis服务器系统进程"><a href="#检查Redis服务器系统进程" class="headerlink" title="检查Redis服务器系统进程"></a>检查Redis服务器系统进程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ ps -aux|grep redis</span><br><span class="line">redis 4162  0.1  0.0  10676  1420 ?        Ss   23:24   0:00 /usr/bin/redis-server /etc/redis/redis.conf</span><br><span class="line">conan 4172  0.0  0.0  11064   924 pts/0    S+   23:26   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态"><a href="#通过启动命令检查Redis服务器状态" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态-1"><a href="#通过启动命令检查Redis服务器状态-1" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ sudo /etc/init.d/redis-server status</span><br><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 四 2017-11-09 12:22:09 CST; 59s ago</span><br><span class="line">     Docs: http://redis.io/documentation,</span><br><span class="line">           man:redis-server(1)</span><br><span class="line"> Main PID: 5394 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis-server.service</span><br><span class="line">           └─5394 /usr/bin/redis-server 127.0.0.1:6379 11月 09 12:22:09 zzf systemd[1]: Starting Advanced key-value store...</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5388]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5395]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf systemd[1]: Started Advanced key-value store.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<h1 id="通过命令行客户端访问Redis"><a href="#通过命令行客户端访问Redis" class="headerlink" title="通过命令行客户端访问Redis"></a>通过命令行客户端访问Redis</h1><p>安装Redis服务器，会自动地一起安装Redis命令行客户端程序。</p>
<p>在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h1 id="命令行的帮助"><a href="#命令行的帮助" class="headerlink" title="命令行的帮助"></a>命令行的帮助</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; help</span><br><span class="line">redis-cli 2.2.12 Type: &quot;help @&quot; to get a list of commands in </span><br><span class="line">      &quot;help &quot; for help on &quot;help &quot; to get a list of possible help topics &quot;quit&quot; to exit</span><br></pre></td></tr></table></figure>

<h1 id="查看所有的key列表"><a href="#查看所有的key列表" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys * (empty list or set)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<h1 id="基本的Redis客户端命令操作"><a href="#基本的Redis客户端命令操作" class="headerlink" title="基本的Redis客户端命令操作"></a>基本的Redis客户端命令操作</h1><p><strong>增加一条记录key1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; set key1 &quot;hello&quot; OK</span><br></pre></td></tr></table></figure>

<h1 id="打印记录"><a href="#打印记录" class="headerlink" title="打印记录"></a>打印记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; get key1 &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p><strong>增加一条数字记录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;set key2 1 OK</span><br></pre></td></tr></table></figure>
<h1 id="让数字自增"><a href="#让数字自增" class="headerlink" title="让数字自增"></a>让数字自增</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(integer) 2 redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(integer) 3 # 打印记录</span><br><span class="line">redis 127.0.0.1:6379&gt; get key2 &quot;3&quot;</span><br></pre></td></tr></table></figure>

<p><strong>增加一个列表记录key3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 a</span><br><span class="line">(integer) 1 # 从左边插入列表</span><br><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 b</span><br><span class="line">(integer) 2 # 从右边插入列表</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH key3 c</span><br><span class="line">(integer) 3 # 打印列表记录，按从左到右的顺序</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE key3 0 3</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>增加一个哈希记表录key4</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET key4 name &quot;John Smith&quot; (integer) 1 # 在哈希表中插入，email的Key和Value的值</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET key4 email &quot;abc@gmail.com&quot; (integer) 1 # 打印哈希表中，name为key的值</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET key4 name &quot;John Smith&quot; # 打印整个哈希表</span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key4 1) &quot;name&quot;</span><br><span class="line">2) &quot;John Smith&quot;</span><br><span class="line">3) &quot;email&quot;</span><br><span class="line">4) &quot;abc@gmail.com&quot;</span><br></pre></td></tr></table></figure>
<p><strong>增加一条哈希表记录key5</strong></p>
<h1 id="增加一条哈希表记录key5，一次插入多个Key和value的值"><a href="#增加一条哈希表记录key5，一次插入多个Key和value的值" class="headerlink" title="增加一条哈希表记录key5，一次插入多个Key和value的值"></a>增加一条哈希表记录key5，一次插入多个Key和value的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMSET key5 username antirez password P1pp0 age 3 OK</span><br></pre></td></tr></table></figure>
<h1 id="打印哈希表中，username和age为key的值"><a href="#打印哈希表中，username和age为key的值" class="headerlink" title="打印哈希表中，username和age为key的值"></a>打印哈希表中，username和age为key的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMGET key5 username age 1) &quot;antirez&quot;</span><br><span class="line">2) &quot;3&quot; # 打印完整的哈希表记录</span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key5 1) &quot;username&quot;</span><br><span class="line">2) &quot;antirez&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;P1pp0&quot;</span><br><span class="line">5) &quot;age&quot;</span><br><span class="line">6) &quot;3&quot;</span><br></pre></td></tr></table></figure>

<p><strong>删除记录</strong></p>
<h1 id="查看所有的key列表-1"><a href="#查看所有的key列表-1" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key2&quot;</span><br><span class="line">2) &quot;key3&quot;</span><br><span class="line">3) &quot;key4&quot;</span><br><span class="line">4) &quot;key5&quot;</span><br><span class="line">5) &quot;key1&quot; </span><br><span class="line"># 删除key1,key5</span><br><span class="line">redis 127.0.0.1:6379&gt; del key1</span><br><span class="line">(integer) 1 redis 127.0.0.1:6379&gt; del key5</span><br><span class="line">(integer) 1 # 查看所有的key列表</span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key2&quot;</span><br><span class="line">2) &quot;key3&quot;</span><br><span class="line">3) &quot;key4&quot;</span><br></pre></td></tr></table></figure>

<h1 id="修改Redis的配置"><a href="#修改Redis的配置" class="headerlink" title="修改Redis的配置"></a>修改Redis的配置</h1><h2 id="使用Redis的访问账号"><a href="#使用Redis的访问账号" class="headerlink" title="使用Redis的访问账号"></a>使用Redis的访问账号</h2><p>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为redisredis。</p>
<p>用vi打开Redis服务器的配置文件redis.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
<p>#取消注释requirepass</p>
<figure class="highlight plain"><figcaption><span>redisredis```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 让Redis服务器被远程访问</span><br><span class="line"></span><br><span class="line">默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。</span><br><span class="line"></span><br><span class="line">用vi打开Redis服务器的配置文件redis.conf</span><br></pre></td></tr></table></figure>
<p>~ sudo vi /etc/redis/redis.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#注释bind</span><br><span class="line">```#bind 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>修改后，重启Redis服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ sudo /etc/init.d/redis-server restart</span><br><span class="line">Stopping redis-server: redis-server.</span><br><span class="line">Starting redis-server: redis-server.</span><br></pre></td></tr></table></figure>
<p>未使用密码登陆Redis服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys * (error) ERR operation not permitted</span><br></pre></td></tr></table></figure>
<p>发现可以登陆，但无法执行命令了。</p>
<p>登陆Redis服务器，输入密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~  redis-cli -a redisredis</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key2&quot;</span><br><span class="line">2) &quot;key3&quot;</span><br><span class="line">3) &quot;key4&quot;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>登陆后，一切正常。</p>
<p>我们检查Redis的网络监听端口</p>
<p>检查Redis服务器占用端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>
<p>我们看到网络监听从之前的 127.0.0.1:3306 变成 0 0.0.0.0:3306，表示Redis已经允许远程登陆访问。</p>
<p>我们在远程的另一台Linux访问Redis服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ redis-cli -a redisredis -h 192.168.1.199 redis 192.168.1.199:6379&gt; keys *</span><br><span class="line">1) &quot;key2&quot;</span><br><span class="line">2) &quot;key3&quot;</span><br><span class="line">3) &quot;key4&quot;</span><br></pre></td></tr></table></figure>
<p>远程访问正常。通过上面的操作，我们就把Redis数据库服务器，在Linux Ubuntu中的系统安装完成。</p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 销售订单确认后生成销售出库单的代码跟踪</title>
    <url>/2019/11/07/odoo12_4/</url>
    <content><![CDATA[<p><strong>如题：销售订单在<code>报价单</code>状态点击<code>确认</code>按钮，状态变更为<code>销售订单</code>,同时生成一个<code>销售出库单</code></strong></p>
<a id="more"></a>
<p><img alt="报价单" data-src="https://upload-images.jianshu.io/upload_images/8791854-b56cf0ed2d6a5b56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="销售订单" data-src="https://upload-images.jianshu.io/upload_images/8791854-92296fe8c111be8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<p>———————————————–分割线—————————————–<br>####代码过程<br>#####1.点击 <code>确认</code>按钮<br>主要执行两个逻辑：<br>一是将单据状态改变，由报价单改为销售订单<br>二是通过推拉规则生成调拨单</p>
<p>以下为<code>sale</code>模块的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api.multi</span><br><span class="line">def action_confirm(self):</span><br><span class="line">    if self._get_forbidden_state_confirm() &amp; set(self.mapped(&apos;state&apos;)):</span><br><span class="line">        raise UserError(_(</span><br><span class="line">                &apos;It is not allowed to confirm an order in the following states: %s&apos;</span><br><span class="line">            ) % (&apos;, &apos;.join(self._get_forbidden_state_confirm())))</span><br><span class="line"></span><br><span class="line">    for order in self.filtered(lambda order: order.partner_id not in order.message_partner_ids):</span><br><span class="line">        order.message_subscribe([order.partner_id.id])</span><br><span class="line">        self.write(&#123;</span><br><span class="line">            &apos;state&apos;: &apos;sale&apos;,</span><br><span class="line">            &apos;confirmation_date&apos;: fields.Datetime.now()</span><br><span class="line">        &#125;)</span><br><span class="line">        self._action_confirm()</span><br><span class="line">        if self.env[&apos;ir.config_parameter&apos;].sudo().get_param(&apos;sale.auto_done_setting&apos;):</span><br><span class="line">            self.action_done()</span><br><span class="line">        return True</span><br></pre></td></tr></table></figure>

<p>重点代码是<code>self._action_confirm()</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api.multi</span><br><span class="line">def _action_confirm(self):</span><br><span class="line">    &quot;&quot;&quot; Implementation of additionnal mecanism of Sales Order confirmation.</span><br><span class="line">        This method should be extended when the confirmation should generated</span><br><span class="line">        other documents. In this method, the SO are in &apos;sale&apos; state (not yet &apos;done&apos;).</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if self.env.context.get(&apos;send_email&apos;):</span><br><span class="line">        self.force_quotation_send()</span><br><span class="line"></span><br><span class="line">    # create an analytic account if at least an expense product</span><br><span class="line">    for order in self:</span><br><span class="line">        if any([expense_policy not in [False, &apos;no&apos;] for expense_policy in order.order_line.mapped(&apos;product_id.expense_policy&apos;)]):</span><br><span class="line">            if not order.analytic_account_id:</span><br><span class="line">                order._create_analytic_account()</span><br><span class="line"></span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>
<p>通过代码注释，我们可以确定这是确认订单的附加机制，生成其他单据时候应拓展此方法。</p>
<p>####2.生成调拨单<br>继续跟踪代码<br>以下为<code>sale_stock</code>模块的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api.multi</span><br><span class="line">def _action_confirm(self):</span><br><span class="line">    for order in self:</span><br><span class="line">        order.order_line._action_launch_stock_rule()</span><br><span class="line">    super(SaleOrder, self)._action_confirm()</span><br></pre></td></tr></table></figure>
<p>不难发现，再次拓展了<strong>_action_confirm</strong>方法。<br>重点代码：<code>order.order_line._action_launch_stock_rule()</code><br>继续跟踪sale.order.line的<code>_action_launch_stock_rule</code>的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@api.multi</span><br><span class="line">def _action_launch_stock_rule(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Launch procurement group run method with required/custom fields genrated by a</span><br><span class="line">    sale order line. procurement group will launch &apos;_run_pull&apos;, &apos;_run_buy&apos; or &apos;_run_manufacture&apos;</span><br><span class="line">    depending on the sale order line product rule.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    precision = self.env[&apos;decimal.precision&apos;].precision_get(&apos;Product Unit of Measure&apos;)</span><br><span class="line">    errors = []</span><br><span class="line">    for line in self:</span><br><span class="line">        if line.state != &apos;sale&apos; or not line.product_id.type in (&apos;consu&apos;,&apos;product&apos;):</span><br><span class="line">            continue</span><br><span class="line">        qty = line._get_qty_procurement()</span><br><span class="line">        if float_compare(qty, line.product_uom_qty, precision_digits=precision) &gt;= 0:</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        group_id = line.order_id.procurement_group_id</span><br><span class="line">        if not group_id:</span><br><span class="line">            group_id = self.env[&apos;procurement.group&apos;].create(&#123;</span><br><span class="line">                &apos;name&apos;: line.order_id.name, &apos;move_type&apos;: line.order_id.picking_policy,</span><br><span class="line">                &apos;sale_id&apos;: line.order_id.id,</span><br><span class="line">                &apos;partner_id&apos;: line.order_id.partner_shipping_id.id,</span><br><span class="line">            &#125;)</span><br><span class="line">            line.order_id.procurement_group_id = group_id</span><br><span class="line">        else:</span><br><span class="line">            # In case the procurement group is already created and the order was</span><br><span class="line">            # cancelled, we need to update certain values of the group.</span><br><span class="line">            updated_vals = &#123;&#125;</span><br><span class="line">            if group_id.partner_id != line.order_id.partner_shipping_id:</span><br><span class="line">                updated_vals.update(&#123;&apos;partner_id&apos;: line.order_id.partner_shipping_id.id&#125;)</span><br><span class="line">            if group_id.move_type != line.order_id.picking_policy:</span><br><span class="line">                updated_vals.update(&#123;&apos;move_type&apos;: line.order_id.picking_policy&#125;)</span><br><span class="line">            if updated_vals:</span><br><span class="line">                group_id.write(updated_vals)</span><br><span class="line"></span><br><span class="line">        values = line._prepare_procurement_values(group_id=group_id)</span><br><span class="line">        product_qty = line.product_uom_qty - qty</span><br><span class="line"></span><br><span class="line">        procurement_uom = line.product_uom</span><br><span class="line">        quant_uom = line.product_id.uom_id</span><br><span class="line">        get_param = self.env[&apos;ir.config_parameter&apos;].sudo().get_param</span><br><span class="line">        if procurement_uom.id != quant_uom.id and get_param(&apos;stock.propagate_uom&apos;) != &apos;1&apos;:</span><br><span class="line">            product_qty = line.product_uom._compute_quantity(product_qty, quant_uom, rounding_method=&apos;HALF-UP&apos;)</span><br><span class="line">            procurement_uom = quant_uom</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            self.env[&apos;procurement.group&apos;].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</span><br><span class="line">        except UserError as error:</span><br><span class="line">            errors.append(error.name)</span><br><span class="line">    if errors:</span><br><span class="line">        raise UserError(&apos;\n&apos;.join(errors))</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>

<p>主要代码<code>self.env[&#39;procurement.group&#39;].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</code><br>在此之前，主要是计算生成调拨单的数据。</p>
<p>继续跟踪<code>run</code>方法。</p>
<p>以下为<code>stock</code>模块的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api.model</span><br><span class="line">def run(self, product_id, product_qty, product_uom, location_id, name, origin, values):</span><br><span class="line">    &quot;&quot;&quot; Method used in a procurement case. The purpose is to supply the</span><br><span class="line">    product passed as argument in the location also given as an argument.</span><br><span class="line">    In order to be able to find a suitable location that provide the product</span><br><span class="line">    it will search among stock.rule.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    values.setdefault(&apos;company_id&apos;, self.env[&apos;res.company&apos;]._company_default_get(&apos;procurement.group&apos;))</span><br><span class="line">    values.setdefault(&apos;priority&apos;, &apos;1&apos;)</span><br><span class="line">    values.setdefault(&apos;date_planned&apos;, fields.Datetime.now())</span><br><span class="line">    rule = self._get_rule(product_id, location_id, values)</span><br><span class="line">    if not rule:</span><br><span class="line">        raise UserError(_(&apos;No procurement rule found in location &quot;%s&quot; for product &quot;%s&quot;.\n Check routes configuration.&apos;) % (location_id.display_name, product_id.display_name))</span><br><span class="line">    action = &apos;pull&apos; if rule.action == &apos;pull_push&apos; else rule.action</span><br><span class="line">    if hasattr(rule, &apos;_run_%s&apos; % action):</span><br><span class="line">        getattr(rule, &apos;_run_%s&apos; % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</span><br><span class="line">    else:</span><br><span class="line">        _logger.error(&quot;The method _run_%s doesn&apos;t exist on the procument rules&quot; % action)</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>
<p>重点代码：<code>getattr(rule, &#39;_run_%s&#39; % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</code><br>发现是根据<code>推拉规则</code>，通过<code>反射</code>的方式执行的代码。<br>执行<code>_run_pull</code>或者<code>_run_push</code>….</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def _run_pull(self, product_id, product_qty, product_uom, location_id, name, origin, values):</span><br><span class="line">    if not self.location_src_id:</span><br><span class="line">        msg = _(&apos;No source location defined on stock rule: %s!&apos;) % (self.name, )</span><br><span class="line">        raise UserError(msg)</span><br><span class="line"></span><br><span class="line">    # create the move as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)</span><br><span class="line">    # Search if picking with move for it exists already:</span><br><span class="line">    group_id = False</span><br><span class="line">    if self.group_propagation_option == &apos;propagate&apos;:</span><br><span class="line">        group_id = values.get(&apos;group_id&apos;, False) and values[&apos;group_id&apos;].id</span><br><span class="line">    elif self.group_propagation_option == &apos;fixed&apos;:</span><br><span class="line">        group_id = self.group_id.id</span><br><span class="line"></span><br><span class="line">    data = self._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)</span><br><span class="line">    # Since action_confirm launch following procurement_group we should activate it.</span><br><span class="line">    move = self.env[&apos;stock.move&apos;].sudo().with_context(force_company=data.get(&apos;company_id&apos;, False)).create(data)</span><br><span class="line">    move._action_confirm()</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>
<p>重点代码<code>move._action_confirm()</code><br>此时是<strong>先生成库存移动move单</strong>，通过<strong>_action_confirm()生成picking单</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def _action_confirm(self, merge=True, merge_into=False):</span><br><span class="line">    &quot;&quot;&quot; Confirms stock move or put it in waiting if it&apos;s linked to another move.</span><br><span class="line">    :param: merge: According to this boolean, a newly confirmed move will be merged</span><br><span class="line">    in another move of the same picking sharing its characteristics.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    move_create_proc = self.env[&apos;stock.move&apos;]</span><br><span class="line">    move_to_confirm = self.env[&apos;stock.move&apos;]</span><br><span class="line">    move_waiting = self.env[&apos;stock.move&apos;]</span><br><span class="line"></span><br><span class="line">    to_assign = &#123;&#125;</span><br><span class="line">    for move in self:</span><br><span class="line">        # if the move is preceeded, then it&apos;s waiting (if preceeding move is done, then action_assign has been called already and its state is already available)</span><br><span class="line">        if move.move_orig_ids:</span><br><span class="line">            move_waiting |= move</span><br><span class="line">        else:</span><br><span class="line">            if move.procure_method == &apos;make_to_order&apos;:</span><br><span class="line">                move_create_proc |= move</span><br><span class="line">            else:</span><br><span class="line">                move_to_confirm |= move</span><br><span class="line">        if move._should_be_assigned():</span><br><span class="line">            key = (move.group_id.id, move.location_id.id, move.location_dest_id.id)</span><br><span class="line">            if key not in to_assign:</span><br><span class="line">                to_assign[key] = self.env[&apos;stock.move&apos;]</span><br><span class="line">            to_assign[key] |= move</span><br><span class="line"></span><br><span class="line">    # create procurements for make to order moves</span><br><span class="line">    for move in move_create_proc:</span><br><span class="line">        values = move._prepare_procurement_values()</span><br><span class="line">        origin = (move.group_id and move.group_id.name or (move.origin or move.picking_id.name or &quot;/&quot;))</span><br><span class="line">        self.env[&apos;procurement.group&apos;].run(move.product_id, move.product_uom_qty, move.product_uom, move.location_id, move.rule_id and move.rule_id.name or &quot;/&quot;, origin,</span><br><span class="line">                                          values)</span><br><span class="line"></span><br><span class="line">    move_to_confirm.write(&#123;&apos;state&apos;: &apos;confirmed&apos;&#125;)</span><br><span class="line">    (move_waiting | move_create_proc).write(&#123;&apos;state&apos;: &apos;waiting&apos;&#125;)</span><br><span class="line"></span><br><span class="line">    # assign picking in batch for all confirmed move that share the same details</span><br><span class="line">    for moves in to_assign.values():</span><br><span class="line">        moves._assign_picking()</span><br><span class="line">    self._push_apply()</span><br><span class="line">    if merge:</span><br><span class="line">        return self._merge_moves(merge_into=merge_into)</span><br><span class="line">    return self</span><br></pre></td></tr></table></figure>
<p>重点代码：<code>moves._assign_picking()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def _assign_picking(self):</span><br><span class="line">    &quot;&quot;&quot; Try to assign the moves to an existing picking that has not been</span><br><span class="line">    reserved yet and has the same procurement group, locations and picking</span><br><span class="line">    type (moves should already have them identical). Otherwise, create a new</span><br><span class="line">    picking to assign them to. &quot;&quot;&quot;</span><br><span class="line">    Picking = self.env[&apos;stock.picking&apos;]</span><br><span class="line">    for move in self:</span><br><span class="line">        recompute = False</span><br><span class="line">        picking = move._search_picking_for_assignation()</span><br><span class="line">        if picking:</span><br><span class="line">            if picking.partner_id.id != move.partner_id.id or picking.origin != move.origin:</span><br><span class="line">                # If a picking is found, we&apos;ll append `move` to its move list and thus its</span><br><span class="line">                # `partner_id` and `ref` field will refer to multiple records. In this</span><br><span class="line">                # case, we chose to  wipe them.</span><br><span class="line">                picking.write(&#123;</span><br><span class="line">                    &apos;partner_id&apos;: False,</span><br><span class="line">                    &apos;origin&apos;: False,</span><br><span class="line">                &#125;)</span><br><span class="line">        else:</span><br><span class="line">            recompute = True</span><br><span class="line">            picking = Picking.create(move._get_new_picking_values())</span><br><span class="line">        move.write(&#123;&apos;picking_id&apos;: picking.id&#125;)</span><br><span class="line">        move._assign_picking_post_process(new=recompute)</span><br><span class="line">        # If this method is called in batch by a write on a one2many and</span><br><span class="line">        # at some point had to create a picking, some next iterations could</span><br><span class="line">        # try to find back the created picking. As we look for it by searching</span><br><span class="line">        # on some computed fields, we have to force a recompute, else the</span><br><span class="line">        # record won&apos;t be found.</span><br><span class="line">        if recompute:</span><br><span class="line">            move.recompute()</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>

<p>在此处生成的是<strong>确认</strong>状态的picking单以及move单。<br><strong>但是为什么我们在交货单中看到的是就绪状态的单据呢？</strong><br>别急，我们继续查找代码。<br>在此，先插一句，必须了解什么是jit即时调度。（我不知道，别问我了！）<br>以下代码为<code>procurement_jit</code>模块</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api.multi</span><br><span class="line">    def _action_launch_stock_rule(self):</span><br><span class="line">        res = super(SaleOrderLine, self)._action_launch_stock_rule()</span><br><span class="line">        orders = list(set(x.order_id for x in self))</span><br><span class="line">        for order in orders:</span><br><span class="line">            reassign = order.picking_ids.filtered(lambda x: x.state==&apos;confirmed&apos; or (x.state in [&apos;waiting&apos;, &apos;assigned&apos;] and not x.printed))</span><br><span class="line">            if reassign:</span><br><span class="line">                reassign.action_assign()</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>
<p>聪明的你，已经发现玄机所在了，不错，就是执行了一个关键代码<code>reassign.action_assign()</code></p>
<p>以上。</p>
<p>备注：<br>花费了一天时间，研究逻辑，可能是本人也不太熟悉这部分业务的过程。时间耽误很长。建议各位研究业务过程，业务了解，代码也就好找了。</p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义配置面板</title>
    <url>/2019/11/07/odoo12_7/</url>
    <content><![CDATA[<p><strong>如题，Odoo开发过程中，有时遇到一些需求需要在页面中快速配置一些信息数据,此时就需要用到配置面板， 如下图所示：</strong><br><img alt="配置面板" data-src="https://upload-images.jianshu.io/upload_images/8791854-48b3b9b19f3e5a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>**主要分三步：<br>一是定义配置面板的模板<br>二是定义路由渲染模板<br>三是给指定模型视图绑定模板路由</p>
<a id="more"></a>
<p>代码如下：**</p>
<p>模板文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;odoo&gt;</span><br><span class="line">    &lt;!-- ONBOARDING STEPS --&gt;</span><br><span class="line">    &lt;template id=&quot;onboarding_quotation_layout_step&quot;&gt;</span><br><span class="line">        &lt;t t-call=&quot;base.onboarding_step&quot;&gt;</span><br><span class="line">            &lt;t t-set=&quot;title&quot;&gt;Quotation Layout&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;description&quot;&gt;Customize the look of your quotations.&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;done_icon&quot; t-value=&quot;&apos;fa-star&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;done_text&quot;&gt;Looks great!&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;btn_text&quot;&gt;Customize&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;method&quot; t-value=&quot;&apos;action_open_sale_onboarding_quotation_layout&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;model&quot; t-value=&quot;&apos;res.company&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;state&quot; t-value=&quot;state.get(&apos;account_onboarding_invoice_layout_state&apos;)&quot; /&gt;</span><br><span class="line">        &lt;/t&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template id=&quot;sale_onboarding_order_confirmation_step&quot;&gt;</span><br><span class="line">        &lt;t t-call=&quot;base.onboarding_step&quot;&gt;</span><br><span class="line">            &lt;t t-set=&quot;title&quot;&gt;Confirmation &amp;amp; Payment&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;description&quot;&gt;Choose how to confirm quotations and get paid.&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;btn_text&quot;&gt;Set payments&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;method&quot; t-value=&quot;&apos;action_open_sale_onboarding_payment_acquirer&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;model&quot; t-value=&quot;&apos;res.company&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;state&quot; t-value=&quot;state.get(&apos;sale_onboarding_order_confirmation_state&apos;)&quot; /&gt;</span><br><span class="line">        &lt;/t&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">        &lt;template id=&quot;sale_onboarding_sample_quotation_step&quot;&gt;</span><br><span class="line">        &lt;t t-call=&quot;base.onboarding_step&quot;&gt;</span><br><span class="line">            &lt;t t-set=&quot;title&quot;&gt;Sample Quotation&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;description&quot;&gt;Send a quotation to test the customer portal.&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;btn_text&quot;&gt;Send sample&lt;/t&gt;</span><br><span class="line">            &lt;t t-set=&quot;method&quot; t-value=&quot;&apos;action_open_sale_onboarding_sample_quotation&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;model&quot; t-value=&quot;&apos;res.company&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;state&quot; t-value=&quot;state.get(&apos;sale_onboarding_sample_quotation_state&apos;)&quot; /&gt;</span><br><span class="line">        &lt;/t&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ONBOARDING PANEL--&gt;</span><br><span class="line">    &lt;template id=&quot;sale_quotation_onboarding_panel&quot; name=&quot;sale.quotation.onboarding.panel&quot;&gt;</span><br><span class="line">        &lt;t t-call=&quot;base.onboarding_container&quot;&gt;</span><br><span class="line">            &lt;t t-set=&quot;classes&quot; t-value=&quot;&apos;o_onboarding_violet&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;bg_image&quot; t-value=&quot;&apos;/sale/static/src/img/sale_quotation_onboarding_bg.jpg&apos;&quot;/&gt;</span><br><span class="line">            &lt;t t-set=&quot;close_method&quot; t-value=&quot;&apos;action_close_sale_quotation_onboarding&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-set=&quot;close_model&quot; t-value=&quot;&apos;res.company&apos;&quot; /&gt;</span><br><span class="line">            &lt;t t-call=&quot;base.onboarding_company_step&quot; name=&quot;company_step&quot; /&gt;</span><br><span class="line">            &lt;t t-call=&quot;sale.onboarding_quotation_layout_step&quot; name=&quot;quotation_layout_step&quot; /&gt;</span><br><span class="line">            &lt;t t-call=&quot;sale.sale_onboarding_order_confirmation_step&quot; name=&quot;payment_acquirer_step&quot; /&gt;</span><br><span class="line">            &lt;t t-call=&quot;sale.sale_onboarding_sample_quotation_step&quot; name=&quot;sample_quotation_step&quot; /&gt;</span><br><span class="line">        &lt;/t&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- ORDER CONFIRMATION --&gt;</span><br><span class="line">    &lt;record id=&quot;sale_onboarding_order_confirmation_form&quot; model=&quot;ir.ui.view&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;sale.order.confirmation.onboarding.form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;model&quot;&gt;sale.payment.acquirer.onboarding.wizard&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;inherit_id&quot; ref=&quot;payment.payment_acquirer_onboarding_wizard_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;mode&quot;&gt;primary&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;priority&quot;&gt;1000&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;arch&quot; type=&quot;xml&quot;&gt;</span><br><span class="line">            &lt;xpath expr=&quot;//div[@name=&apos;left-column&apos;]&quot; position=&quot;attributes&quot;&gt;</span><br><span class="line">                &lt;attribute name=&quot;class&quot;&gt;col col-4&lt;/attribute&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">    &lt;record id=&quot;action_open_sale_onboarding_payment_acquirer_wizard&quot; model=&quot;ir.actions.act_window&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;How your customers can confirm an order&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;type&quot;&gt;ir.actions.act_window&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;res_model&quot;&gt;sale.payment.acquirer.onboarding.wizard&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_type&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_mode&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_id&quot; ref=&quot;sale_onboarding_order_confirmation_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;target&quot;&gt;new&lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">    &lt;!-- QUOTATION LAYOUT --&gt;</span><br><span class="line">    &lt;record id=&quot;sale_onboarding_quotation_layout_form&quot; model=&quot;ir.ui.view&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;sale.onboarding.quotation.layout.form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;model&quot;&gt;res.company&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;inherit_id&quot; ref=&quot;base.view_company_document_template_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;mode&quot;&gt;primary&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;priority&quot;&gt;1000&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;arch&quot; type=&quot;xml&quot;&gt;</span><br><span class="line">            &lt;xpath expr=&quot;//button[@special=&apos;save&apos;]&quot; position=&quot;replace&quot;&gt;</span><br><span class="line">                &lt;button string=&quot;Apply&quot; class=&quot;btn btn-primary&quot; type=&quot;object&quot; name=&quot;action_save_onboarding_quotation_layout&quot; /&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">    &lt;record id=&quot;action_open_sale_onboarding_quotation_layout&quot; model=&quot;ir.actions.act_window&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;Configure your document layout&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;type&quot;&gt;ir.actions.act_window&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;res_model&quot;&gt;res.company&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_mode&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_type&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_id&quot; ref=&quot;sale_onboarding_quotation_layout_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;target&quot;&gt;new&lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">    &lt;!-- SAMPLE QUOTATION --&gt;</span><br><span class="line">    &lt;record model=&quot;ir.ui.view&quot; id=&quot;sale_onboarding_sample_quotation_form&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;mail.compose.message.sale.onboarding.sample.quotation.form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;model&quot;&gt;mail.compose.message&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;inherit_id&quot; ref=&quot;mail.email_compose_message_wizard_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;priority&quot;&gt;1000&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;mode&quot;&gt;primary&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;arch&quot; type=&quot;xml&quot;&gt;</span><br><span class="line">            &lt;xpath expr=&quot;//span[@name=&apos;document_followers_text&apos;]&quot; position=&quot;attributes&quot;&gt;</span><br><span class="line">                &lt;attribute name=&quot;invisible&quot;&gt;1&lt;/attribute&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">            &lt;xpath expr=&quot;//button[@name=&apos;save_as_template&apos;]&quot; position=&quot;attributes&quot;&gt;</span><br><span class="line">                &lt;attribute name=&quot;invisible&quot;&gt;1&lt;/attribute&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">            &lt;xpath expr=&quot;//field[@name=&apos;template_id&apos;]&quot; position=&quot;attributes&quot;&gt;</span><br><span class="line">                &lt;attribute name=&quot;invisible&quot;&gt;1&lt;/attribute&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line"></span><br><span class="line">    &lt;record id=&quot;action_open_sale_onboarding_sample_quotation&quot; model=&quot;ir.actions.act_window&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot;&gt;Send a sample quotation.&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;type&quot;&gt;ir.actions.act_window&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;res_model&quot;&gt;mail.compose.message&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_mode&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_type&quot;&gt;form&lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;view_id&quot; ref=&quot;sale_onboarding_sample_quotation_form&quot; /&gt;</span><br><span class="line">        &lt;field name=&quot;target&quot;&gt;new&lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">&lt;/odoo&gt;</span><br></pre></td></tr></table></figure>

<p>路由文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># Part of Odoo. See LICENSE file for full copyright and licensing details.</span><br><span class="line"></span><br><span class="line">from odoo import http</span><br><span class="line">from odoo.http import request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OnboardingController(http.Controller):</span><br><span class="line"></span><br><span class="line">    @http.route(&apos;/sales/sale_quotation_onboarding_panel&apos;, auth=&apos;user&apos;, type=&apos;json&apos;)</span><br><span class="line">    def sale_quotation_onboarding(self):</span><br><span class="line">        &quot;&quot;&quot; Returns the `banner` for the sale onboarding panel.</span><br><span class="line">            It can be empty if the user has closed it or if he doesn&apos;t have</span><br><span class="line">            the permission to see it. &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        company = request.env.user.company_id</span><br><span class="line">        if not request.env.user._is_admin() or \</span><br><span class="line">           company.sale_quotation_onboarding_state == &apos;closed&apos;:</span><br><span class="line">            return &#123;&#125;</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            &apos;html&apos;: request.env.ref(&apos;sale.sale_quotation_onboarding_panel&apos;).render(&#123;</span><br><span class="line">                &apos;company&apos;: company,</span><br><span class="line">                &apos;state&apos;: company.get_and_update_sale_quotation_onboarding_state()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>指定模型视图，添加<code>banner_route</code>属性，属性值为路由。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;record id=&quot;view_quotation_tree_with_onboarding&quot; model=&quot;ir.ui.view&quot;&gt;</span><br><span class="line">    &lt;field name=&quot;name&quot;&gt;sale.order.tree&lt;/field&gt;</span><br><span class="line">    &lt;field name=&quot;model&quot;&gt;sale.order&lt;/field&gt;</span><br><span class="line">    &lt;field name=&quot;inherit_id&quot; ref=&quot;view_quotation_tree&quot;/&gt;</span><br><span class="line">    &lt;field name=&quot;mode&quot;&gt;primary&lt;/field&gt;</span><br><span class="line">    &lt;field name=&quot;arch&quot; type=&quot;xml&quot;&gt;</span><br><span class="line">        &lt;xpath expr=&quot;//tree&quot; position=&quot;attributes&quot;&gt;</span><br><span class="line">            &lt;attribute name=&quot;banner_route&quot;&gt;/sales/sale_quotation_onboarding_panel&lt;/attribute&gt;</span><br><span class="line">        &lt;/xpath&gt;</span><br><span class="line">    &lt;/field&gt;</span><br><span class="line">&lt;/record&gt;</span><br></pre></td></tr></table></figure>
<p>以上， 为自定义配置面板大致过程。</p>
<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
</search>
