<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-- 描述符的使用</title>
    <url>/2019/12/20/python_8/</url>
    <content><![CDATA[<p>一、描述符是什么<br>　　描述符本质就是一个新式类,在这个新式类中,至少实现了<code>__get__()</code>,<code>__set__()</code>,<code>__delete__()</code>中的一个,这也被称为描述符协议<br>　　<code>__get__()</code>:调用一个属性时,触发<br>　　<code>__set__()</code>:为一个属性赋值时,触发<br>　　<code>__delete__()</code>:采用del删除属性时,触发  </p><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span> <span class="comment">#在python3中Foo是新式类,它实现了三种方法,这个类就被称作一个描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'__get__(),被执行了'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'__set__(),被执行了'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'__delete__(),被执行了'</span>)</span><br></pre></td></tr></table></figure>

<p>二、描述符的作用<br>　　描述符的作用是用来代理另外一个类的属性的(必须把描述符定义成这个类的类属性，不能定义到构造函数中)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    x = Foo()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">t = Test(<span class="number">2</span>)      <span class="comment">#'__set__(),被执行了'</span></span><br><span class="line">print(t.x)         <span class="comment">#'__get__(),被执行了'   'None'</span></span><br></pre></td></tr></table></figure>

<p>三、描述符分为两种<br>　　1、数据描述符：至少实现了<code>__get__()</code>和<code>__set__()</code><br>　　2、非数据描述符：没有实现<code>__set__()</code>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#非数据描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br></pre></td></tr></table></figure>

<p>四、注意事项:<br>　　描述符本身应该定义成新式类,被代理的类也应该是新式类<br>　　必须把描述符定义成这个类的类属性，不能为定义到构造函数中<br>　　要严格遵循该优先级,优先级由高到底分别是<br>　　　　1类属性<br>　　　　2数据描述符<br>　　　　3实例属性<br>　　　　4非数据描述符<br>　　　　5找不到的属性触发<code>__getattr__()</code><br>五、描述符的应用<br>　　1、现在有一个需求，定义一个用户信息，用户的名字为字符串类型，年龄为int类型，收入为float类型，可以用描述符来代理这些属性，从而控制传入的数据类型。  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DescType</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'\n执行了__get__'</span>)</span><br><span class="line">        print(<span class="string">'self是 %s'</span> % self)  <span class="comment"># self表示的是描述符实例的对象DescType()---&gt;name</span></span><br><span class="line">        print(<span class="string">'instance是 %s'</span> % instance)  <span class="comment"># instance表示的是被代理的类属性的类实例化出的对象，这里是p1</span></span><br><span class="line">        print(<span class="string">'owner是 %s'</span> % owner)  <span class="comment"># owner表示的是被代理的类，这里是People这个类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'\n执行了__set__'</span>)</span><br><span class="line">        print(<span class="string">'self是 %s'</span> % self)  <span class="comment"># self表示的是描述符实例的对象DescType()---&gt;name</span></span><br><span class="line">        print(<span class="string">'instance是 %s'</span> % instance)  <span class="comment"># instance表示的是被代理的类属性的类实例化出的对象，这里是p1</span></span><br><span class="line">        print(<span class="string">'value是 %s'</span> % value)  <span class="comment"># value表示的是被代理的类的属性的值，这里是'Loney'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'\n执行了__delete__'</span>)</span><br><span class="line">        print(<span class="string">'instance是 %s'</span> % instance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个人的类（被代理的类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = DescType()   <span class="comment"># 用描述符代理了name这个属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = People(<span class="string">'Loney'</span>, <span class="number">24</span>, <span class="number">11.1</span>)</span><br><span class="line">print(p1.name)  <span class="comment"># 会出发__get__</span></span><br><span class="line">print(p1.__dict__)  <span class="comment"># &#123;'age': 24, 'salary': 11.1&#125;</span></span><br></pre></td></tr></table></figure>

<p>发现被代理的name属性并没有被设置对应的值，所以<code>__dict__</code>中没有’name’，那是因为实例化的时候执行了<code>__init__</code>，所以也执行了<code>__set__</code>， 但是在<code>__set__</code>中并没有真正的操作进行设置。  </p>
<p>　　2、所以要想真正的对属性进行代理，对属性进行设置、获取和删除值，则需要通过操作底层<code>__dict__</code>字典，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DescType</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value_type)</span>:</span>  <span class="comment"># 传入key用来操作底层属性字典,value_type用来表示期望的数据类型</span></span><br><span class="line">        print(<span class="string">'描述符初始化... key:'</span>, key, <span class="string">' value_type:'</span>, value_type)</span><br><span class="line">        self.key = key</span><br><span class="line">        self.value_type = value_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'执行了__get__'</span>)</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.key]  <span class="comment"># return p2.name</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'\n执行了__set__'</span>)</span><br><span class="line">        print(<span class="string">'self是 %s'</span> % self)  <span class="comment"># self表示的是描述符实例的对象DescType()</span></span><br><span class="line">        print(<span class="string">'instance是 %s'</span> % instance)  <span class="comment"># instance表示的是被代理的类属性的类实例化出的对象，这里是p2</span></span><br><span class="line">        print(<span class="string">'value是 %s'</span> % value)  <span class="comment"># value表示的是被代理的类的属性的值</span></span><br><span class="line">        print(<span class="string">'value_type %s'</span> % self.value_type)  <span class="comment"># value表示的是被代理的类的属性的值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.value_type):  <span class="comment"># 用来判断用户传入的是否符合要求</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'%s 传入的不是 %s'</span> % (self.key, self.value_type))  <span class="comment"># 抛出类型异常，提示用户程序终止</span></span><br><span class="line">        instance.__dict__[self.key] = value  <span class="comment"># 符合要求，则设置属性对应的值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'执行了__delete__'</span>)</span><br><span class="line">        instance.__dict__.pop(self.key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个人的类（被代理的类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = DescType(<span class="string">'name'</span>, str)  <span class="comment"># 用描述符代理了name这个属性，相当于执行了Desc_type中的self.__set__</span></span><br><span class="line">    age = DescType(<span class="string">'age'</span>, int)</span><br><span class="line">    salary = DescType(<span class="string">'salary'</span>, float)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p2 = People(<span class="string">'Loney'</span>, <span class="number">24</span>, <span class="number">20.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问</span></span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure>

<p>六、总结<br>　　1、描述符就是一个类（新式类）；<br>　　2、描述符分为数据描述和非数据描述符，区别在于前者有<code>__set__</code>方法，后者没有；<br>　　3、描述符的使用要遵循优先级：类属性&gt;数据描述符&gt;实例属性&gt;非数据描述符&gt;找不到(<code>__getattr__</code>)；<br>　　4、描述符方法中的self表示的是描述符实例化的对象，instance表示的是被描述(代理)的类实例化的对象，owner表示的是被描述（代理）的类，value表示的是设置到被描述（代理）属性的值。  </p>
<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- property用法(实现了get，set，delete三种方法)</title>
    <url>/2019/12/20/python_7/</url>
    <content><![CDATA[<p>一、可以利用property对静态属性的进行修改操作，包括设置和删除属性<br>　　1、调用静态属性===&gt;在静态属性函数前先用@property；<br>　　2、设置静态属性===&gt;在静态属性函数前加上@静态属性函数名.setter，同时静态属性函数要加上value参数；<br>　　3、删除静态属性===&gt;在静态属性函数前加上@静态属性函数名.deleter。  </p><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'获取(get)属性时执行==='</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @A.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        print(<span class="string">'设置(set)属性时执行==='</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @A.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'删除(del)属性时执行==='</span>)</span><br><span class="line">f1 = Foo()</span><br><span class="line">f1.A                    <span class="comment">#'获取(get)属性时执行==='</span></span><br><span class="line">f1.A = <span class="string">'1'</span>              <span class="comment">#'设置(set)属性时执行==='</span></span><br><span class="line"><span class="keyword">del</span> f1.A                <span class="comment">#'删除(del)属性时执行==='</span></span><br></pre></td></tr></table></figure>

<p>二、上述操作还可以用如下方式实现<br>　　注意：静态属性 = property(get_静态属性,set_静态属性,del_静态属性)，property中的参数位置一定要按照get set del的顺序。  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_A</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'获取(get)属性时执行==='</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_A</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        print(<span class="string">'设置(set)属性时执行==='</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_A</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'删除(del)属性时执行==='</span>)</span><br><span class="line">    A = property(get_A,set_A,de_A)</span><br><span class="line"></span><br><span class="line">f2 = Foo()</span><br><span class="line">f2.A                    <span class="comment">#'获取(get)属性时执行==='</span></span><br><span class="line">f2.A = <span class="string">'2'</span>              <span class="comment">#'设置(set)属性时执行==='</span></span><br><span class="line"><span class="keyword">del</span> f2.A                <span class="comment">#'删除(del)属性时执行==='</span></span><br></pre></td></tr></table></figure>

<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 浅谈@ormcache装饰器的使用</title>
    <url>/2019/12/18/odoo13_12/</url>
    <content><![CDATA[<p>有时候，有些业务场景需要返回一些特定的数据。在调用后端接口时，比较频繁。不断的和数据库进行交互。<br>此时，我们就可以使用<code>@ormcache</code>装饰器装饰该接口。将相同条件的数据，存储在缓存中，下次相同的查询条件就可以直接从缓存中拿。</p><p>举栗子：  </p><p>现在，我有一张表<code>params</code>。用来存放系统的各个模块的参数以及参数值。</p><a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Params</span><span class="params">(models.AbstractModel)</span>:</span></span><br><span class="line">    _name = <span class="string">'params'</span></span><br><span class="line">    _description = <span class="string">'Params'</span>  <span class="comment"># 系统参数表</span></span><br><span class="line"></span><br><span class="line">    module_id = fields.Many2one(<span class="string">'ir.module.module'</span>, string=<span class="string">'Module'</span>)  <span class="comment"># 模块</span></span><br><span class="line">    org_id = fields.Many2one(<span class="string">'ir.orgs'</span>, string=<span class="string">'Org'</span>)  <span class="comment"># 组织</span></span><br><span class="line">    key = fields.Char(string=<span class="string">"Params Key"</span>)  <span class="comment"># 参数键</span></span><br><span class="line">    value = fields.Char(string=<span class="string">"Params Value"</span>)  <span class="comment"># 参数值</span></span><br></pre></td></tr></table></figure>

<p>下面我们定义一个获取参数的方法<code>get_params</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key_list: 参数的键 列表。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    domain = [(<span class="string">'module_id'</span>, <span class="string">'='</span>, module_id)] </span><br><span class="line">    <span class="keyword">if</span> key_list <span class="keyword">and</span> isinstance(key_list, list):</span><br><span class="line">        domain.append((<span class="string">'key'</span>, <span class="string">'in'</span>, key_list))</span><br><span class="line">    records = self.search(domain)</span><br><span class="line">    <span class="keyword">return</span> records</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key: 参数的键。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = self._get_params(module_id, key_list)</span><br><span class="line">    <span class="keyword">return</span> records.read()</span><br></pre></td></tr></table></figure>

<p>我们正常查询参数，可以通过直接调用get_params方法获取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br><span class="line">name_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'name'</span>, ])  <span class="comment"># 查询模块id=1并且key='name'的参数</span></span><br><span class="line">age_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'age'</span>, ])  <span class="comment"># 查询模块id=1并且key='age'的参数</span></span><br></pre></td></tr></table></figure>

<p>此时，我们可以正常的查询出结果。但是如果查询条件变成这样呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次调用</span></span><br><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br><span class="line"><span class="comment"># 第二次调用</span></span><br><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br><span class="line"><span class="comment"># 第三次调用</span></span><br><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br></pre></td></tr></table></figure>

<p>我们发现，相同条件，一直和数据库进行交互操作，明显的占用资源。此时，我们的<code>ormcache</code>就可以派上用场了，更改查询方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ormcache()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key: 参数的键。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = self._get_params(module_id, key_list)</span><br><span class="line">    <span class="keyword">return</span> records.read()</span><br></pre></td></tr></table></figure>

<p>再执行上述的操作， 打断点发现，我们的<code>get_params</code>方法中代码只执行了一次。这就降低了与数据库交互的频率。</p>
<p>但是我们发现，再执行<code>name_records = self.env[&#39;params&#39;].get_params(module_id=1, key=[&#39;name&#39;, ])  # 查询模块id=1并且key=&#39;name&#39;的参数</code>的时候，还是和上面的结果一样。原因是我们没有指定参数。</p>
<p>我们下面指定参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ormcache('module_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key: 参数的键。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = self._get_params(module_id, key_list)</span><br><span class="line">    <span class="keyword">return</span> records.read()</span><br></pre></td></tr></table></figure>

<p>再次执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br><span class="line">name_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'name'</span>, ])  <span class="comment"># 查询模块id=1并且key='name'的参数</span></span><br><span class="line">age_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'age'</span>, ])  <span class="comment"># 查询模块id=1并且key='age'的参数</span></span><br></pre></td></tr></table></figure>

<p>我们发现，虽然执行了两次，但是 <code>name_records</code> 和<code>age_records</code>是一样的。 <strong>原因是我们在装饰器中指定的参数，作为缓存中存储的条件并没有发生变化</strong></p>
<p>所以，我们再加一个参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ormcache('module_id', 'key_list')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key: 参数的键。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = self._get_params(module_id, key_list)</span><br><span class="line">    <span class="keyword">return</span> records.read()</span><br></pre></td></tr></table></figure>

<p>运行发现，报错了。<strong>原因是作为缓存的键不能是可变对象，和字典的键一样。</strong><br>因此，我们做出改变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ormcache('module_id', 'str(key_list)')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">(self, module_id=False, key_list=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :desc: 获取参数</span></span><br><span class="line"><span class="string">    :param module_id: 模块ID。</span></span><br><span class="line"><span class="string">    :param key: 参数的键。</span></span><br><span class="line"><span class="string">    :return: 返回参数集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = self._get_params(module_id, key_list)</span><br><span class="line">    <span class="keyword">return</span> records.read()</span><br></pre></td></tr></table></figure>

<p>我们再执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>)  <span class="comment"># 查询模块id=1的参数</span></span><br><span class="line">name_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'name'</span>, ])  <span class="comment"># 查询模块id=1并且key='name'的参数</span></span><br><span class="line">age_records = self.env[<span class="string">'params'</span>].get_params(module_id=<span class="number">1</span>, key=[<span class="string">'age'</span>, ])  <span class="comment"># 查询模块id=1并且key='age'的参数</span></span><br></pre></td></tr></table></figure>

<p>打断点发现，方法又被调用3次。但是接下来的查询，如果有相同条件的就不会再执行了。</p>
<p><strong>但是，问题又来了，我参数表 修改参数、新增参数、删除参数。我们再次使用相同条件查询时候，发现我们获得的数据根本就不是我们想要的。出现了数据脏读。</strong>  </p>
<p>原因是什么呢？<br><strong>我们在对表进行修改、增加、删除操作时候，没有清除缓存导致的。</strong></p>
<p>所以，我们再次做出更改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, vals)</span>:</span></span><br><span class="line">    self.clear_caches()</span><br><span class="line">    <span class="keyword">return</span> super(Params, self).create(vals)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, vals)</span>:</span></span><br><span class="line">    self.clear_caches()</span><br><span class="line">    <span class="keyword">return</span> super(Params, self).write(vals)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unlink</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.clear_caches()</span><br><span class="line">    <span class="keyword">return</span> super(Params, self).unlink()</span><br></pre></td></tr></table></figure>

<p>至此，就已经能够正常使用了。</p>
<p>下面，带大家浏览一下源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ormcache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" LRU cache decorator for model methods.</span></span><br><span class="line"><span class="string">    The parameters are strings that represent expressions referring to the</span></span><br><span class="line"><span class="string">    signature of the decorated method, and are used to compute a cache key::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @ormcache('model_name', 'mode')</span></span><br><span class="line"><span class="string">        def _compute_domain(self, model_name, mode="read"):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For the sake of backward compatibility, the decorator supports the named</span></span><br><span class="line"><span class="string">    parameter `skiparg`::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @ormcache(skiparg=1)</span></span><br><span class="line"><span class="string">        def _compute_domain(self, model_name, mode="read"):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Methods implementing this decorator should never return a Recordset,</span></span><br><span class="line"><span class="string">    because the underlying cursor will eventually be closed and raise a</span></span><br><span class="line"><span class="string">    `psycopg2.OperationalError`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.skiparg = kwargs.get(<span class="string">'skiparg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, method)</span>:</span></span><br><span class="line">        self.method = method</span><br><span class="line">        self.determine_key()</span><br><span class="line">        lookup = decorator(self.lookup, method)</span><br><span class="line">        lookup.clear_cache = self.clear</span><br><span class="line">        <span class="keyword">return</span> lookup</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Determine the function that computes a cache key from arguments. """</span></span><br><span class="line">        <span class="keyword">if</span> self.skiparg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># build a string that represents function code and evaluate it</span></span><br><span class="line">            args = formatargspec(*getargspec(self.method))[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> self.args:</span><br><span class="line">                code = <span class="string">"lambda %s: (%s,)"</span> % (args, <span class="string">", "</span>.join(self.args))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = <span class="string">"lambda %s: ()"</span> % (args,)</span><br><span class="line">            self.key = unsafe_eval(code)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># backward-compatible function that uses self.skiparg</span></span><br><span class="line">            self.key = <span class="keyword">lambda</span> *args, **kwargs: args[self.skiparg:]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lru</span><span class="params">(self, model)</span>:</span></span><br><span class="line">        counter = STAT[(model.pool.db_name, model._name, self.method)]</span><br><span class="line">        <span class="keyword">return</span> model.pool.cache, (model._name, self.method), counter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self, method, *args, **kwargs)</span>:</span></span><br><span class="line">        d, key0, counter = self.lru(args[<span class="number">0</span>])</span><br><span class="line">        key = key0 + self.key(*args, **kwargs)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = d[key]</span><br><span class="line">            counter.hit += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            counter.miss += <span class="number">1</span></span><br><span class="line">            value = d[key] = self.method(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            _logger.warn(<span class="string">"cache lookup error on %r"</span>, key, exc_info=<span class="literal">True</span>)</span><br><span class="line">            counter.err += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.method(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self, model, *args)</span>:</span></span><br><span class="line">        <span class="string">""" Clear the registry cache """</span></span><br><span class="line">        model.pool._clear_cache()</span><br></pre></td></tr></table></figure>

<p>通过阅读源码以及相关注释， 我们了解到 <code>@ormcache</code> 的内部是通过 LRU (最近最少使用) 缓存机制实现的。<br>不知道的同学，自己去百度一下。不过有一个<strong>注意事项：</strong></p>
<p><strong>就是对于返回记录集的方法，使用改装饰器是无效的。原因是不可序列化。</strong></p>
<p>以上。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 关系型字段指定视图</title>
    <url>/2019/12/17/odoo13_11/</url>
    <content><![CDATA[<p>只需要在context中指定即可, 话不多说，请看代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"packaging_ids"</span> <span class="attr">nolabel</span>=<span class="string">"1"</span> <span class="attr">context</span>=<span class="string">"&#123;'tree_view_ref':'product.product_packaging_tree_view2','form_view_ref':'product.product_packaging_form_view2'&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"project_id"</span> <span class="attr">required</span>=<span class="string">"1"</span> <span class="attr">context</span>=<span class="string">"&#123;'form_view_ref': 'project.project_project_view_form_simplified',&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- O2M字段中下拉列表去重实现（非公用方法）</title>
    <url>/2019/12/16/odoo13_10/</url>
    <content><![CDATA[<p>在实际开发中，我们又是会遇到一些需求，以销售订单为例：<br>在销售订单明细中， 我们添加一行明细：产品为苹果。再添加一行明细时候，产品的下来选项就不能含有苹果的产品。<br>如下图：  </p><p><img alt="去重" data-src="https://pic3.superbed.cn/item/5df747c976085c3289db7636.gif"></p><p>关键代码：</p><p>tools.py:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_record_vals</span><span class="params">(self, model, domain)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @author: LoneyCao 2019/12/14 9:30</span></span><br><span class="line"><span class="string">    @desc: 获取记录的字典。注意：只针对单条记录。</span></span><br><span class="line"><span class="string">    @params self: 实列</span></span><br><span class="line"><span class="string">    @params model: 模型名</span></span><br><span class="line"><span class="string">    @params domain: domain表达式</span></span><br><span class="line"><span class="string">    @return: 返回一个dict，包含记录的各字段值。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    vals_list = self.env[model].search_read(domain)</span><br><span class="line">    <span class="keyword">if</span> vals_list:</span><br><span class="line">        vals = reduce(<span class="keyword">lambda</span> x, y: dict(**x, **y), vals_list)</span><br><span class="line">        <span class="keyword">return</span> vals</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_o2m_field_page_cach_val</span><span class="params">(self, o2m_model, o2m_val, field_list=None, field_map=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @author: LoneyCao 2019/12/14 9:30</span></span><br><span class="line"><span class="string">    @desc: 编辑状态下，获取Form视图上O2M字段的当前记录</span></span><br><span class="line"><span class="string">    @params self: 实列</span></span><br><span class="line"><span class="string">    @params o2m_model: O2M字段关联的模型名</span></span><br><span class="line"><span class="string">    @params o2m_val: 当前编辑状态下，O2M字段的所有记录。如：[(0,0,&#123;&#125;),(1,30,&#123;&#125;),(2,31,False),(4,0,False)]</span></span><br><span class="line"><span class="string">    @params field_list: 字段列表，如果指定，则返回一个字段所有值的字典。如下所示：</span></span><br><span class="line"><span class="string">            field_list=[name, age]</span></span><br><span class="line"><span class="string">            return &#123;'name': ['Alex', 'Tom', 'Jerry'], 'age': [20,30,30]&#125;</span></span><br><span class="line"><span class="string">            注意：与参数field_map不可共存。</span></span><br><span class="line"><span class="string">    @params field_map: 字段映射，如果指定，则返回一个字段与字段的映射关系。如下所示：</span></span><br><span class="line"><span class="string">            field_map=[age, name]</span></span><br><span class="line"><span class="string">            return &#123;'20': ['Alex'], '30': ['Tom', 'Jerry']&#125;</span></span><br><span class="line"><span class="string">            注意：与参数field_list不可共存。</span></span><br><span class="line"><span class="string">    @return: 返回一个list，包含当前的记录</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    records = []  <span class="comment"># 当前编辑状态下的记录</span></span><br><span class="line">    <span class="keyword">for</span> rec <span class="keyword">in</span> o2m_val:</span><br><span class="line">        vals = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> rec[<span class="number">0</span>] == <span class="number">0</span>:  <span class="comment"># 新增</span></span><br><span class="line">            vals = rec[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">elif</span> rec[<span class="number">0</span>] == <span class="number">1</span>:  <span class="comment"># 修改</span></span><br><span class="line">            vals = get_record_vals(self, o2m_model, [(<span class="string">'id'</span>, <span class="string">'='</span>, rec[<span class="number">1</span>])])  <span class="comment"># 先获取原来记录</span></span><br><span class="line">            vals.update(rec[<span class="number">2</span>]) <span class="keyword">if</span> vals <span class="keyword">else</span> <span class="literal">False</span>  <span class="comment"># 再更新</span></span><br><span class="line">        <span class="keyword">elif</span> rec[<span class="number">0</span>] == <span class="number">4</span>:  <span class="comment"># 不变</span></span><br><span class="line">            vals = get_record_vals(self, o2m_model, [(<span class="string">'id'</span>, <span class="string">'='</span>, rec[<span class="number">1</span>])])  <span class="comment"># 获取原来记录</span></span><br><span class="line">        <span class="keyword">if</span> vals:</span><br><span class="line">            records.append(vals)</span><br><span class="line"></span><br><span class="line">    field_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> field_list:</span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> field_list:</span><br><span class="line">            v_list = []</span><br><span class="line">            <span class="keyword">for</span> rec <span class="keyword">in</span> records:</span><br><span class="line">                v = rec.get(field)</span><br><span class="line">                <span class="keyword">if</span> isinstance(v, tuple):  <span class="comment"># m2o类型字段</span></span><br><span class="line">                    v = v[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> v:</span><br><span class="line">                    v_list.append(v)</span><br><span class="line">            field_dict[field] = v_list</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> field_dict</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> field_map:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> records:</span><br><span class="line">            k = rec.get(field_map[<span class="number">0</span>])</span><br><span class="line">            v = rec.get(field_map[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> isinstance(k, tuple):  <span class="comment"># m2o类型字段</span></span><br><span class="line">                k = k[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> isinstance(v, tuple):</span><br><span class="line">                v = v[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">and</span> v:</span><br><span class="line">                <span class="keyword">if</span> k <span class="keyword">in</span> field_dict:</span><br><span class="line">                    field_dict[k].append(v)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    field_dict[k] = [v]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> field_dict</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> records</span><br></pre></td></tr></table></figure><a id="more"></a>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductProduct</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    _inherit = <span class="string">'product.product'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @api.model</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_name_search</span><span class="params">(self, name=<span class="string">''</span>, args=None, operator=<span class="string">'ilike'</span>, limit=<span class="number">100</span>)</span>:</span></span><br><span class="line">        order_line = self._context.get(<span class="string">'order_line'</span>)</span><br><span class="line">        <span class="keyword">if</span> order_line:</span><br><span class="line">            ids = get_o2m_field_page_cach_val(self, <span class="string">'sale.order.line'</span>, order_line, [<span class="string">'product_id'</span>]).get(<span class="string">'product_id'</span>, [])</span><br><span class="line">            args = expression.AND([args, [(<span class="string">'id'</span>, <span class="string">'not in'</span>, ids)]])  <span class="comment"># 去重</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(ProductProduct, self)._name_search(name=name, args=args, operator=operator, limit=limit)</span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_id"</span> <span class="attr">context</span>=<span class="string">"&#123;'order_line':parent.order_line &#125;"</span>  /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这部分代码，根据实际需求编写。</p>
<h4 id="说一说原理"><a href="#说一说原理" class="headerlink" title="说一说原理"></a>说一说原理</h4><p>对于关系型字段，在下拉框选择时候，会调用对应模型的<code>name_search</code>方法，通过此方法，返回数据。  </p>
<p>所以，我们只要在这里进行过滤即可。</p>
<h5 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h5><p>在表头定义一个隐藏的计算字段，用于记录子表的所有产品的值，组成一个domain。<br>在下拉框选择时候，在<code>name_search</code>方法中处理。</p>
<h5 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h5><p>直接把条件传入<code>&#39;name_search</code>方法。在方法中处理。</p>
<p>其他的动态domain过滤：<br><strong>onchange使用动态过滤时，在保存后，再编辑，就会失效。</strong></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>这么巧，原来你也是同彳……</title>
    <url>/2019/12/12/farmercodethings_6/</url>
    <content><![CDATA[<p><img alt data-src="https://pic1.superbed.cn/item/5df25a001f8f59f4d6dec880.jpg"></p><p><img alt data-src="https://pic3.superbed.cn/item/5df25a1c1f8f59f4d6dedd55.jpg"></p><p><img alt data-src="https://pic2.superbed.cn/item/5df25a3f1f8f59f4d6defbc1.jpg"></p><p>-END-</p>]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 以onchange()为例，深入源码，一探究竟</title>
    <url>/2019/12/08/odoo13_8/</url>
    <content><![CDATA[<h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><p>有些看官，对之前的文章 <a href="/2019/12/04/odoo13_6/">《Onchange方法的使用扩展》</a>还不是很明白。那么为此，特地抽空花时间整理了一下。带各位看官一起深入底层，一探究竟。</p><p>写本文之前，又怕各位看官的Python功底不深，又先写了几篇文章。以下传送门：</p><ul>
<li>1.<a href="/2019/12/06/python_2/">《Python 秘史之 “装饰器”》</a></li>
<li>2.<a href="/2019/12/07/python_3/">《Python Inspect 模块简介》</a></li>
<li>3.<a href="/2019/12/07/python_4/">《Python collections 模块简介》</a></li>
</ul><a id="more"></a>


<p>为了各位看官能够理解，花了不少时间。</p>
<p>内容较多，下面正式开始</p>
<hr>
<h2 id="onchange-加载过程"><a href="#onchange-加载过程" class="headerlink" title="onchange()加载过程"></a>onchange()加载过程</h2><p>首先，我们先抛出来几个问题：<br><strong>1. 我们写的@api.onchange()方法，为什么就能被执行？</strong><br><strong>2. @api.onchange()参数中指定了字段A，为什么字段A改变时候就会被触发？</strong><br><strong>3. 不用@api.onchange()方法，自己写一个myonchange()行不行？</strong><br>接下来，我们就带着问题，一起来寻找答案。</p>
<h3 id="onchange的定义"><a href="#onchange的定义" class="headerlink" title="onchange的定义"></a>onchange的定义</h3><p>首先，我们先看一下，我们正常情况下是如何定义一个onchange的触发器的。这里以销售订单为例：<br><code>sale.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.onchange('user_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange_user_id</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.user_id <span class="keyword">and</span> self.user_id.sale_team_id:</span><br><span class="line">        self.team_id = self.user_id.sale_team_id</span><br></pre></td></tr></table></figure>

<p>这里当销售员改变时候，销售团队随着销售员做出相应的改变。<br>也就是在后台的模型类定义中，定义一个函数并且以装饰器<code>api.onchange</code>进行装饰且传入<code>触发的字段</code>作为参数。<br>此时，我们查看<code>api.onchange</code>是什么？（在之前文章已经带大家看过）<br>打开<code>api.py</code><br>onchange定义在157行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    此处注释省略.......</span></span><br><span class="line"><span class="string">    返回一个装饰器装饰的方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> attrsetter(<span class="string">'_onchange'</span>, args)</span><br></pre></td></tr></table></figure>

<p>我们看到，<code>api.onchange</code>就是一个方法，作用是返回了一个<code>attrsetter</code>函数并传入了相关参数并执行。<br>再继续看一下<code>attrsetter</code>这个函数的定义。110行：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attrsetter</span><span class="params">(attr, value)</span>:</span></span><br><span class="line">    <span class="string">""" Return a function that sets ``attr`` on its argument and returns it. """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> method: setattr(method, attr, value) <span class="keyword">or</span> method</span><br></pre></td></tr></table></figure>

<p>不难发现，作用是返回了一个函数，并给函数设置了相关属性以及值。<br>结合<code>onchange</code>的定义可以看出，<code>api.onchange</code>就是给函数设置了一个<code>_onchange</code>的属性并且值为<code>传入的参数</code><br>（如果不理解装饰器的同学，请先看完开头给大家提供的文章。我是特意写的。）<br>我就把<code>api.onchange</code>换一个写法，把它还原：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attrsetter</span><span class="params">(attr, value)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapfunc</span><span class="params">(method)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> setattr(method, attr, value) <span class="keyword">or</span> method</span><br><span class="line">        <span class="keyword">return</span> wrapfunc</span><br><span class="line">    <span class="keyword">return</span> attrsetter(attr=<span class="string">'_onchange'</span>, value=args)</span><br></pre></td></tr></table></figure>

<p>这就是<code>api.onchange</code>的真实面目。很简单了吧？那么，有看官就问了：我知道是这样写的，可是我写上了这个装饰器，它是怎么被调用的，这个方法是怎么被执行的？不急，我们慢慢来。</p>
<h3 id="onchange的调用过程"><a href="#onchange的调用过程" class="headerlink" title="onchange的调用过程"></a>onchange的调用过程</h3><p>其实，在onchange方法，都是通过前端页面触发的。我们在给字段定义<code>onchange</code>时候，前端页面改变时候，会执行一个rpc方法。这部分代码在js中。我就粗略带大家看一眼在何处定义的。（不明白rpc的，自行百度）<br>路径<code>odoo/addons/web/static/src/js/views/basic/basic_model.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_performOnChange: <span class="function"><span class="keyword">function</span> (<span class="params">record, fields, viewType</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._rpc(&#123;</span><br><span class="line">                model: record.model,</span><br><span class="line">                method: <span class="string">'onchange'</span>,</span><br><span class="line">                args: [idList, currentData, fields, onchangeSpec],</span><br><span class="line">                context: context,</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>方法<code>_performOnChange</code>中会调用执行后台的<code>onchange</code>方法。而<code>_performOnChange</code>方法被<code>_applyChange</code>方法和<code>_makeDefaultRecord</code>方法（即后台对应的<code>default_get</code>方法）调用。js代码就不带大家看了，不是本篇重点。<code>_applyChange</code>方法在1423行，<code>_makeDefaultRecord</code>方法在3903行。  </p>
<p>以上就是说，所有模型字段的<code>onchange触发器</code>都是调用了一个方法<code>onchange</code>，那么是如何区分每个模型，以及模型的字段呢？模型里可以有很多个<code>api.onchange</code>装饰的方法。<br>接下来，转到后台<code>onchange</code>定义。<br>路径<code>odoo/odoo/models.py</code>， 5744行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(self, values, field_name, field_onchange)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    todo = list(names <span class="keyword">or</span> nametree)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># process names in order</span></span><br><span class="line">    <span class="keyword">while</span> todo:</span><br><span class="line">        <span class="comment"># apply field-specific onchange methods</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> todo:</span><br><span class="line">            <span class="keyword">if</span> field_onchange.get(name):</span><br><span class="line">                record._onchange_eval(name, field_onchange[name], result)</span><br><span class="line">            done.add(name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># determine which fields to process for the next pass</span></span><br><span class="line">        todo = [</span><br><span class="line">            name</span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> nametree</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> done <span class="keyword">and</span> snapshot0.has_changed(name)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> env.context.get(<span class="string">'recursive_onchanges'</span>, <span class="literal">True</span>):</span><br><span class="line">            todo = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make the snapshot with the final values of record</span></span><br><span class="line">    snapshot1 = Snapshot(record, nametree)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># determine values that have changed by comparing snapshots</span></span><br><span class="line">    self.invalidate_cache()</span><br><span class="line">    result[<span class="string">'value'</span>] = snapshot1.diff(snapshot0)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># format warnings</span></span><br><span class="line">    warnings = result.pop(<span class="string">'warnings'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(warnings) == <span class="number">1</span>:</span><br><span class="line">        title, message, type = warnings.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> type:</span><br><span class="line">            type = <span class="string">'dialog'</span></span><br><span class="line">        result[<span class="string">'warning'</span>] = dict(title=title, message=message, type=type)</span><br><span class="line">    <span class="keyword">elif</span> len(warnings) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># concatenate warning titles and messages</span></span><br><span class="line">        title = _(<span class="string">"Warnings"</span>)</span><br><span class="line">        message = <span class="string">'\n\n'</span>.join([warn_title + <span class="string">'\n\n'</span> + warn_message <span class="keyword">for</span> warn_title, warn_message, warn_type <span class="keyword">in</span> warnings])</span><br><span class="line">        result[<span class="string">'warning'</span>] = dict(title=title, message=message, type=<span class="string">'dialog'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>我们通过注释可以看到，这个确确实实，是所有的onchange事件的入口函数。可是，我们通过装饰器写的onchange函数，到底是怎么执行的？<strong>我们仔细的阅读源码！</strong>（这是一个好习惯）<br>注意，有一段代码，引起我们注意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># process names in order</span></span><br><span class="line"><span class="keyword">while</span> todo:</span><br><span class="line">    <span class="comment"># apply field-specific onchange methods</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> todo:</span><br><span class="line">        <span class="keyword">if</span> field_onchange.get(name):</span><br><span class="line">            record._onchange_eval(name, field_onchange[name], result)</span><br><span class="line">        done.add(name)</span><br></pre></td></tr></table></figure>

<p>猜猜看？循环todo？ 里面的注释， 处理字段的onchange方法？好，我们就看看，这个<code>_onchange_eval</code>这个方法。是做什么的？这个方法就位于<code>onchange</code>的上方。5716行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_eval</span><span class="params">(self, field_name, onchange, result)</span>:</span></span><br><span class="line">    <span class="string">""" Apply onchange method(s) for field ``field_name`` with spec ``onchange``</span></span><br><span class="line"><span class="string">        on record ``self``. Value assignments are applied on ``self``, while</span></span><br><span class="line"><span class="string">        domain and warning messages are put in dictionary ``result``.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    onchange = onchange.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> res.get(<span class="string">'value'</span>):</span><br><span class="line">            res[<span class="string">'value'</span>].pop(<span class="string">'id'</span>, <span class="literal">None</span>)</span><br><span class="line">            self.update(&#123;key: val <span class="keyword">for</span> key, val <span class="keyword">in</span> res[<span class="string">'value'</span>].items() <span class="keyword">if</span> key <span class="keyword">in</span> self._fields&#125;)</span><br><span class="line">        <span class="keyword">if</span> res.get(<span class="string">'domain'</span>):</span><br><span class="line">            result.setdefault(<span class="string">'domain'</span>, &#123;&#125;).update(res[<span class="string">'domain'</span>])</span><br><span class="line">        <span class="keyword">if</span> res.get(<span class="string">'warning'</span>):</span><br><span class="line">            result[<span class="string">'warnings'</span>].add((</span><br><span class="line">                res[<span class="string">'warning'</span>].get(<span class="string">'title'</span>) <span class="keyword">or</span> _(<span class="string">"Warning"</span>),</span><br><span class="line">                res[<span class="string">'warning'</span>].get(<span class="string">'message'</span>) <span class="keyword">or</span> <span class="string">""</span>,</span><br><span class="line">                res[<span class="string">'warning'</span>].get(<span class="string">'type'</span>) <span class="keyword">or</span> <span class="string">""</span>,</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> onchange <span class="keyword">in</span> (<span class="string">"1"</span>, <span class="string">"true"</span>):</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> self._onchange_methods.get(field_name, ()):</span><br><span class="line">            method_res = method(self)</span><br><span class="line">            process(method_res)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>通过注释，可以发现，确实是在处理字段的onchange方法。主要代码就是下面这个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> onchange <span class="keyword">in</span> (<span class="string">"1"</span>, <span class="string">"true"</span>):</span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> self._onchange_methods.get(field_name, ()):</span><br><span class="line">        method_res = method(self)</span><br><span class="line">        process(method_res)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>我们看到，循环<code>self._onchange_methods.get(field_name, ())</code>执行每一个方法。那么我们大胆推测，我们写的onchange方法，一定就存在<code>self._onchange_methods</code>之中（大胆推测、谨慎证明是提高的过程）。我们再继续看<code>self._onchange_methods</code>到底是个什么玩意？通过搜索，我们发现<code>_onchange_methods</code>是个方法，只不过被<code>@property</code>装饰为一个属性了。代码619行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_methods</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Return a dictionary mapping field names to onchange methods. """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_onchange</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> callable(func) <span class="keyword">and</span> hasattr(func, <span class="string">'_onchange'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># collect onchange methods on the model's class</span></span><br><span class="line">    cls = type(self)</span><br><span class="line">    methods = defaultdict(list)</span><br><span class="line">    <span class="keyword">for</span> attr, func <span class="keyword">in</span> getmembers(cls, is_onchange):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> func._onchange:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> cls._fields:</span><br><span class="line">                _logger.warning(<span class="string">"@onchange%r parameters must be field names"</span>, func._onchange)</span><br><span class="line">            methods[name].append(func)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add onchange methods to implement "change_default" on fields</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onchange_default</span><span class="params">(field, self)</span>:</span></span><br><span class="line">        value = field.convert_to_write(self[field.name], self)</span><br><span class="line">        condition = <span class="string">"%s=%s"</span> % (field.name, value)</span><br><span class="line">        defaults = self.env[<span class="string">'ir.default'</span>].get_model_defaults(self._name, condition)</span><br><span class="line">        self.update(defaults)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name, field <span class="keyword">in</span> cls._fields.items():</span><br><span class="line">        <span class="keyword">if</span> field.change_default:</span><br><span class="line">            methods[name].append(functools.partial(onchange_default, field))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># optimization: memoize result on cls, it will not be recomputed</span></span><br><span class="line">    cls._onchange_methods = methods</span><br><span class="line">    <span class="keyword">return</span> methods</span><br></pre></td></tr></table></figure>

<p>通过注释可以了解到这是一个返回<code>字段</code>和<code>onchange方法</code>映射关系的方法。我们看代码中<code>is_onchange</code>这个方法，是不是很熟悉？ 你品！你细细品！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_onchange</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> callable(func) <span class="keyword">and</span> hasattr(func, <span class="string">'_onchange'</span>)</span><br></pre></td></tr></table></figure>

<p>不就是返回了一个可以被调用的并且含有<code>_onchange</code>属性的方法吗？不就是之前我们通过<code>api.onchange</code>装饰器装饰的方法吗？诶诶诶，到这里，我们就对上号了。呦西，搜嘎。原来在这里被用到了。再继续往下看。<br><code>methods = defaultdict(list)</code>， 这是啥啊？看官，忘记我开头给你提供的传送门了么？请传送过去！ 先告诉你，可以先把它当做一个字典来看。继续看。 重点来了哟！嘿嘿嘿嘿！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> attr, func <span class="keyword">in</span> getmembers(cls, is_onchange):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> func._onchange:</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> cls._fields:</span><br><span class="line">            _logger.warning(<span class="string">"@onchange%r parameters must be field names"</span>, func._onchange)</span><br><span class="line">        methods[name].append(func)</span><br></pre></td></tr></table></figure>

<p>报告，我不懂，<code>getmembers(cls, is_onchange)</code>这是个啥玩意？这个，你也到开头找到传送门，自己传过去。先告诉你，此处是获取对象中的所有含有<code>_onchange</code>属性的方法。 哈！ 原来，我们定义的方法，都在这里获取到了。<br>接下来，通过<code>methods[name].append(func)</code>添加到了methods字典中。 继续看。<code>cls._onchange_methods = methods</code>将方法的映射关系存到类属性中，紧接着返回了这些方法。  </p>
<p>至此，我们已经知道了一个大致的逻辑：<br><strong>一、所有的onchange触发器，最开始都是执行了<code>onchange方法</code>，而并非是我们写的方法。</strong><br><strong>二、在<code>onchange</code>方法中，通过执行<code>_onchange_eval</code>函数，再获取到字段对应的<code>api.onchange</code>装饰的方法。再执行。</strong><br>如此，通过一个简单的映射关系，就区分了不同字段对应的触发器函数。  </p>
<p>那么，还有一个疑问：<strong>我通过<code>api.onchange</code>装饰的函数，到底在哪里被加载到了模型对象里呢？</strong><br>不急，我们继续分析。（会涉及到Odoo的一些启动过程，读者可看我之前写过的文章。<a href="https://www.jianshu.com/p/09be624aafd2" target="_blank" rel="noopener">Odoo12: 启动运行的过程概览</a>）<br>我们通过搜索代码发现<code>_onchange_methods</code>在<code>_init_constraints_onchanges</code>方法中被调用了。<br>看到方法名就笑了，初始化constraints和onchanges。不就是我们想要的答案吗？（其实到这里，你也应该发现constraints和onchange是一样的，你就假装不知道，自己研究一遍。）<br><code>_init_constraints_onchanges</code>方法又是被谁调用了呢？答案是<code>_setup_complete</code>。而<code>_setup_complete</code>是在<code>odoo/odoo/modules/registry.py</code>中调用的。289行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    model._setup_complete()</span><br></pre></td></tr></table></figure>

<p>接下来，就不带大家去分析了，已经涉及到Odoo的加载机制了。之前写的加载过程是个大概，看官们要是有兴趣自己去研究研究。<br>至此，我们就完成了整个过程的探索。<br><strong>1、api.onchange装饰器是做了什么？</strong><br><strong>2、为什么会执行onchange方法？</strong><br><strong>3、api.onchange装饰器装饰的方法在哪里执行的？</strong><br><strong>4、api.onchange装饰器装饰的方法为什么会被加载？</strong><br>这其中涉及到了很多知识，前端js（不是本篇重点）、Python的装饰器、内置模块、Odoo加载机制等等。希望大家能够仔细研读源代码，我们所有的问题，想要的答案，都在源码中。  </p>
<h3 id="自己的onchange装饰器"><a href="#自己的onchange装饰器" class="headerlink" title="自己的onchange装饰器"></a>自己的onchange装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myonchange</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attrsetter</span><span class="params">(method, attr=<span class="string">'_onchange'</span>, args=args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> setattr(method, attr, args) <span class="keyword">or</span> method</span><br><span class="line">    <span class="keyword">return</span> attrsetter</span><br></pre></td></tr></table></figure>

<p>原理整明白了，就可以随处使用了。这是今天的分享！</p>
<p>以上。<br>– end –</p>
<p>看官，别忘了打赏哟！感谢阅读，不当之处，评论指正！  </p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 窗口动作与服务器动作混合使用</title>
    <url>/2019/12/08/odoo13_9/</url>
    <content><![CDATA[<p>ir.actions.server的code字段可以赋值为一小段python代码，当执行该服务器动作时也会同时执行该段python代码，而如果这段python代码最后返回了一个窗口动作，则执行完服务器动作后也会执行该窗口动作。<br><strong>注意： 动作窗口视图中如果缺少接收值action，则导致没有返回数据，页面不会跳转。</strong><br>如下：  </p><a id="more"></a>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_your_pipeline"</span> <span class="attr">model</span>=<span class="string">"ir.actions.server"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Crm: My Pipeline<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model_id"</span> <span class="attr">ref</span>=<span class="string">"crm.model_crm_team"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span>&gt;</span>code<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span>action = model.action_your_pipeline()<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_your_pipeline</span><span class="params">(self)</span>:</span></span><br><span class="line">    action = self.env.ref(<span class="string">'crm.crm_lead_action_pipeline'</span>).read()[<span class="number">0</span>]</span><br><span class="line">    user_team_id = self.env.user.sale_team_id.id</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_team_id:</span><br><span class="line">        user_team_id = self.search([], limit=<span class="number">1</span>).id</span><br><span class="line">        action[<span class="string">'help'</span>] = _(<span class="string">"""&lt;p class='o_view_nocontent_smiling_face'&gt;Add new opportunities&lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="string">Looks like you are not a member of a Sales Team. You should add yourself</span></span><br><span class="line"><span class="string">as a member of one of the Sales Team.</span></span><br><span class="line"><span class="string">&lt;/p&gt;"""</span>)</span><br><span class="line">        <span class="keyword">if</span> user_team_id:</span><br><span class="line">            action[<span class="string">'help'</span>] += <span class="string">"&lt;p&gt;As you don't belong to any Sales Team, Odoo opens the first one by default.&lt;/p&gt;"</span></span><br><span class="line"></span><br><span class="line">    action_context = safe_eval(action[<span class="string">'context'</span>], &#123;<span class="string">'uid'</span>: self.env.uid&#125;)</span><br><span class="line">    <span class="keyword">if</span> user_team_id:</span><br><span class="line">        action_context[<span class="string">'default_team_id'</span>] = user_team_id</span><br><span class="line"></span><br><span class="line">    action[<span class="string">'context'</span>] = action_context</span><br><span class="line">    <span class="keyword">return</span> action</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_mark_as_lost"</span> <span class="attr">model</span>=<span class="string">"ir.actions.server"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Mark as lost<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model_id"</span> <span class="attr">ref</span>=<span class="string">"model_crm_lead"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"binding_model_id"</span> <span class="attr">ref</span>=<span class="string">"crm.model_crm_lead"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"binding_view_types"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span>&gt;</span>code<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span></span><br><span class="line">        if record:</span><br><span class="line">            action_values = env.ref('crm.crm_lead_lost_action').read()[0]</span><br><span class="line">            action_values.update(&#123;'context': env.context&#125;)</span><br><span class="line">            action = action_values</span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- Python中浮点数精度问题（四舍六入五成双的陷阱）</title>
    <url>/2019/12/07/python_6/</url>
    <content><![CDATA[<h3 id="python中的浮点数精度问题"><a href="#python中的浮点数精度问题" class="headerlink" title="python中的浮点数精度问题"></a>python中的浮点数精度问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 0.1 + 0.2</span><br><span class="line">0.30000000000000004</span><br></pre></td></tr></table></figure><p>我们不难发现python中浮点数的精度是存在问题的，这其中的原因是什么呢？<br>首先十进制的有理数表达是怎样的呢：</p><p>满足:<br>$\frac{x}{10^n}$,其中x≠∞, n∈N 的表达,自然而然二进制中有理数就满足$\frac{x}{2^n}$,其中x≠∞, n∈N  </p><a id="more"></a>



<p>而0.1 和 0.2 都不满足</p>
<h3 id="Round-四舍六入五成双-中的风险"><a href="#Round-四舍六入五成双-中的风险" class="headerlink" title="Round(四舍六入五成双)中的风险"></a>Round(四舍六入五成双)中的风险</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; round(0.135, 2)</span><br><span class="line">0.14</span><br><span class="line">&gt;&gt;&gt; round(0.235, 2)</span><br><span class="line">0.23</span><br></pre></td></tr></table></figure>

<p>我们看到0.135做到了， 而0.235却失败了。这也是由’精度’问题导致的。在我们严格要求精度的时候怎么解决呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入十进制数据或金融数据</span></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">x = Decimal(<span class="string">'0.235'</span>)  <span class="comment"># 字符串可以对数据精确表达，float本身就已经有可能是无理数了，精度就已经缺失了</span></span><br><span class="line">round(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decimal('0.24')</span></span><br></pre></td></tr></table></figure>

<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- Python 偏函数</title>
    <url>/2019/12/07/python_5/</url>
    <content><![CDATA[<p>Python 偏函数是通过 functools 模块被用户调用。</p><h3 id="偏函数-partial-应用"><a href="#偏函数-partial-应用" class="headerlink" title="偏函数 partial 应用"></a>偏函数 partial 应用</h3><p>函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。</p><p>偏函数是将所要承载的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数后续的参数，除非使用关键字参数。</p><a id="more"></a>


<p>通过语言描述可能无法理解偏函数是怎么使用的，那么就举一个常见的例子来说明。在这个例子里，我们实现了一个取余函数，对于整数 100，取得对于不同数 m 的 100%m 的余数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">( n, m )</span>:</span></span><br><span class="line">  <span class="keyword">return</span> n % m</span><br><span class="line"></span><br><span class="line">mod_by_100 = partial( mod, <span class="number">100</span> )</span><br><span class="line"></span><br><span class="line">print(mod( <span class="number">100</span>, <span class="number">7</span> ))  <span class="comment"># 2</span></span><br><span class="line">print(mod_by_100( <span class="number">7</span> ))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p>由于之前看到的例子一般选择加法或乘法来讲解，无法体会偏函数参数的位置问题，容易给人造成 partial 的第二个参数也是原函数的第二个参数的假象，所以我在这里选择 mod 来讲解。</p>
<p>而对于有关键字参数的情况下，就可以不按照原函数的参数位置和个数了。下面再看一个例子，讲的是如何进行不同的进制转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">bin2dec = partial( int, base=<span class="number">2</span> )</span><br><span class="line">print(bin2dec( <span class="string">'0b10001'</span> ))  <span class="comment"># 17</span></span><br><span class="line">print(bin2dec( <span class="string">'10001'</span> ))  <span class="comment"># 17</span></span><br><span class="line"></span><br><span class="line">hex2dec = partial( int, base=<span class="number">16</span> )</span><br><span class="line">print(hex2dec( <span class="string">'0x67'</span> ))  <span class="comment"># 103</span></span><br><span class="line">print(hex2dec( <span class="string">'67'</span> ))  <span class="comment"># 103</span></span><br></pre></td></tr></table></figure>

<p>偏函数的这些应用看似简单，用途却很大，可以很好的执行DRY原则，节省编程成本。</p>
<p>关于偏函数，可以对现有函数进行加强。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import functools</span><br><span class="line">&gt;&gt;&gt; int2 =functools.partial (int, base=2) <span class="comment"># 把 int 的转换设为二进制了，这里 base 是 int 函数表示进制的参数。</span></span><br><span class="line">&gt;&gt;&gt;int2(<span class="string">'1000000'</span>)</span><br><span class="line">64</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;int2(<span class="string">'1010101'</span>)</span><br><span class="line">85</span><br></pre></td></tr></table></figure>

<p>在重设之后, 也可以在函数调用时传入其他值:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">​&gt;&gt;&gt; int2(<span class="string">'1000000'</span>, base=10)  <span class="comment"># 这里 base 变成了 10，覆盖了已设的默认值 2。</span></span><br><span class="line">1000000</span><br></pre></td></tr></table></figure>

<p>注意这里在创建新的偏函数后，依旧可以更改已经设置的默认值，但是必须清晰指出是更改了 base 的值。</p>
<p>否则如果直接传如一个数值会报错:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int2(<span class="string">'100'</span>, 10)  <span class="comment"># 报错，10 前未加 base=，不能分辨这是传给 base 的</span></span><br></pre></td></tr></table></figure>

<p>原因如下:</p>
<p>创建偏函数时，实际上可以接收函数对象、<em>args 和 *</em>kw 这 3 个参数，当传入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int2 =functools.partial(int, base=2)  <span class="comment"># int 是函数对象，base=2 是 **kw，没有传入 *args 参数</span></span><br></pre></td></tr></table></figure>

<p>实际上固定了 int() 函数的关键字参数 base，也就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int2(<span class="string">'10010'</span>)</span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kw = &#123; <span class="string">'base'</span>: 2 &#125;</span><br><span class="line">int(<span class="string">'10010'</span>, **kw)  <span class="comment"># 如果不指明 base=2 而只是传入 2 的话，那么 2 被认为是 *args 的值</span></span><br></pre></td></tr></table></figure>

<p>当传入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max2 =functools.partial(max, 10)  <span class="comment"># 这里的 10 显然就是作为 *args 里的值传入的</span></span><br></pre></td></tr></table></figure>

<p>实际上会把 10 作为 *args 的一部分自动加到参数列表里去，也就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max2(5,6, 7)  <span class="comment"># 原本有 *args 的列表，然后会把 10 再加进去</span></span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args = (10, 5, 6, 7)</span><br><span class="line">max(*args)</span><br></pre></td></tr></table></figure>

<p>结果为 10。</p>
<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- collections 模块简介</title>
    <url>/2019/12/07/python_4/</url>
    <content><![CDATA[<p>collections模块实现了特定目标的容器，以提供Python标准内建容器 dict、list、set、tuple 的替代选择。</p><ul>
<li>Counter：字典的子类，提供了可哈希对象的计数功能</li>
<li>defaultdict：字典的子类，提供了一个工厂函数，为字典查询提供了默认值</li>
<li>OrderedDict：字典的子类，保留了他们被添加的顺序</li>
<li>namedtuple：创建命名元组子类的工厂函数</li>
<li>deque：类似列表容器，实现了在两端快速添加(append)和弹出(pop)</li>
<li>ChainMap：类似字典的容器类，将多个映射集合到一个视图里面</li>
</ul><a id="more"></a>

<h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>Counter是一个dict子类，主要是用来对你访问的对象的频率进行计数。<br>常用方法：</p>
<ul>
<li>elements()：返回一个迭代器，每个元素重复计算的个数，如果一个元素的计数小于1,就会被忽略。</li>
<li>most_common([n])：返回一个列表，提供n个访问频率最高的元素和计数</li>
<li>subtract([iterable-or-mapping])：从迭代对象中减去元素，输入输出可以是0或者负数</li>
<li>update([iterable-or-mapping])：从迭代对象计数元素或者从另一个 映射对象 (或计数器) 添加。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符出现的次数</span></span><br><span class="line">&gt;&gt;&gt; import collections</span><br><span class="line">&gt;&gt;&gt; collections.Counter(<span class="string">'hello world'</span>)</span><br><span class="line">Counter(&#123;<span class="string">'l'</span>: 3, <span class="string">'o'</span>: 2, <span class="string">'h'</span>: 1, <span class="string">'e'</span>: 1, <span class="string">' '</span>: 1, <span class="string">'w'</span>: 1, <span class="string">'r'</span>: 1, <span class="string">'d'</span>: 1&#125;)</span><br><span class="line"><span class="comment"># 统计单词数</span></span><br><span class="line">&gt;&gt;&gt; collections.Counter(<span class="string">'hello world hello world hello nihao'</span>.split())</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 3, <span class="string">'world'</span>: 2, <span class="string">'nihao'</span>: 1&#125;)</span><br></pre></td></tr></table></figure>

<p>常用的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c = collections.Counter(<span class="string">'hello world hello world hello nihao'</span>.split())</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 3, <span class="string">'world'</span>: 2, <span class="string">'nihao'</span>: 1&#125;)</span><br><span class="line"><span class="comment"># 获取指定对象的访问次数，也可以使用get()方法</span></span><br><span class="line">&gt;&gt;&gt; c[<span class="string">'hello'</span>]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; c = collections.Counter(<span class="string">'hello world hello world hello nihao'</span>.split())</span><br><span class="line"><span class="comment"># 查看元素</span></span><br><span class="line">&gt;&gt;&gt; list(c.elements())</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'hello'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'world'</span>, <span class="string">'nihao'</span>]</span><br><span class="line"><span class="comment"># 追加对象，或者使用c.update(d)</span></span><br><span class="line">&gt;&gt;&gt; c = collections.Counter(<span class="string">'hello world hello world hello nihao'</span>.split())</span><br><span class="line">&gt;&gt;&gt; d = collections.Counter(<span class="string">'hello world'</span>.split())</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 3, <span class="string">'world'</span>: 2, <span class="string">'nihao'</span>: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 1, <span class="string">'world'</span>: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; c + d</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 4, <span class="string">'world'</span>: 3, <span class="string">'nihao'</span>: 1&#125;)</span><br><span class="line"><span class="comment"># 减少对象，或者使用c.subtract(d)</span></span><br><span class="line">&gt;&gt;&gt; c - d</span><br><span class="line">Counter(&#123;<span class="string">'hello'</span>: 2, <span class="string">'world'</span>: 1, <span class="string">'nihao'</span>: 1&#125;)</span><br><span class="line"><span class="comment"># 清除</span></span><br><span class="line">&gt;&gt;&gt; c.clear()</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">Counter()</span><br></pre></td></tr></table></figure>

<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p><code>collections.defaultdict(default_factory)</code>为字典的没有的key提供一个默认的值。参数应该是一个函数，当没有参数调用时返回默认值。如果没有传递任何内容，则默认为None。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = collections.defaultdict()</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">defaultdict(None, &#123;&#125;)</span><br><span class="line">&gt;&gt;&gt; e = collections.defaultdict(str)</span><br><span class="line">&gt;&gt;&gt; e</span><br><span class="line">defaultdict(&lt;class <span class="string">'str'</span>&gt;, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>defaultdict的一个典型用法是使用其中一种内置类型(如str、int、list或dict)作为默认工厂，因为这些内置类型在没有参数调用时返回空类型。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = collections.defaultdict(str)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">defaultdict(&lt;class <span class="string">'str'</span>&gt;, &#123;&#125;)</span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'hello'</span>]</span><br><span class="line"><span class="string">''</span></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">defaultdict(&lt;class <span class="string">'str'</span>&gt;, &#123;<span class="string">'hello'</span>: <span class="string">''</span>&#125;)</span><br><span class="line"><span class="comment"># 普通字典调用不存在的键时，将会抛异常</span></span><br><span class="line">&gt;&gt;&gt; e = &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; e[<span class="string">'hello'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'hello'</span></span><br></pre></td></tr></table></figure>

<p>使用int作为default_factory的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import defaultdict</span><br><span class="line">&gt;&gt;&gt; fruit = defaultdict(int)</span><br><span class="line">&gt;&gt;&gt; fruit[<span class="string">'apple'</span>] += 2 </span><br><span class="line">&gt;&gt;&gt; fruit</span><br><span class="line">defaultdict(&lt;class <span class="string">'int'</span>&gt;, &#123;<span class="string">'apple'</span>: 2&#125;)</span><br><span class="line">&gt;&gt;&gt; fruit</span><br><span class="line">defaultdict(&lt;class <span class="string">'int'</span>&gt;, &#123;<span class="string">'apple'</span>: 2&#125;)</span><br><span class="line">&gt;&gt;&gt; fruit[<span class="string">'banana'</span>]  <span class="comment"># 没有对象时，返回0</span></span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; fruit</span><br><span class="line">defaultdict(&lt;class <span class="string">'int'</span>&gt;, &#123;<span class="string">'apple'</span>: 2, <span class="string">'banana'</span>: 0&#125;)</span><br></pre></td></tr></table></figure>

<p>使用list作为default_factory的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = [(<span class="string">'NC'</span>, <span class="string">'Raleigh'</span>), (<span class="string">'VA'</span>, <span class="string">'Richmond'</span>), (<span class="string">'WA'</span>, <span class="string">'Seattle'</span>), (<span class="string">'NC'</span>, <span class="string">'Asheville'</span>)]</span><br><span class="line">&gt;&gt;&gt; d = collections.defaultdict(list)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> s:</span><br><span class="line">...      d[k].append(v)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">defaultdict(&lt;class <span class="string">'list'</span>&gt;, &#123;<span class="string">'NC'</span>: [<span class="string">'Raleigh'</span>, <span class="string">'Asheville'</span>], <span class="string">'VA'</span>: [<span class="string">'Richmond'</span>], <span class="string">'WA'</span>: [<span class="string">'Seattle'</span>]&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>Python字典中的键的顺序是任意的:它们不受添加的顺序的控制。<br>collections.OrderedDict类提供了保留他们添加顺序的字典对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import OrderedDict</span><br><span class="line">&gt;&gt;&gt; o = OrderedDict()</span><br><span class="line">&gt;&gt;&gt; o[<span class="string">'key1'</span>] = <span class="string">'value1'</span></span><br><span class="line">&gt;&gt;&gt; o[<span class="string">'key2'</span>] = <span class="string">'value2'</span></span><br><span class="line">&gt;&gt;&gt; o[<span class="string">'key3'</span>] = <span class="string">'value3'</span></span><br><span class="line">&gt;&gt;&gt; o</span><br><span class="line">OrderedDict([(<span class="string">'key1'</span>, <span class="string">'value1'</span>), (<span class="string">'key2'</span>, <span class="string">'value2'</span>), (<span class="string">'key3'</span>, <span class="string">'value3'</span>)])</span><br></pre></td></tr></table></figure>

<p>如果在已经存在的key上添加新的值，将会保留原来的key的位置，然后覆盖value值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; o[<span class="string">'key1'</span>] = <span class="string">'value5'</span></span><br><span class="line">&gt;&gt;&gt; o</span><br><span class="line">OrderedDict([(<span class="string">'key1'</span>, <span class="string">'value5'</span>), (<span class="string">'key2'</span>, <span class="string">'value2'</span>), (<span class="string">'key3'</span>, <span class="string">'value3'</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>三种定义命名元组的方法：第一个参数是命名元组的构造器（如下的：Person，Human）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import namedtuple</span><br><span class="line">&gt;&gt;&gt; Person = namedtuple(<span class="string">'Person'</span>, [<span class="string">'age'</span>, <span class="string">'height'</span>, <span class="string">'name'</span>])</span><br><span class="line">&gt;&gt;&gt; Human = namedtuple(<span class="string">'Human'</span>, <span class="string">'age, height, name'</span>)</span><br><span class="line">&gt;&gt;&gt; Human2 = namedtuple(<span class="string">'Human2'</span>, <span class="string">'age height name'</span>)</span><br></pre></td></tr></table></figure>

<p>实例化命令元组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; tom = Person(30,178,<span class="string">'Tom'</span>)</span><br><span class="line">&gt;&gt;&gt; jack = Human(20,179,<span class="string">'Jack'</span>)</span><br><span class="line">&gt;&gt;&gt; tom</span><br><span class="line">Person(age=30, height=178, name=<span class="string">'Tom'</span>)</span><br><span class="line">&gt;&gt;&gt; jack</span><br><span class="line">Human(age=20, height=179, name=<span class="string">'Jack'</span>)</span><br><span class="line">&gt;&gt;&gt; tom.age <span class="comment">#直接通过  实例名+.+属性 来调用</span></span><br><span class="line">30</span><br><span class="line">&gt;&gt;&gt; jack.name</span><br><span class="line"><span class="string">'Jack'</span></span><br></pre></td></tr></table></figure>

<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>collections.deque返回一个新的双向队列对象，从左到右初始化(用方法 append()) ，从 iterable （迭代对象) 数据创建。如果 iterable 没有指定，新队列为空。<br>collections.deque队列支持线程安全，对于从两端添加(append)或者弹出(pop)，复杂度O(1)。<br>虽然list对象也支持类似操作，但是这里优化了定长操作（pop(0)、insert(0,v)）的开销。<br>如果 maxlen 没有指定或者是 None ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度。一旦限定长度的deque满了，当新项加入时，同样数量的项就从另一端弹出。<br>支持的方法：</p>
<ul>
<li>append(x)：添加x到右端</li>
<li>appendleft(x)：添加x到左端</li>
<li>clear()：清楚所有元素，长度变为0</li>
<li>copy()：创建一份浅拷贝</li>
<li>count(x)：计算队列中个数等于x的元素</li>
<li>extend(iterable)：在队列右侧添加iterable中的元素</li>
<li>extendleft(iterable)：在队列左侧添加iterable中的元素，注：在左侧添加时，iterable参数的顺序将会反过来添加</li>
<li>index(x[,start[,stop]])：返回第 x 个元素（从 start 开始计算，在 stop 之前）。返回第一个匹配，如果没找到的话，升起 ValueError 。</li>
<li>insert(i,x)：在位置 i 插入 x 。注：如果插入会导致一个限长deque超出长度 maxlen 的话，就升起一个 IndexError 。</li>
<li>pop()：移除最右侧的元素</li>
<li>popleft()：移除最左侧的元素</li>
<li>remove(value)：移去找到的第一个 value。没有抛出ValueError</li>
<li>reverse()：将deque逆序排列。返回 None 。</li>
<li>maxlen：队列的最大长度，没有限定则为None。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import deque</span><br><span class="line">&gt;&gt;&gt; d = deque(maxlen=10)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">deque([], maxlen=10)</span><br><span class="line">&gt;&gt;&gt; d.extend(<span class="string">'python'</span>)</span><br><span class="line">&gt;&gt;&gt; [i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> d]</span><br><span class="line">[<span class="string">'P'</span>, <span class="string">'Y'</span>, <span class="string">'T'</span>, <span class="string">'H'</span>, <span class="string">'O'</span>, <span class="string">'N'</span>]</span><br><span class="line">&gt;&gt;&gt; d.append(<span class="string">'e'</span>)</span><br><span class="line">&gt;&gt;&gt; d.appendleft(<span class="string">'f'</span>)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">deque([<span class="string">'f'</span>, <span class="string">'p'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>, <span class="string">'e'</span>], maxlen=10)</span><br></pre></td></tr></table></figure>

<h3 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3><p>一个 ChainMap 将多个字典或者其他映射组合在一起，创建一个单独的可更新的视图。 如果没有 maps 被指定，就提供一个默认的空字典 。ChainMap是管理嵌套上下文和覆盖的有用工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import ChainMap</span><br><span class="line">&gt;&gt;&gt; d1 = &#123;<span class="string">'apple'</span>:1,<span class="string">'banana'</span>:2&#125;</span><br><span class="line">&gt;&gt;&gt; d2 = &#123;<span class="string">'orange'</span>:2,<span class="string">'apple'</span>:3,<span class="string">'pike'</span>:1&#125;</span><br><span class="line">&gt;&gt;&gt; combined_d = ChainMap(d1,d2)</span><br><span class="line">&gt;&gt;&gt; reverse_combind_d = ChainMap(d2,d1)</span><br><span class="line">&gt;&gt;&gt; combined_d</span><br><span class="line">ChainMap(&#123;<span class="string">'apple'</span>: 1, <span class="string">'banana'</span>: 2&#125;, &#123;<span class="string">'orange'</span>: 2, <span class="string">'apple'</span>: 3, <span class="string">'pike'</span>: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; reverse_combind_d</span><br><span class="line">ChainMap(&#123;<span class="string">'orange'</span>: 2, <span class="string">'apple'</span>: 3, <span class="string">'pike'</span>: 1&#125;, &#123;<span class="string">'apple'</span>: 1, <span class="string">'banana'</span>: 2&#125;)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> combined_d.items():</span><br><span class="line">...      <span class="built_in">print</span>(k,v)</span><br><span class="line">...</span><br><span class="line">pike 1</span><br><span class="line">apple 1</span><br><span class="line">banana 2</span><br><span class="line">orange 2</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> reverse_combind_d.items():</span><br><span class="line">...      <span class="built_in">print</span>(k,v)</span><br><span class="line">...</span><br><span class="line">pike 1</span><br><span class="line">apple 3</span><br><span class="line">banana 2</span><br><span class="line">orange 2</span><br></pre></td></tr></table></figure>

<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- Inspect 模块简介</title>
    <url>/2019/12/07/python_3/</url>
    <content><![CDATA[<h2 id="inspect模块主要提供了四种用处"><a href="#inspect模块主要提供了四种用处" class="headerlink" title="inspect模块主要提供了四种用处"></a>inspect模块主要提供了四种用处</h2><h3 id="1-对是否是模块、框架、函数进行类型检查"><a href="#1-对是否是模块、框架、函数进行类型检查" class="headerlink" title="1.对是否是模块、框架、函数进行类型检查"></a>1.对是否是模块、框架、函数进行类型检查</h3><h3 id="2-获取源码"><a href="#2-获取源码" class="headerlink" title="2.获取源码"></a>2.获取源码</h3><h3 id="3-获取类或者函数的参数信息"><a href="#3-获取类或者函数的参数信息" class="headerlink" title="3.获取类或者函数的参数信息"></a>3.获取类或者函数的参数信息</h3><h3 id="4-解析堆栈"><a href="#4-解析堆栈" class="headerlink" title="4.解析堆栈"></a>4.解析堆栈</h3><h2 id="一、type-and-members"><a href="#一、type-and-members" class="headerlink" title="一、type and members"></a>一、type and members</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>). inspect.getmembers(object[, predicate]) 参数<span class="number">2</span>调用如下<span class="number">16</span>个方法；</span><br><span class="line"><span class="comment"># 返回值为object的所有成员，以（name,value）对组成的列表</span></span><br><span class="line"><span class="number">2</span>)inspect.getmembers()可以获取对象（module、<span class="class"><span class="keyword">class</span>、<span class="title">method</span>等）属性</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">1.<span class="title">inspect</span>.<span class="title">ismodule</span><span class="params">(object)</span>:</span> 是否为模块</span><br><span class="line"><span class="number">2.</span>inspect.isclass(object): 是否为类</span><br><span class="line"><span class="number">3.</span>inspect.ismethod(object): 是否为方法（bound method written <span class="keyword">in</span> python）</span><br><span class="line"><span class="number">4.</span>inspect.isfunction(object): 是否为函数(python function, including <span class="keyword">lambda</span> expression)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>inspect.isgeneratorfunction(object):是否为python生成器函数</span><br><span class="line"><span class="number">6.</span>inspect.isgenerator(object): 是否为生成器</span><br><span class="line"><span class="number">7.</span>inspect.istraceback(object): 是否为traceback</span><br><span class="line"><span class="number">8.</span>inspect.isframe(object): 是否为frame</span><br><span class="line"><span class="number">9.</span>inspect.iscode(object): 是否为code</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>inspect.isbuiltin(object): 是否为built-<span class="keyword">in</span>函数或built-<span class="keyword">in</span>方法</span><br><span class="line"><span class="number">11.</span>inspect.isroutine(object): 是否为用户自定义或者built-<span class="keyword">in</span>函数或方法</span><br><span class="line"><span class="number">12.</span>inspect.isabstract(object): 是否为抽象基类</span><br><span class="line"><span class="number">13.</span>inspect.ismethoddescriptor(object):是否为方法标识符</span><br><span class="line"><span class="number">14.</span>inspect.isdatadescriptor(object): 是否为数字标识符，数字标识符有__get__ 和__set__属性；</span><br><span class="line">通常也有__name__和__doc__属性</span><br><span class="line"><span class="number">15.</span>inspect.isgetsetdescriptor(object): 是否为getset descriptor</span><br><span class="line"><span class="number">16.</span>inspect.ismemberdescriptor(object):是否为member descriptor</span><br></pre></td></tr></table></figure><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> inspect.getmoduleinfo(path):返回一个命名元组&lt;named tuple&gt;(name, suffix, mode, module_type)</span><br><span class="line">　　name:模块名（不包括其所在的package）</span><br><span class="line">suffix:</span><br><span class="line">mode:open()方法的模式，如:<span class="string">'r'</span>, <span class="string">'a'</span>等</span><br><span class="line">module_type: 整数，代表了模块的类型</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> inspect.getmodulename(path):根据path返回模块名（不包括其所在的package）</span><br></pre></td></tr></table></figure>

<h2 id="二、Retrieving-source-code"><a href="#二、Retrieving-source-code" class="headerlink" title="二、Retrieving source code"></a>二、Retrieving source code</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> inspect.getdoc(object):         获取object的documentation信息</span><br><span class="line"><span class="number">2.</span> inspect.getcomments(object)</span><br><span class="line"><span class="number">3.</span> inspect.getfile(object):        返回对象的文件名</span><br><span class="line"><span class="number">4.</span> inspect.getmodule(object):      返回object所属的模块名</span><br><span class="line">5. inspect.getsourcefile(object):  返回object的python源文件名；object不能使built-in的module, class, mothod</span><br><span class="line"><span class="number">6.</span> inspect.getsourcelines(object): 返回object的python源文件代码的内容，行号+代码行</span><br><span class="line"><span class="number">7.</span> inspect.getsource(object):      以string形式返回object的源代码</span><br><span class="line"><span class="number">8.</span> inspect.cleandoc(doc):</span><br></pre></td></tr></table></figure>

<h2 id="三、class-and-functions"><a href="#三、class-and-functions" class="headerlink" title="三、class and functions"></a>三、class and functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> inspect.getclasstree(classes[, unique])</span><br><span class="line"><span class="number">2.</span> inspect.getargspec(func)</span><br><span class="line"><span class="number">3.</span> inspect.getargvalues(frame)</span><br><span class="line"><span class="number">4.</span> inspect.formatargspec(args[, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join])</span><br><span class="line"><span class="number">5.</span> inspect.formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join])</span><br><span class="line"><span class="number">6.</span> inspect.getmro(cls): 元组形式返回cls类的基类（包括cls类），以method resolution顺序;通常cls类为元素的第一个元素</span><br><span class="line"><span class="number">7.</span> inspect.getcallargs(func[, *args][, **kwds]):将args和kwds参数到绑定到为func的参数名；</span><br><span class="line">对bound方法，也绑定第一个参数（通常为self）到相应的实例；返回字典，对应参数名及其值；</span><br></pre></td></tr></table></figure>

<h2 id="inspect的使用"><a href="#inspect的使用" class="headerlink" title="inspect的使用"></a>inspect的使用</h2><h3 id="1-获取调用函数的实例"><a href="#1-获取调用函数的实例" class="headerlink" title="1. 获取调用函数的实例"></a>1. 获取调用函数的实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file: util.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_caller</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> inspect</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        frame = inspect.currentframe()</span><br><span class="line">        call_frame = frame.f_back.f_back</span><br><span class="line">        call_frame_name = call_frame.f_code.co_varnames[<span class="number">0</span>]</span><br><span class="line">        call_frame_self = call_frame.f_locals.get(call_frame_name, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        call_frame_self = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">del</span> frame</span><br><span class="line">    <span class="keyword">return</span> call_frame_self</span><br></pre></td></tr></table></figure>

<h3 id="2-登记注册函数"><a href="#2-登记注册函数" class="headerlink" title="2.登记注册函数"></a>2.登记注册函数</h3><p>结合上篇说的装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public</span><span class="params">(name=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> callable(name):</span><br><span class="line">        f = name</span><br><span class="line">        f._rpc_public_name = f.__name__</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(f)</span>:</span></span><br><span class="line">        f._rpc_public_name = name <span class="keyword">or</span> f.__name__</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.method_map = &#123;&#125;</span><br><span class="line">        self.register_public_methods()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @public("hi")</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hi , fun1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @public("hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hello, fun2"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登记函数方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_public_methods</span><span class="params">(self)</span>:</span></span><br><span class="line">        methods = inspect.getmembers(self, <span class="keyword">lambda</span> f: callable(f) <span class="keyword">and</span> hasattr(f, <span class="string">'_rpc_public_name'</span>))</span><br><span class="line">        <span class="keyword">for</span> name, f <span class="keyword">in</span> methods:</span><br><span class="line">            self.add_method(f, f._rpc_public_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_method</span><span class="params">(self, fun, name)</span>:</span></span><br><span class="line">         self.method_map[name] = fun</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = A()</span><br><span class="line">    print(a.method_map)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># &#123;'hi': &lt;bound method A.fun1 of &lt;__main__.A object at 0x000001BBC6E0DB38&gt;&gt;, 'hello': &lt;bound method A.fun2 of &lt;__main__.A object at 0x000001BBC6E0DB38&gt;&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<p>以上。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- Python秘史之“装饰器”</title>
    <url>/2019/12/06/python_2/</url>
    <content><![CDATA[<p>写在前头，本来不打算写这些东西的，毕竟网上一大堆，官方文档一大堆。可是有些看官和徒弟不懂一些Python知识，讲解Odoo知识时候有些吃力，只能补充一下，写一写基础的。<strong>真人、神仙、佛祖级别的就自动略过。</strong>  </p><p>关于Python的一些秘史啊，我们就扒一扒。那各位看官，就请搬板凳坐一排，且听我细细道来。  </p><h2 id="一、前戏"><a href="#一、前戏" class="headerlink" title="一、前戏"></a>一、前戏</h2><a id="more"></a>

<p>首先，我们先说<code>对象</code>的事情。各位<code>single dog</code>要爱护自己的两个<code>五菇凉</code>啊！这是最重要的伴侣！<br>Python中就有一个对象的概念。 万物皆可盘，一切皆对象。</p>
<h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>下面就说说<code>函数</code>。理解Python中的函数。函数是用<code>def</code>定义的，本质也是一个对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'单身狗，你好！'</span>)</span><br><span class="line"></span><br><span class="line">print(type(hello))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;class <span class="string">'function'</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，是一个<code>function</code>类型（其实还有<code>method</code>类型，下回讲解…）</p>
<p>我们甚至可以将一个函数赋值给一个变量，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name)</span></span></span><br><span class="line"><span class="function">     <span class="title">return</span> '%<span class="title">s</span> <span class="title">is</span> <span class="title">single</span> <span class="title">dog</span>' % <span class="title">name</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">dog = single_dog  # 注意：这里没有使用小括号，也没有传参，因为我们并不是在调用函数，只是引用函数对象</span><br><span class="line">print(single_dog(<span class="string">'小明'</span>))  <span class="comment"># output: '小明 is single dog'</span></span><br></pre></td></tr></table></figure>

<p>此时，如果我们删掉旧的single_dog函数，看看会发生什么！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> single_dog</span><br><span class="line">print(single_dog())  <span class="comment"># outputs: NameError</span></span><br><span class="line">print(dog(<span class="string">'小王'</span>))  <span class="comment"># outputs: '小王 is single dog'</span></span><br></pre></td></tr></table></figure>

<p>我们发现，即使我们删除旧的方法，但是我们之前赋值引用的函数还是正常使用。<br>继续…</p>
<h3 id="函数中定义函数"><a href="#函数中定义函数" class="headerlink" title="函数中定义函数"></a>函数中定义函数</h3><p>接下来，我们来个骚操作。刚才我们只是定义了一个函数，然后被赋值给一个变量。那么我们能不能在函数中再定义一个函数呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s喜欢看小电影"</span> % name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s是基佬"</span> % name</span><br><span class="line"></span><br><span class="line">    print(hobby())</span><br><span class="line">    print(sex())</span><br><span class="line"></span><br><span class="line">single_dog()</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br><span class="line"><span class="comment"># 小王喜欢看小电影</span></span><br><span class="line"><span class="comment"># 小王是基佬</span></span><br></pre></td></tr></table></figure>

<p>发现了什么？无论怎么调用single_dog(), hobby()和sex()是一定会执行的。这也是必然的，毕竟单身狗都好这口，各位看官您说呢？<br>如果，我们单独调用hobby()或者sex()呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sex()  <span class="comment"># outputs: NameError: name 'sex' is not defined</span></span><br></pre></td></tr></table></figure>

<p>可见，我们是不能直接调用内部函数的。<br>那现在我们在函数中定义另外的函数。也就是说：我们可以创建嵌套的函数。但是我们不能直接调用内部函数。那我们能否在函数中返回一个函数呢？<br>继续…</p>
<h3 id="函数中返回一个函数"><a href="#函数中返回一个函数" class="headerlink" title="函数中返回一个函数"></a>函数中返回一个函数</h3><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s喜欢看小电影"</span> % name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s是基佬"</span> % name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'小明'</span>:</span><br><span class="line">        <span class="keyword">return</span> hobby</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sex</span><br><span class="line"></span><br><span class="line">dog1 = single_dog()</span><br><span class="line">print(dog1)</span><br><span class="line">print(dog1())</span><br><span class="line"></span><br><span class="line">dog2 = single_dog(<span class="string">'小明'</span>)</span><br><span class="line">print(dog2)</span><br><span class="line">print(dog2())</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br><span class="line"><span class="comment"># &lt;function single_dog.&lt;locals&gt;.sex at 0x000001D2C7C23268&gt;</span></span><br><span class="line"><span class="comment"># 小王是基佬</span></span><br><span class="line"><span class="comment"># 小明是个单身狗</span></span><br><span class="line"><span class="comment"># &lt;function single_dog.&lt;locals&gt;.hobby at 0x000001D2C7C231E0&gt;</span></span><br><span class="line"><span class="comment"># 小明喜欢看小电影</span></span><br></pre></td></tr></table></figure>

<p>发现了什么？dog1指向了sex函数，dog2指向了hobby函数，并且dog1和dog2都可以加()运行。<br>由此可见，函数是可以返回一个函数，并且正常的被调用运行的。那么我们定义函数时候，能不能传入一个函数呢？<br>继续…</p>
<p>依然是前戏。</p>
<h3 id="函数作为参数传入到函数中"><a href="#函数作为参数传入到函数中" class="headerlink" title="函数作为参数传入到函数中"></a>函数作为参数传入到函数中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s喜欢看小电影"</span> % name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s是基佬"</span> % name</span><br><span class="line"></span><br><span class="line">    print(hobby())</span><br><span class="line">    print(sex())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_dog</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'单身狗也是狗'</span>)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">is_dog(single_dog)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 单身狗也是狗</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br><span class="line"><span class="comment"># 小王喜欢看小电影</span></span><br><span class="line"><span class="comment"># 小王是基佬</span></span><br></pre></td></tr></table></figure>

<p>要想做得好，前戏得做足了。说了这么久，还没进入主题。小王说他就蹭蹭不进去，那我们进去。</p>
<h2 id="正主“装饰器”"><a href="#正主“装饰器”" class="headerlink" title="正主“装饰器”"></a>正主“装饰器”</h2><p>装饰器？啥是装饰器？装饰器(Decorators)是 Python 的一个重要部分。简单地说：就是在不动其他函数时，给其增加功能进行丰富的函数。有助于让我们的代码更简短，也更Pythonic。<br>啥？不明白？要一个场景？那行吧…</p>
<p>比如： 果农2块的苹果卖出去后被放入盒子里，最后变成被果农儿子花10块买回来的平安果。</p>
<p>要个实际场景？</p>
<p>场景来了： 小明是个单身狗，喜欢看小电影。在电脑某个盘里存放了一部<code>XDYJ-6961.mp4</code>的文件。以便于夜深人静的时候观赏。但是呢，平时小王又会用他电脑。小明害怕小王发现，就对该文件进行了修饰修饰，把文件放入目录名为<code>人类文明的起源</code>的文件夹下。此时呢，小明晚上仍可以欣赏。这就是做到不动原本的，给其装饰了一番。</p>
<p>要实战姿势？其实我们上面已经写了一个装饰器了。（闭包这些个概念，您就自己百度吧…）</p>
<h3 id="第一个装饰器（函数装饰函数）"><a href="#第一个装饰器（函数装饰函数）" class="headerlink" title="第一个装饰器（函数装饰函数）"></a>第一个装饰器（函数装饰函数）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapfunc</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"单身狗喜欢看小电影"</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapfunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">single_dog()</span><br><span class="line">single_dog = hobby(single_dog)</span><br><span class="line">single_dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br><span class="line"><span class="comment"># 单身狗喜欢看小电影</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br></pre></td></tr></table></figure>

<p>这就是一个装饰器，没有改变原函数，再原函数的功能上增加了一个功能。<code>wrapfunc</code>就是一个包装器。那有看官就问“为啥我看到的装饰器都是@开始的呢？”<br>那是因为<code>@</code>是Python的一个<code>语法糖</code>。上面代码等同于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"单身狗喜欢看小电影"</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="meta">@hobby</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line">single_dog()</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 单身狗喜欢看小电影</span></span><br><span class="line"><span class="comment"># 小王是个单身狗</span></span><br></pre></td></tr></table></figure>

<p>这就是Pythonic的写法，至于其他的语法糖也请自行百度。</p>
<h3 id="包装器的装饰器–wraps"><a href="#包装器的装饰器–wraps" class="headerlink" title="包装器的装饰器–wraps"></a>包装器的装饰器–wraps</h3><p>此时，我们的装饰器是存在一些问题的。我们的被装饰的函数名字到底变成了什么呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(single_dog.__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># wrapfunc</span></span><br></pre></td></tr></table></figure>

<p>显然，这不是我们想要的。函数名被替换了包装器。它重写了我们函数的名字和注释文档(docstring)。<br>对于受到封装的原函数来说，装饰器能够在那个函数执行前或者执行后分别运行一些代码，使得可以再装饰器里面访问并修改原函数的参数以及返回值，以实现约束定义、调试程序、注册函数等目标。装饰器一般返回一个包装器（wrapper），而functools.wraps就是装饰包装器的装饰器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hobby</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 包装器的装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapfunc</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"单身狗喜欢看小电影"</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapfunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@hobby</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_dog</span><span class="params">(name=<span class="string">"小王"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"%s是个单身狗"</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(single_dog.__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># single_dog</span></span><br></pre></td></tr></table></figure>

<p>wraps保留了原函数的属性</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="授权-Authorization"><a href="#授权-Authorization" class="headerlink" title="授权(Authorization)"></a>授权(Authorization)</h4><p>装饰器能有助于检查某个人是否被授权去使用一个web应用的端点(endpoint)。它们被大量使用于Flask和Django web框架中。这里是一个例子来使用基于装饰器的授权：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_auth</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        auth = request.authorization</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> <span class="keyword">not</span> check_auth(auth.username, auth.password):</span><br><span class="line">            authenticate()</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br></pre></td></tr></table></figure>

<h4 id="日志-Logging"><a href="#日志-Logging" class="headerlink" title="日志(Logging)"></a>日志(Logging)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logit</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">" was called"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition_func</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="string">"""Do some math."""</span></span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = addition_func(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># Output: addition_func was called</span></span><br></pre></td></tr></table></figure>

<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>我们回到日志的例子，并创建一个包裹函数，能让我们指定一个用于输出的日志文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logit</span><span class="params">(logfile=<span class="string">'out.log'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logging_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            log_string = func.__name__ + <span class="string">" was called"</span></span><br><span class="line">            print(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> open(logfile, <span class="string">'a'</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logit(logfile='func2.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="装饰器类（类装饰函数）"><a href="#装饰器类（类装饰函数）" class="headerlink" title="装饰器类（类装饰函数）"></a>装饰器类（类装饰函数）</h3><p>现在我们有了能用于正式环境的logit装饰器，但当我们的应用的某些部分还比较脆弱时，异常也许是需要更紧急关注的事情。比方说有时你只想打日志到一个文件。而有时你想把引起你注意的问题发送到一个email，同时也保留日志，留个记录。这是一个使用继承的场景，但目前为止我们只看到过用来构建装饰器的函数。</p>
<p>幸运的是，类也可以用来构建装饰器。那我们现在以一个类而不是一个函数的方式，来重新构建logit。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logit</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, logfile=<span class="string">'out.log'</span>)</span>:</span></span><br><span class="line">        self.logfile = logfile</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            log_string = func.__name__ + <span class="string">" was called"</span></span><br><span class="line">            print(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile并写入</span></span><br><span class="line">            <span class="keyword">with</span> open(self.logfile, <span class="string">'a'</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的文件</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="comment"># 现在，发送一个通知</span></span><br><span class="line">            self.notify()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># logit只打日志，不做别的</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这个实现有一个附加优势，在于比嵌套函数的方式更加整洁，而且包裹一个函数还是使用跟以前一样的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>现在，我们给 logit 创建子类，来添加 email 的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">email_logit</span><span class="params">(logit)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    一个logit的实现版本，可以在函数调用时发送email给管理员</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, email=<span class="string">'admin@myproject.com'</span>, *args, **kwargs)</span>:</span></span><br><span class="line">        self.email = email</span><br><span class="line">        super(email_logit, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 发送一封email到self.email</span></span><br><span class="line">        <span class="comment"># 这里就不做实现了</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>从现在起，<code>@email_logit</code> 将会和 <code>@logit</code> 产生同样的效果，但是在打日志的基础上，还会多发送一封邮件给管理员。</p>
<h3 id="函数装饰类"><a href="#函数装饰类" class="headerlink" title="函数装饰类"></a>函数装饰类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(a)</span>:</span></span><br><span class="line">        print(<span class="string">'class name:'</span>, cls.__name__)</span><br><span class="line">        <span class="keyword">return</span> cls(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapClass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'self.name ='</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Foo(<span class="string">'小明'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 'class name: Foo'</span></span><br></pre></td></tr></table></figure>

<h3 id="类装饰类"><a href="#类装饰类" class="headerlink" title="类装饰类"></a>类装饰类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowClassName</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cls)</span>:</span></span><br><span class="line">        self._cls = cls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        print(<span class="string">'class name:'</span>, self._cls.__name__)</span><br><span class="line">        <span class="keyword">return</span> self._cls(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ShowClassName</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foobar</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        self.value = a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Foobar(<span class="string">'小明'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 'class name: Foobar'</span></span><br></pre></td></tr></table></figure>

<p>以上。<br>都是Python的基础知识，希望各位能够掌握装饰器的基本用法。<br>– end –</p>
<p>看官，觉得好，就请喝杯咖啡吧！</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>美女-丸子头</title>
    <url>/2019/12/05/picture_girl_7/</url>
    <content><![CDATA[<p><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H9ef95c8e5a7c4e29bdaa21925383db69H.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/Hf4771e13470e4a6591e500409c4083c4j.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H3ffe4930f6954d9782d21e724907ac65j.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H54b141019e8d4cdc949875d16aa9b9f4r.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H22487be8ffa4404483e36dafb3909bbbT.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H5996ff7e3c2742818bded5115f21dfe8A.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H88e9973f9abc4583ac6762ece9c8ac94X.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/Hf95fca9276544ba4be80c789850a28c0r.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/Hd9b282e3c35a4e5d8e0a8a8ace156f2bx.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/He0e313b5fd7f468086b937307da3fdd1k.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H4860b9bd40a64406bd351d3fe010b1f2U.jpg"><br><img alt="丸子头" data-src="https://ae01.alicdn.com/kf/H80d9ede84ec64381a95f032965713b245.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>丸子头</category>
      </categories>
  </entry>
  <entry>
    <title>美女-青春</title>
    <url>/2019/12/05/picture_girl_6/</url>
    <content><![CDATA[<p><img alt="青春" data-src="https://ae01.alicdn.com/kf/Hd23c5fd52fdf44eb9e88bdade26dec54T.jpg"><br><img alt="青春" data-src="https://ae01.alicdn.com/kf/H3188fd0523c348c9985a87faccb821c7s.jpg"><br><img alt="青春" data-src="https://ae01.alicdn.com/kf/H41a44f38de60465581e8462056bfc1acp.jpg"><br><img alt="青春" data-src="https://ae01.alicdn.com/kf/H899990c93d8c4745ba0c13b9adfb25a58.jpg"><br><img alt="青春" data-src="https://ae01.alicdn.com/kf/Hee9585b313fa4899a74778e4f9277f0fI.jpg"><br><img alt="青春" data-src="https://ae01.alicdn.com/kf/Hcf1f5d260d9345c2af1ccd28b5cc224dJ.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>青春</category>
      </categories>
  </entry>
  <entry>
    <title>美女吊带</title>
    <url>/2019/12/05/picture_girl_5/</url>
    <content><![CDATA[<p><img alt="吊带" data-src="https://ae01.alicdn.com/kf/H62097e7d2a68438d890af504ad3b23f1B.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/Hbe063b22a30045339fc4519f0209d17fp.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/Hb2639c4a6f844169a5584f241410ce68i.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/H251e366640cd47bb94e7a5487cece191X.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/Hb8953d955f1e4b2d9dd7efcbaf94d48eV.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/H7f5dd442106d4819ae2d6fcfbae98c66P.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/He5bbdb8a6fff4f899cd00d29bcf649efh.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/H3b6456ff30df401abf72d13bd11bee5ch.jpg"><br><img alt="吊带" data-src="https://ae01.alicdn.com/kf/H74c4fd7f60034279ae74b2f8de89ed44A.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>吊带</category>
      </categories>
  </entry>
  <entry>
    <title>美女俏皮</title>
    <url>/2019/12/05/picture_girl_4/</url>
    <content><![CDATA[<p><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/Hef7755f1b9d94bfda8971832f5ab0275z.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/H4caf11552bc9462495b5f9ea249d1204o.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/H42fae42664254cd7a0c6863ff9c44c04v.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/Ha55b1c020b5d4848b5d6b3bee8e4b844Z.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/H7f587cca2c2b48a2b186b0ee9b60aa16n.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/Hbb40b3fc278b4b2f96eed14e2206c050C.jpg"><br><img alt="俏皮" data-src="https://ae01.alicdn.com/kf/Hf3b1fe0071be46d0b3a330393f675426a.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>俏皮</category>
      </categories>
  </entry>
  <entry>
    <title>美女cosplay</title>
    <url>/2019/12/05/picture_girl_3/</url>
    <content><![CDATA[<p><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/H4f68e6a1a1be40719a5cf1fc2cc963352.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/He79cc1f7f49f49e89486a7d66617ea165.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/Hdedc78d8c8d342079196bd7669e26e351.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/H398d0b0278bf44fa9903848c69d49854n.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/Hf8ef79111a134e85a36821ce6ad2619ey.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/Hef622c6c912747a3acf1795bb1c49474z.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/H3c3041e1b5d0430fb986d074a9ae9f4eE.jpg"><br><img alt="cosplay" data-src="https://ae01.alicdn.com/kf/H66df658b23d7415f8e094a37ef6f4c04C.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>cosplay</category>
      </categories>
  </entry>
  <entry>
    <title>Odoo13-- js之颜色选择器的使用及扩展</title>
    <url>/2019/12/04/odoo13_7/</url>
    <content><![CDATA[<p>题目虽然是颜色选择器使用，但是本篇<del>小黄文会涉及到玉女心经…</del><br>咳咳， 本篇<strong>技术文章</strong>涉及到一些重要的姿势，某些看官一直要求我讲一讲有关js方面的姿势。<br>那么本篇大概会出现<strong>自定义Widget、Tree视图的渲染</strong>等姿势。<br>某些看官（尤其’小萝卜头’…）就不要那么吝啬了，1分钱都不够手机流量费。  </p><p>那下面就正式开始  </p><a id="more"></a>

<h2 id="颜色选择器的使用"><a href="#颜色选择器的使用" class="headerlink" title="颜色选择器的使用"></a>颜色选择器的使用</h2><p>Odoo 中关于颜色选择器的使用，有很多例子。这里就以产品属性为例子。<br>下面是定义了一个彩虹屁的属性，并在属性中设置了相关属性值<br><img alt="彩虹屁" data-src="https://ae01.alicdn.com/kf/H6d2b70f9bfb24f65ab0f0ffea59921f2A.jpg"><br>在创建属性值得时候，点击颜色时，会弹出一个颜色选择器的界面。如下<br><img alt="颜色选择器" data-src="https://ae01.alicdn.com/kf/H64827cad4c7d400d8372211a6c831b44B.jpg"></p>
<p>那么，这是如何实现的呢？进入下一个环境，剥丝抽茧，揭开神秘面纱。</p>
<h3 id="揭开选择器面纱"><a href="#揭开选择器面纱" class="headerlink" title="揭开选择器面纱"></a>揭开选择器面纱</h3><p>我们查看代码，发现字段定义如下。</p>
<p>在py文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_color = fields.Char(</span><br><span class="line">        string=<span class="string">'Color'</span>,</span><br><span class="line">        help=<span class="string">"Here you can set a specific HTML color index (e.g. #ff0000) to display the color if the attribute type is 'Color'."</span>)</span><br></pre></td></tr></table></figure>

<p>在xml文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"html_color"</span> <span class="attr">attrs</span>=<span class="string">"&#123;'column_invisible': [('parent.display_type', '!=', 'color')]&#125;"</span> <span class="attr">widget</span>=<span class="string">"color"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>由此可见，该字段是一个<code>Char</code>类型的字段，并且使用了一个<code>color</code>的<code>Widget</code>。<br>因此我们回归到问题， 这个<code>color</code>是什么玩意儿？我能自定义吗？</p>
<h3 id="color插件的定义"><a href="#color插件的定义" class="headerlink" title="color插件的定义"></a>color插件的定义</h3><p>文件路径： <code>odoo\addons\web\static\src\js\fields\field_registry.js</code><br>源码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">registry</span><br><span class="line">    .add(<span class="string">'abstract'</span>, AbstractField)</span><br><span class="line">    .add(<span class="string">'input'</span>, basic_fields.InputField)</span><br><span class="line">    .add(<span class="string">'integer'</span>, basic_fields.FieldInteger)</span><br><span class="line">    .add(<span class="string">'boolean'</span>, basic_fields.FieldBoolean)</span><br><span class="line">    .add(<span class="string">'date'</span>, basic_fields.FieldDate)</span><br><span class="line">    .add(<span class="string">'datetime'</span>, basic_fields.FieldDateTime)</span><br><span class="line">    .add(<span class="string">'daterange'</span>, basic_fields.FieldDateRange)</span><br><span class="line">    .add(<span class="string">'domain'</span>, basic_fields.FieldDomain)</span><br><span class="line">    .add(<span class="string">'text'</span>, basic_fields.FieldText)</span><br><span class="line">    .add(<span class="string">'list.text'</span>, basic_fields.ListFieldText)</span><br><span class="line">    .add(<span class="string">'html'</span>, basic_fields.FieldText)</span><br><span class="line">    .add(<span class="string">'float'</span>, basic_fields.FieldFloat)</span><br><span class="line">    .add(<span class="string">'char'</span>, basic_fields.FieldChar)</span><br><span class="line">    .add(<span class="string">'link_button'</span>, basic_fields.LinkButton)</span><br><span class="line">    .add(<span class="string">'handle'</span>, basic_fields.HandleWidget)</span><br><span class="line">    .add(<span class="string">'email'</span>, basic_fields.FieldEmail)</span><br><span class="line">    .add(<span class="string">'phone'</span>, basic_fields.FieldPhone)</span><br><span class="line">    .add(<span class="string">'url'</span>, basic_fields.UrlWidget)</span><br><span class="line">    .add(<span class="string">'CopyClipboardText'</span>, basic_fields.TextCopyClipboard)</span><br><span class="line">    .add(<span class="string">'CopyClipboardChar'</span>, basic_fields.CharCopyClipboard)</span><br><span class="line">    .add(<span class="string">'image'</span>, basic_fields.FieldBinaryImage)</span><br><span class="line">    .add(<span class="string">'kanban.image'</span>, basic_fields.KanbanFieldBinaryImage)</span><br><span class="line">    .add(<span class="string">'binary'</span>, basic_fields.FieldBinaryFile)</span><br><span class="line">    .add(<span class="string">'pdf_viewer'</span>, basic_fields.FieldPdfViewer)</span><br><span class="line">    .add(<span class="string">'monetary'</span>, basic_fields.FieldMonetary)</span><br><span class="line">    .add(<span class="string">'percentage'</span>, basic_fields.FieldPercentage)</span><br><span class="line">    .add(<span class="string">'priority'</span>, basic_fields.PriorityWidget)</span><br><span class="line">    .add(<span class="string">'attachment_image'</span>, basic_fields.AttachmentImage)</span><br><span class="line">    .add(<span class="string">'label_selection'</span>, basic_fields.LabelSelection)</span><br><span class="line">    .add(<span class="string">'kanban_label_selection'</span>, basic_fields.LabelSelection) <span class="comment">// deprecated, use label_selection</span></span><br><span class="line">    .add(<span class="string">'state_selection'</span>, basic_fields.StateSelectionWidget)</span><br><span class="line">    .add(<span class="string">'kanban_state_selection'</span>, basic_fields.StateSelectionWidget) <span class="comment">// deprecated, use state_selection</span></span><br><span class="line">    .add(<span class="string">'boolean_favorite'</span>, basic_fields.FavoriteWidget)</span><br><span class="line">    .add(<span class="string">'boolean_toggle'</span>, basic_fields.BooleanToggle)</span><br><span class="line">    .add(<span class="string">'statinfo'</span>, basic_fields.StatInfo)</span><br><span class="line">    .add(<span class="string">'percentpie'</span>, basic_fields.FieldPercentPie)</span><br><span class="line">    .add(<span class="string">'float_time'</span>, basic_fields.FieldFloatTime)</span><br><span class="line">    .add(<span class="string">'float_factor'</span>, basic_fields.FieldFloatFactor)</span><br><span class="line">    .add(<span class="string">'float_toggle'</span>, basic_fields.FieldFloatToggle)</span><br><span class="line">    .add(<span class="string">'progressbar'</span>, basic_fields.FieldProgressBar)</span><br><span class="line">    .add(<span class="string">'toggle_button'</span>, basic_fields.FieldToggleBoolean)</span><br><span class="line">    .add(<span class="string">'dashboard_graph'</span>, basic_fields.JournalDashboardGraph)</span><br><span class="line">    .add(<span class="string">'ace'</span>, basic_fields.AceEditor)</span><br><span class="line">    .add(<span class="string">'color'</span>, basic_fields.FieldColor);</span><br></pre></td></tr></table></figure>

<p>发现是在此处，将<code>basic_fields.FieldColor</code>注册成为一个名为<code>color</code>的widget插件<br>继续跟踪<code>basic_fields.FieldColor</code><br>文件路径： <code>odoo\addons\web\static\src\js\fields\basic_fields.js</code><br>源码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> FieldColor = AbstractField.extend(&#123;</span><br><span class="line">    template: <span class="string">'FieldColor'</span>,</span><br><span class="line">    events: _.extend(&#123;&#125;, AbstractField.prototype.events, &#123;</span><br><span class="line">        <span class="string">'click .o_field_color'</span>: <span class="string">'_onColorClick'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    custom_events: _.extend(&#123;&#125;, AbstractField.prototype.custom_events, &#123;</span><br><span class="line">        <span class="string">'colorpicker:saved'</span>: <span class="string">'_onColorpickerSaved'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Public</span></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @override</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getFocusableElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$(<span class="string">'.o_field_color'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Private</span></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @override</span></span><br><span class="line"><span class="comment">    * @private</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    _render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$(<span class="string">'.o_field_color'</span>).data(<span class="string">'value'</span>, <span class="keyword">this</span>.value)</span><br><span class="line">            .css(<span class="string">'background-color'</span>, <span class="keyword">this</span>.value)</span><br><span class="line">            .attr(<span class="string">'title'</span>, <span class="keyword">this</span>.value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Handlers</span></span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @private</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    _onColorClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mode === <span class="string">'edit'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> dialog = <span class="keyword">new</span> ColorpickerDialog(<span class="keyword">this</span>, &#123;</span><br><span class="line">                defaultColor: <span class="keyword">this</span>.value,</span><br><span class="line">                noTransparency: <span class="literal">true</span>,</span><br><span class="line">            &#125;).open();</span><br><span class="line">            dialog.on(<span class="string">'closed'</span>, <span class="keyword">this</span>, () =&gt; &#123;</span><br><span class="line">                <span class="comment">// we need to wait for the modal to execute its whole close function.</span></span><br><span class="line">                <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getFocusableElement().focus();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @private</span></span><br><span class="line"><span class="comment">    * @param &#123;OdooEvent&#125; ev</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    _onColorpickerSaved: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._setValue(ev.data.hex);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @override</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _onKeydown: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.which === $.ui.keyCode.ENTER) &#123;</span><br><span class="line">            ev.preventDefault();</span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">            <span class="keyword">this</span>._onColorClick(ev);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们发现，该插件使用的模板是<code>FieldColor</code>。继续查看<code>FieldColor</code>模板定义。<br>文件路径： <code>\odoo\addons\web\static\src\xml\base.xml</code><br>源码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">t</span> <span class="attr">t-name</span>=<span class="string">"FieldColor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"o_field_color"</span> <span class="attr">t-attf-tabindex</span>=<span class="string">"#&#123;widget.mode === 'edit' ? 0 : -1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，我们已经扒开了<code>color</code>这个<code>widget</code>的层层伪装了。<br>首先是定义了一个模板<code>FieldColor</code>。而模板中定义了一个button按钮，并且class属性为<code>o_field_color</code>（这很关键）<br>其次在js中对<code>AbstractField</code>这个抽象字段插件进行了扩展。<br>扩展步骤：<br>一、引入模板  使用 <code>template: &#39;FieldColor&#39;</code><br>二、定义相关事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">events: _.extend(&#123;&#125;, AbstractField.prototype.events, &#123;</span><br><span class="line">        <span class="string">'click .o_field_color'</span>: <span class="string">'_onColorClick'</span>,  <span class="comment">// 为class属性为 o_field_color的元素绑定click事件</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">custom_events: _.extend(&#123;&#125;, AbstractField.prototype.custom_events, &#123;</span><br><span class="line">        <span class="string">'colorpicker:saved'</span>: <span class="string">'_onColorpickerSaved'</span>, <span class="comment">// 自定义事件</span></span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure>

<p>重点， 此步骤(events)将模板中的按钮，绑定了事件。</p>
<p>三、重写<code>render</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$(<span class="string">'.o_field_color'</span>).data(<span class="string">'value'</span>, <span class="keyword">this</span>.value)  <span class="comment">// 为按钮设置值</span></span><br><span class="line">            .css(<span class="string">'background-color'</span>, <span class="keyword">this</span>.value)            <span class="comment">// 设置背景颜色</span></span><br><span class="line">            .attr(<span class="string">'title'</span>, <span class="keyword">this</span>.value);                     <span class="comment">// 设置title提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>render方法，是渲染字段的方法。在此处就重写渲染字段方法，则会被应用到前端。<br>小姿势：<br>在<code>render</code>方法中，会根据当前单据的打开模式（编辑，只读）会分别执行两个方法。<br><code>_renderEdit</code> 和 <code>readonly</code> （重点）。以后自定义可重写这两个方法。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mode === <span class="string">'edit'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._renderEdit();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.mode === <span class="string">'readonly'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._renderReadonly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四、点击事件执行_onColorClick方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_onColorClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mode === <span class="string">'edit'</span>) &#123;  <span class="comment">// 编辑模式</span></span><br><span class="line">            <span class="keyword">const</span> dialog = <span class="keyword">new</span> ColorpickerDialog(<span class="keyword">this</span>, &#123;  <span class="comment">// 创建一个颜色选择器对象，并打开</span></span><br><span class="line">                defaultColor: <span class="keyword">this</span>.value,</span><br><span class="line">                noTransparency: <span class="literal">true</span>,</span><br><span class="line">            &#125;).open();</span><br><span class="line">            dialog.on(<span class="string">'closed'</span>, <span class="keyword">this</span>, () =&gt; &#123;</span><br><span class="line">                <span class="comment">// we need to wait for the modal to execute its whole close function.</span></span><br><span class="line">                <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getFocusableElement().focus();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>可以看到在点击事件中这是创建并打开了一个颜色选择器的对话框。</p>
<p>五、关闭对话框事件_onColorpickerSaved方法。<br>此事件是自定义事件<code>custom_events</code>中的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_onColorpickerSaved: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._setValue(ev.data.hex);  <span class="comment">// 为当前元素设置值</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>到此为止，整个<code>color</code>插件的定义过程就是这样。</p>
<p>姿势就这些，那么接下来就是学以致用了。进入实战环节。  </p>
<h2 id="姿势实战"><a href="#姿势实战" class="headerlink" title="姿势实战"></a>姿势实战</h2><p>场景一：点击字段时候，弹出颜色选择器，给字段设置相关背景颜色。<br>裸<del>体代</del>码，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">odoo.define(<span class="string">'web_custom_color.AbstractField'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AbstractField = <span class="built_in">require</span>(<span class="string">'web.AbstractField'</span>);</span><br><span class="line"><span class="keyword">var</span> ColorpickerDialog = <span class="built_in">require</span>(<span class="string">'web.ColorpickerDialog'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"web.zoomodoo"</span>);</span><br><span class="line"></span><br><span class="line">AbstractField.include(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个点击事件</span></span><br><span class="line">    _onMyColorClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mode === <span class="string">'readonly'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// 设置默认颜色，如果xml中定义了背景色则使用</span></span><br><span class="line">            <span class="keyword">var</span> defaultColor = self.attrs.bg_color || <span class="string">'#fcfcfc'</span> ;</span><br><span class="line">            <span class="keyword">const</span> dialog = <span class="keyword">new</span> ColorpickerDialog(self, &#123; <span class="comment">//创建颜色选择器</span></span><br><span class="line">                defaultColor: defaultColor,</span><br><span class="line">                noTransparency: <span class="literal">true</span>,</span><br><span class="line">            &#125;).open();</span><br><span class="line">            dialog.on(<span class="string">'colorpicker:saved'</span>, self, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123; <span class="comment">// 关闭事件</span></span><br><span class="line">                self.attrs.bg_color = ev.data.hex;</span><br><span class="line">                self.$el.css(<span class="string">'background-color'</span>, ev.data.hex);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        self.$el.on(<span class="string">'click'</span>, self._onMyColorClick.bind(self)); <span class="comment">// 给字段绑定事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$el.css(<span class="string">'background-color'</span>, <span class="keyword">this</span>.attrs.bg_color || <span class="string">'#fcfcfc'</span>); <span class="comment">// 渲染背景色</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>耕耘收获：<br><img alt="自定义字段颜色选择器" data-src="https://ae01.alicdn.com/kf/H2d17e7f26f19486abd2c572285b0e7836.gif"></p>
<p>场景二： 给float类型字段，设置千分符<br>裸<del>体代</del>码，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> basic_fields = <span class="built_in">require</span>(<span class="string">'web.basic_fields'</span>);</span><br><span class="line"><span class="keyword">var</span> field_registry = <span class="built_in">require</span>(<span class="string">'web.field_registry'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FieldtoExponential = basic_fields.FieldFloat.extend(&#123;</span><br><span class="line">    _renderReadonly: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$el.text(<span class="keyword">this</span>.value.toExponential(<span class="number">3</span>)); <span class="comment">// 转换千分符</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">field_registry.add(<span class="string">'toExponential'</span>, FieldtoExponential);</span><br></pre></td></tr></table></figure>

<p>在xml中，给<code>float</code>字段添加一个<code>widget=&quot;toExponential&quot;</code></p>
<p>场景三： 在Tree视图中，给某些字段加上颜色区分（列区分，非行区分）。比如金额大于0的显示蓝色，小于0的显示红色。（红蓝发票）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 各位看官自己写吧，别偷懒。</span></span><br><span class="line"><span class="comment">// 姿势都已经掌握了， 总要自己实践吧。</span></span><br><span class="line"><span class="comment">// 技巧任君发挥。</span></span><br><span class="line"><span class="comment">// 不然，我也可以帮你实践...</span></span><br><span class="line"><span class="comment">// 就是，</span></span><br><span class="line"><span class="comment">// 我担心，</span></span><br><span class="line"><span class="comment">// 颜色选择器会默认给你选择----绿色</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>以上。<br>先了解，再找准，再开发。<br>– end –</p>
<p>看官，别吝啬啦！  </p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- Onchange方法的使用扩展</title>
    <url>/2019/12/04/odoo13_6/</url>
    <content><![CDATA[<h2 id="抛砖"><a href="#抛砖" class="headerlink" title="抛砖"></a>抛砖</h2><p>场景：<br>假设存在一张单据，如采购订单。该订单上有如下字段： 采购申请数量、采购批准数量、汇率、金额、价外税、含税金额、库存数量、累计金额、累计含税金额……<br>单据上有很多表示<code>数量类型</code>的字段，一般在录入单据时，对数据有合法性校验，如不能输入负数数量等等。<br>此时，我们可能会在<code>models.py</code>中写一个使用<code>api.onchange</code>装饰器装饰的方法。<br>在校验的字段很多的情况下，我们可能会写很多个<code>onchange</code>方法，或者写一个<code>onchange</code>方法但是装饰器中写很多字段参数。<br>那么问题来了，如果写很多个方法，未免太多余，因为都是校验负数。但是如果写一个方法，但是装饰器中添加很多参数，那么在某一字段新增一些逻辑时，要么在此方法中写，要么新写一个方法。又是很冗余。<br>所以，对于这种通用性的校验，是否有一个好的通用方法来写呢？  </p><a id="more"></a>
<p>各位看官，就请关上门，拉上窗，听我细细分说。  </p>
<p>关于<code>api.onchange</code>使用，请客官看之前文章的介绍。</p>
<h2 id="揭开-api-onchange-面纱"><a href="#揭开-api-onchange-面纱" class="headerlink" title="揭开 api.onchange 面纱"></a>揭开 api.onchange 面纱</h2><h3 id="api-onchange-定义"><a href="#api-onchange-定义" class="headerlink" title="api.onchange 定义"></a>api.onchange 定义</h3><p>文件路径： <code>\odoo\odoo\api.py</code><br>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="string">""" Return a decorator to decorate an onchange method for given fields.</span></span><br><span class="line"><span class="string">        Each argument must be a field name::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @api.onchange('partner_id')</span></span><br><span class="line"><span class="string">            def _onchange_partner(self):</span></span><br><span class="line"><span class="string">                self.message = "Dear %s" % (self.partner_id.name or "")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        In the form views where the field appears, the method will be called</span></span><br><span class="line"><span class="string">        when one of the given fields is modified. The method is invoked on a</span></span><br><span class="line"><span class="string">        pseudo-record that contains the values present in the form. Field</span></span><br><span class="line"><span class="string">        assignments on that record are automatically sent back to the client.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The method may return a dictionary for changing field domains and pop up</span></span><br><span class="line"><span class="string">        a warning message, like in the old API::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                'domain': &#123;'other_id': [('partner_id', '=', partner_id)]&#125;,</span></span><br><span class="line"><span class="string">                'warning': &#123;'title': "Warning", 'message': "What is this?", 'type': 'notification'&#125;,</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            If the type is set to notification, the warning will be displayed in a notification.</span></span><br><span class="line"><span class="string">            Otherwise it will be displayed in a dialog as default.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .. danger::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            Since ``@onchange`` returns a recordset of pseudo-records,</span></span><br><span class="line"><span class="string">            calling any one of the CRUD methods</span></span><br><span class="line"><span class="string">            (:meth:`create`, :meth:`read`, :meth:`write`, :meth:`unlink`)</span></span><br><span class="line"><span class="string">            on the aforementioned recordset is undefined behaviour,</span></span><br><span class="line"><span class="string">            as they potentially do not exist in the database yet.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            Instead, simply set the record's field like shown in the example</span></span><br><span class="line"><span class="string">            above or call the :meth:`update` method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .. warning::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ``@onchange`` only supports simple field names, dotted names</span></span><br><span class="line"><span class="string">            (fields of relational fields e.g. ``partner_id.tz``) are not</span></span><br><span class="line"><span class="string">            supported and will be ignored</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> attrsetter(<span class="string">'_onchange'</span>, args)</span><br></pre></td></tr></table></figure>

<p>各位看官，请看，是不是很简单， 很冰清玉洁啊， 朴实无华， 那么多的注释，只有一行代码。<br>啥？看不懂？<code>attrsetter</code>方法是啥？我好想听过<code>setattr</code><br>别急，继续看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attrsetter</span><span class="params">(attr, value)</span>:</span></span><br><span class="line">    <span class="string">""" Return a function that sets ``attr`` on its argument and returns it. """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> method: setattr(method, attr, value) <span class="keyword">or</span> method</span><br></pre></td></tr></table></figure>

<p><code>attrsetter</code>的作用是返回一个函数并且设置属性，而恰恰就是使用的<code>setattr</code>方法。<br>返回一个函数？设置属性？好熟悉… 是啥来着…  <strong>装饰器</strong>，可不是咋地，可不就是这玩意儿。<br>搜嘎，原来api.onchange是装饰器 是这么来的。返回了<code>onchange</code>方法  </p>
<p>那么结合上面api中的<code>onchange</code>方法，我们明白了，原来是就是给相应的字段设置了onchange属性。</p>
<p>继续看<code>models.py</code>中的<code>onchange</code>方法，路径<code>\odoo\odoo\models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(self, values, field_name, field_onchange)</span>:</span></span><br><span class="line">    <span class="string">""" Perform an onchange on the given field.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param values: dictionary mapping field names to values, giving the</span></span><br><span class="line"><span class="string">            current state of modification</span></span><br><span class="line"><span class="string">        :param field_name: name of the modified field, or list of field</span></span><br><span class="line"><span class="string">            names (in view order), or False</span></span><br><span class="line"><span class="string">        :param field_onchange: dictionary mapping field names to their</span></span><br><span class="line"><span class="string">            on_change attribute</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># this is for tests using `Form`</span></span><br><span class="line">    self.flush()</span><br><span class="line">    ...</span><br><span class="line">    省略</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>:param values: 当前状态下的记录的值<br>:param field_name: 改变的字段，可能是列表<br>:param field_onchange: 给字段设置on_change属性</p>
<p>所以我们已经掌握了基本姿势。<br>接下来就很简单了，我们只要继承<code>onchange</code>方法，做出相应修改即可。</p>
<h3 id="姿势要领"><a href="#姿势要领" class="headerlink" title="姿势要领"></a>姿势要领</h3><p>直接实战姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_check_onchange_field</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""返回onchange方法要校验的字段"""</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'amount'</span>, <span class="string">'quantity'</span>, <span class="string">'tax'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onchange</span><span class="params">(self, values, field_name, field_onchange)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> field_name <span class="keyword">in</span> self.get_check_onchange_field()：</span><br><span class="line">        <span class="keyword">if</span> getattr(self, field_name) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"数值不合法，不能为负数"</span>)</span><br><span class="line">    <span class="keyword">return</span> super(SaleOrder, self).onchange(values, field_name, field_onchange)</span><br></pre></td></tr></table></figure>

<p>以上</p>
<p>先了解，再找准，再开发。<br>– end –</p>
<hr>
<p>更新</p>
<p>有些看官反映还是没看懂，而且后面的实战有些东西没说清楚。请看另一篇补充文章：</p>
<p>传送门：<a href="/2019/12/07/odoo13_8/">《以onchange()为例，深入源码，一探究竟》</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-- 获取随机颜色值</title>
    <url>/2019/11/29/js_1/</url>
    <content><![CDATA[<p>通过JS，获取随机颜色的几种方式：  </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">0xffffff</span> ).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + ( <span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>&lt;&lt;<span class="number">0</span> ).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">256</span> );  </span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">")"</span>;  <span class="comment">// rgb 再指定一个参数，就可以设置透明度。 rgb(200,200,200,0.15)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ )&#123;</span><br><span class="line">        color += ( <span class="built_in">Math</span>.random()*<span class="number">16</span> | <span class="number">0</span> ).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colorValue = <span class="string">"0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f"</span>;</span><br><span class="line">    <span class="keyword">var</span> colorArray = colorValue.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ )&#123;</span><br><span class="line">        color += colorArray[ <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">16</span> ) ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 弹窗--自定义弹窗</title>
    <url>/2019/11/28/odoo13_5/</url>
    <content><![CDATA[<p>Odoo 的弹窗使用的是Dialog，无论是异常还是警告还是向导，都是一个Dialog对话框。<br>有时候，我们只想给用户一个提示。除了在点击按钮在xml中定义一个<code>confirm</code>提示信息外， 在代码中基本就是使用向导的方式来解决了，这无疑是个麻烦事。<br>上一篇中，我们介绍了如何使用延时提醒的方式。那本篇就扒一扒如何自定义一个Dialog。<br>各位看官，就请关上门，拉上窗，听我细细分说。  </p><a id="more"></a>
<h2 id="扒衣服、揭面纱"><a href="#扒衣服、揭面纱" class="headerlink" title="扒衣服、揭面纱"></a>扒衣服、揭面纱</h2><h3 id="Dialog-定义"><a href="#Dialog-定义" class="headerlink" title="Dialog 定义"></a>Dialog 定义</h3><p>Odoo使用的是前端框架有bootstrap框架，那我们的Dialog小姐就是运用此框架。<br>DIalog的定义在<code>odoo\addons\web\static\src\js\core\dialog.js</code>文件中。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">odoo.define(<span class="string">'web.Dialog'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> core = <span class="built_in">require</span>(<span class="string">'web.core'</span>);</span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">require</span>(<span class="string">'web.dom'</span>);</span><br><span class="line"><span class="keyword">var</span> Widget = <span class="built_in">require</span>(<span class="string">'web.Widget'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> Dialog = Widget.extend(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>由此可见， Dialog小姐也是继承自Widget。  </p>
<h3 id="扒衣服"><a href="#扒衣服" class="headerlink" title="扒衣服"></a>扒衣服</h3><p>相关参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">* @param &#123;Widget&#125; parent</span><br><span class="line">* @param &#123;<span class="built_in">Object</span>&#125; [options]</span><br><span class="line">* @param &#123;string&#125; [options.title=Odoo]</span><br><span class="line">* @param &#123;string&#125; [options.subtitle]</span><br><span class="line">* @param &#123;string&#125; [options.size=large] - <span class="string">'extra-large'</span>, <span class="string">'large'</span>, <span class="string">'medium'</span></span><br><span class="line">*        or <span class="string">'small'</span></span><br><span class="line">* @param &#123;boolean&#125; [options.fullscreen=<span class="literal">false</span>] - whether or not the dialog</span><br><span class="line">*        should be open <span class="keyword">in</span> fullscreen mode (the main usecase is mobile)</span><br><span class="line">* @param &#123;string&#125; [options.dialogClass] - <span class="class"><span class="keyword">class</span> <span class="title">to</span> <span class="title">add</span> <span class="title">to</span> <span class="title">the</span> <span class="title">modal</span>-<span class="title">body</span></span></span><br><span class="line"><span class="class">* @<span class="title">param</span> </span>&#123;jQuery&#125; [options.$content]</span><br><span class="line">*        Element which will be the $el, replace the .modal-body and <span class="keyword">get</span> the</span><br><span class="line">*        modal-body class</span><br><span class="line">* @param &#123;<span class="built_in">Object</span>[]&#125; [options.buttons]</span><br><span class="line">*        List <span class="keyword">of</span> button descriptions. Note: <span class="keyword">if</span> no buttons, a <span class="string">"ok"</span> primary</span><br><span class="line">*        button is added to allow closing the dialog</span><br><span class="line">* @param &#123;string&#125; [options.buttons[].text]</span><br><span class="line">* @param &#123;string&#125; [options.buttons[].classes]</span><br><span class="line">*        Default to <span class="string">'btn-primary'</span> <span class="keyword">if</span> only one button, <span class="string">'btn-secondary'</span></span><br><span class="line">*        otherwise</span><br><span class="line">* @param &#123;boolean&#125; [options.buttons[].close=<span class="literal">false</span>]</span><br><span class="line">* @param &#123;function&#125; [options.buttons[].click]</span><br><span class="line">* @param &#123;boolean&#125; [options.buttons[].disabled]</span><br><span class="line">* @param &#123;boolean&#125; [options.technical=<span class="literal">true</span>]</span><br><span class="line">*        If <span class="keyword">set</span> to false, the modal will have the standard frontend style</span><br><span class="line">*        (use this for non-editor frontend features)</span><br><span class="line">* @param &#123;jQueryElement&#125; [options.$parentNode]</span><br><span class="line">*        Element <span class="keyword">in</span> which dialog will be appended, by <span class="keyword">default</span> it will be</span><br><span class="line">*        <span class="keyword">in</span> the body</span><br><span class="line">* @param &#123;boolean|string&#125; [options.backdrop=<span class="string">'static'</span>]</span><br><span class="line">*        The kind <span class="keyword">of</span> modal backdrop to use (see BS documentation)</span><br><span class="line">* @param &#123;boolean&#125; [options.renderHeader=<span class="literal">true</span>]</span><br><span class="line">*        Whether or not the dialog should be rendered <span class="keyword">with</span> header</span><br><span class="line">* @param &#123;boolean&#125; [options.renderFooter=<span class="literal">true</span>]</span><br><span class="line">*        Whether or not the dialog should be rendered <span class="keyword">with</span> footer</span><br><span class="line">* @param &#123;function&#125; [options.onForceClose]</span><br><span class="line">*        Callback that triggers when the modal is closed by other means than <span class="keyword">with</span> the buttons</span><br><span class="line">*        e.g. pressing ESC</span><br></pre></td></tr></table></figure>

<p>我就不翻译了， 我相信大家都能看的懂，毕竟各位都是连日语都懂的人。  </p>
<h3 id="找准姿势"><a href="#找准姿势" class="headerlink" title="找准姿势"></a>找准姿势</h3><p>姿势要领：<br>自定义一个dialog，我们仍然使用上一篇中延时提醒的方式，定义一个客户端动作。<br>通过这个客户端动作，返回Dialog小姐。</p>
<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h3><p>在js中定义一个客户端动作，并注册。如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Dialog = <span class="built_in">require</span>(<span class="string">'web.Dialog'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AlertDialog</span>(<span class="params">parent, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>, action.params);</span><br><span class="line">    dialog.open();</span><br><span class="line">&#125;</span><br><span class="line">core.action_registry.add(<span class="string">"dialog"</span>, AlertDialog);</span><br></pre></td></tr></table></figure>

<h3 id="入戏"><a href="#入戏" class="headerlink" title="入戏"></a>入戏</h3><p>紧接着，我们就可以在后端代码中，任君发挥了。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dialog</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'ir.actions.client'</span>,</span><br><span class="line">        <span class="string">'tag'</span>: <span class="string">'dialog'</span>,</span><br><span class="line">        <span class="string">'params'</span>: &#123;</span><br><span class="line">            <span class="string">'title'</span>: _(<span class="string">'提示信息'</span>),</span><br><span class="line">            <span class="string">'$content'</span>: _(<span class="string">'&lt;h2 style="color:red; text-align:center; "&gt;123456789&lt;/h2&gt;'</span>),</span><br><span class="line">            <span class="string">'size'</span>: <span class="string">'medium'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在参数中。You Can 自定义内容（包括富文本格式），Also Can 设置大小。<br>因为我们已经掌握Dialog的参数了，此处参数只要与Dialog参数一直就可以。<br>弹窗可大可小， 任君安排。  </p>
<h3 id="耕耘收获"><a href="#耕耘收获" class="headerlink" title="耕耘收获"></a>耕耘收获</h3><p>还是看图：</p>
<p><img alt="耕耘收获" data-src="https://ae01.alicdn.com/kf/Hbff951b3224a4456aaa15df994c2fc88U.jpg"></p>
<p>以上</p>
<p>先了解，再找准，再开发。<br>– end –</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 通知--延时弹框的通知提醒</title>
    <url>/2019/11/27/odoo13_4/</url>
    <content><![CDATA[<p>Odoo 本身存在异常、错误等提示信息，一般是在后台代码中进行抛出UserError或者其它类型的错误。<br>这种情况就阻止了程序的正常进行。  </p><p>除此之外，还有<code>onchange()</code>方法返回的弱警告提醒，此时并不会中断程序。  </p><p>那么除却以上熟为人知的提醒，还有类似于界面右上角的自动延时的通知提醒。如：必填字段没有填，会有类似的提醒  </p><a id="more"></a>


<h2 id="重点姿势"><a href="#重点姿势" class="headerlink" title="重点姿势"></a>重点姿势</h2><h3 id="姿势一、前端控制（即js大法）"><a href="#姿势一、前端控制（即js大法）" class="headerlink" title="姿势一、前端控制（即js大法）"></a>姿势一、前端控制（即js大法）</h3><p>显示通知的最常见方法是使用ServiceMixin的两种方法：<br><code>do_notify（title，message，sticky，className）</code>和 <code>do_warn（title，message，sticky，className）</code>  </p>
<p>参数说明:<br>title：字符串。这将显示在顶部作为标题。<br>message：字符串，通知的内容。<br>sticky：布尔值，可选。如果为true，则通知将一直保留到用户将其关闭为止。否则，通知将在短暂的延迟后自动关闭。<br>className：字符串，可选。这是一个CSS类名称，它将自动添加到通知中。默认是<code>bg-warning</code>。  </p>
<p>实战姿势：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.do_notify(_t(<span class="string">"Success"</span>), _t(<span class="string">"Your signature request has been sent."</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.do_warn(_t(<span class="string">"Error"</span>), _t(<span class="string">"Filter name is required."</span>));</span><br></pre></td></tr></table></figure>

<h3 id="姿势二、后端控制（python大法）"><a href="#姿势二、后端控制（python大法）" class="headerlink" title="姿势二、后端控制（python大法）"></a>姿势二、后端控制（python大法）</h3><p>只需要在模型中定义一个方法，返回一个客户端动作。<br>其中<code>tag</code>指定为<code>display_notification</code>。再指定参数<code>params</code>。<br>参数与js使用的参数方式相同。  </p>
<p>直接上姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_notification</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'ir.actions.client'</span>,</span><br><span class="line">        <span class="string">'tag'</span>: <span class="string">'display_notification'</span>,</span><br><span class="line">        <span class="string">'params'</span>: &#123;</span><br><span class="line">            <span class="string">'title'</span>: _(<span class="string">'Success'</span>),</span><br><span class="line">            <span class="string">'message'</span>: _(<span class="string">'Your signature request has been sent.'</span>),</span><br><span class="line">            <span class="string">'sticky'</span>: <span class="literal">True</span>, <span class="comment">#不会延时关闭，需要手动关闭</span></span><br><span class="line">            <span class="string">'className'</span>: <span class="string">'bg-danger'</span> <span class="comment"># 红色背景</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>以上<br>–end–<br>祝大家熟练的使用姿势并运用！</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 代码性能分析</title>
    <url>/2019/11/23/odoo13_3/</url>
    <content><![CDATA[<p>最近有些小伙伴总是问我代码这么写行不行，性能怎么样，balabala……</p><p>其实Odoo本身已经给我们提供了分析工具<code>Profile</code><br>下面就介绍一下<code>profile</code></p><h2 id="profile的使用"><a href="#profile的使用" class="headerlink" title="profile的使用"></a>profile的使用</h2><p>profile的定义位于 odoo.tools目录下的 profile.py 和 misc.py文件。小伙伴请自行阅读源码。</p><h3 id="姿势一：-Graph-a-method"><a href="#姿势一：-Graph-a-method" class="headerlink" title="姿势一： Graph a method"></a>姿势一： Graph a method</h3><a id="more"></a>


<p>以Graph形式的代码分析，就是为执行的方法生成图形。  </p>
<p>标准姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.misc <span class="keyword">import</span> profile</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">@profile('/temp/prof.profile')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mymethod</span><span class="params">(...)</span></span></span><br></pre></td></tr></table></figure>

<p>这个性能工具在misc包中，因此需要从那里进行导入。<br>它会生成一个进一步生成图形文件的包含统计数据的文件。<br>要使用这个性能工具，你需要传递文件路径来作为参数。<br>在调用该函数时，它会在给定位置生成一个文件。<br>参见下例，它会在桌面生成一个make_available.prof文件  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.misc <span class="keyword">import</span> profile</span><br><span class="line">...</span><br><span class="line"><span class="meta">@profile('/Users/parth/Desktop/make_available.profile')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_available</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> self.state != <span class="string">'lost'</span>:</span><br><span class="line">    self.write(&#123;<span class="string">'state'</span>: <span class="string">'available'</span>&#125;)</span><br><span class="line">    self.env[<span class="string">'res.partner'</span>].create(&#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'email'</span>: <span class="string">'test@ada.asd'</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>在调用make_available方法时，它会在桌面生成一个文件。要将这个数据转化为图形数据，需要安装gprof2dot工具，然后执行给定的命令来生成图形：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gprof2dot -f pstats -o /Users/parth/Desktop/prof.xdot /Users/parth/Desktop/make_available.prof</span><br></pre></td></tr></table></figure>

<p>这条命令会在桌面上生成prof.xdot 文件。然后，你可以使用下面的命令来通过xdot显示图形  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xdot /Users/parth/Desktop/prof.xdot</span><br></pre></td></tr></table></figure>

<h3 id="姿势二：-Log-a-method"><a href="#姿势二：-Log-a-method" class="headerlink" title="姿势二： Log a method"></a>姿势二： Log a method</h3><p>以Log形式的代码分析，就是为执行的方法生成通过日志方式输出。  </p>
<p>标准姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.profiler <span class="keyword">import</span> profile</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mymethod</span><span class="params">(...)</span>:</span></span><br></pre></td></tr></table></figure>

<p>实战姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; set(self.mapped(<span class="string">'state'</span>)):</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(</span><br><span class="line">            <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">        ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(<span class="keyword">lambda</span> order: order.partner_id <span class="keyword">not</span> <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">        order.message_subscribe([order.partner_id.id])</span><br><span class="line">    self.write(&#123;</span><br><span class="line">        <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">        <span class="string">'date_order'</span>: fields.Datetime.now()</span><br><span class="line">    &#125;)</span><br><span class="line">    self._action_confirm()</span><br><span class="line">    <span class="keyword">if</span> self.env.user.has_group(<span class="string">'sale.group_auto_done_setting'</span>):</span><br><span class="line">        self.action_done()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>结果  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2019-11-23 05:58:47,018 187644 INFO 13 odoo.tools.profiler:  </span><br><span class="line">calls     queries   ms  </span><br><span class="line">sale.order -------------------------- F:\WORK\Odoo13\odoo\addons\sale\models\sale.py, 727  </span><br><span class="line"></span><br><span class="line">1         0         1.0           @profile  </span><br><span class="line">                                  def action_confirm(self):  </span><br><span class="line">1         10        49.42             <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; <span class="built_in">set</span>(self.mapped(<span class="string">'state'</span>)):  </span><br><span class="line">                                          raise UserError(_(</span><br><span class="line">                                              <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">                                          ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line">3         13        54.82             <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(lambda order: order.partner_id not <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">1         13        46.88                 order.message_subscribe([order.partner_id.id])</span><br><span class="line">1         0         0.0               self.write(&#123;</span><br><span class="line">1         0         0.0                   <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">1         37        330.79                <span class="string">'date_order'</span>: fields.Datetime.now()</span><br><span class="line">                                      &#125;)</span><br><span class="line">1         20        70.31             self._action_confirm()</span><br><span class="line">1         1         0.96              <span class="keyword">if</span> self.env.user.has_group(<span class="string">'sale.group_auto_done_setting'</span>):</span><br><span class="line">                                          self.action_done()</span><br><span class="line">1         0         0.0               <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line">Total:</span><br><span class="line">1         94        554.17</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>当都是男程序员们“神仙打架”的研发组来了一个女实习生...</title>
    <url>/2019/11/23/farmercodethings_5/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title="  "></a><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg">  </h2><p><img alt data-src="https://ae01.alicdn.com/kf/H53bf02da46154fbe802b4023aeb44172S.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2e257128671e4085bf4f6dd3d83618e8G.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H884b8efe170c4d48986247a33d9bb38cL.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9da7466159e84e2c870b0e4a47162f0aV.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H09bdea9b53894573a1011755f90f2ca3p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9d7c2c8fb94340ecbecfe575803e4667I.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H73d5677241a64325a4cf2d489a79f3678.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4ca443cdce9547a0a240e5f51d64b74aL.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H5e27c0627f654c929453446058c9d5db8.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hbe2159d1bb224b7c9b2eb149a79c33253.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hf78be4f3c13b4f58a93e8950619f0e0ca.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hee3c28e6ffc64315ab840c9a926ac37fY.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/He9db3e110e964c8fb0f642419a98da04j.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha4cc4a95832a466ea94a156c3226aa05g.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4d8e9d4e8c0a4a3eab84bc95f1ea442fb.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb6783f5f977548718717249c379cc56cS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H33e3441e29a0493b987125ef2c5b0a666.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H38bdae4d8495446a879158dde61c5742S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H24167f2744ce44d0b2d42c47189e1989I.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hcba69ce6b8d4462a98e2e4c703844f0fG.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hab1e3ffeff5a40e39dd26decd2877483v.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H0a4480b38f7e48ca8d2d06f277078f9eB.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H259b7aba5d174a9eb8b3696825c69c86L.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H260f34581a1e41b1a1b1867b0def261aS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H18515b18c2a34cb586c664f748182c1c0.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H88fcfecf8bba4a41a7f13da3401060caQ.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hc4153a9c7ec14c3ebee47efaf88af0b1U.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6682d67d54c645029af0051ecfb38fa6y.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/He9edb86bcb254a41a74b5f5014b457d7O.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hcaf437e29f6149e18f462214c2f0df60w.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H8d51d4f061654fc3b26fe2121ab276c1g.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H3df7afeb99db400fbdb32f692ca37e8fg.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H13a29949d9c3487e9a3f00a95ffb22b5o.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H026d3217acc54f57a463cab60e7a26d11.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha72284873f7945a49a6cee438bd6978aF.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb2932c80f4dc418a9444d846e45b8232P.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H983b707f8d0e482aa3d40c7cc9280908M.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hfcefab1d835145d78b01e311a8267ceer.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb59874facade43e9aa4a7ac3c0b546bcP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9a5922c2518a490ea65ec2288275022c4.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H04af9f4ec87b4dd2a0800444844b323fJ.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4f43134119d54c93ba3c5ae3a76acb6fN.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hf3ef49457b174564aebeee3d568ff50d3.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha31ee477ea8e42e598316f8edf6f7b3dE.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hc8524d685a144363a6a660e95485f3cbS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H111536872d4a45e6a4273e9c27f5f239i.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H90653e96170f4d858f0caf695ffed5f1p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2fc40154308e464891837c006308bac8k.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hba183164283e46bb9225124288c59892B.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd3d071e173ed467496eb1334fd954db8o.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H83c1de7630b94aaf8b81e1e16a18b51b6.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H38c49f07cde846cba7cd2cbec191a8c5d.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H97ae512ad9474f68a102f50101b6d76fp.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6c52928c8ef74ed682a48b660fac77837.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6dd15c6c61f841adb68b39a962c6ef20U.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2d085e949fa34824b1c5b49f11c58b05B.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H348db1c65f4945059c2d0fc95426e3e56.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd9112e3f677941d48a8db7731048524fb.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H8974e9c03eb94061a6f4ed988e3a8b71N.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H69131c376acb4a1ab3c328709e9040dcf.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hbc4b3dbe57244eb48ef0eff7bd93e0faZ.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha1cf4c6cacad43158b7525670610f05eP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Head075c4cb864258b03771076a1b39f5p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H379d9b4a056e42d0bda1c90326ed2a4dK.jpg"><br>最终话<br><img alt data-src="https://ae01.alicdn.com/kf/Hcdd137dc158943338100cdee03b866c5c.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd9c69558e7004cf2868be02e42796d4f3.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H78060c924f334da6880a55add681239cP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H189cd8cae3f84a2f838cc9cdf3ec6e5c8.jpg"></p><p>成长是一个动态的过程…<br>再牛逼的职场人，都是从实习生成长起来的。<br>奇葩的实习生，可能让人心累又无奈；<br>厉害的实习生，会让人感叹后生可畏。<br>作为职场相对“弱势”的群体，<br>在适当允许犯错的情况下，给予实习生正确的指导；<br>而不是单纯压榨他们。<br>实习生也应该抓住机会表现自己，<br>毕竟，竞争激烈的职场不是象牙塔。  </p><p>最后，“千万不要招实习生”只是一句善意的玩笑，嘻嘻~  </p><a id="more"></a>












<p>欢迎各位实习生多来互联网公司体验体验！  </p>
<p>-END-</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>二逼互联网公司现形记，看看你的公司中了几条？</title>
    <url>/2019/11/23/farmercodethings_4/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title="  "></a><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg">  </h2><p>来源：西二旗生活指北（ID：ShelchiLifeGuide）<br>作者：景岁  </p><p>这些年，<br>随着互联网行业的快速发展，<br>很多大大小小的互联网公司涌现了出来。<br>这些公司里，<br>有的发展了很多年，<br>规章制度已经很成熟了，<br>简称普通公司，<br>有的虽然不太成熟，<br>但是却心怀梦想和对员工的关爱，<br>俗称文艺公司，<br>还有的，<br>经常爆出各种奇葩的新闻，<br>简称二逼公司。<br>今天指北就带大家简单盘点一下，<br>这三种互联网公司的区别——  </p><a id="more"></a>

<h2 id="午休"><a href="#午休" class="headerlink" title="午休"></a>午休</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Hc7f406eaa60341cfb7d5fce3c3ac73fb1.jpg"></p>
<h2 id="零食"><a href="#零食" class="headerlink" title="零食"></a>零食</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H62a34b865e094f4d873ea338d97bd40am.jpg"></p>
<h2 id="座椅"><a href="#座椅" class="headerlink" title="座椅"></a>座椅</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H1f62adaa20db431a8e6eb9a86b8ced44F.jpg"></p>
<h2 id="卫生间"><a href="#卫生间" class="headerlink" title="卫生间"></a>卫生间</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H3be419006dc8464a925e6b038ebc8b3fg.jpg"></p>
<h2 id="团建"><a href="#团建" class="headerlink" title="团建"></a>团建</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H300bbc261e44420ba23722dc256cafe1p.jpg"></p>
<h2 id="年会奖品"><a href="#年会奖品" class="headerlink" title="年会奖品"></a>年会奖品</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H0b08987aea6a4b70b589379ede038a18n.jpg"></p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H73da1298110240b18d1b376e7e7a71f7L.jpg"></p>
<h2 id="工资"><a href="#工资" class="headerlink" title="工资"></a>工资</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H85834c6d40e14e21914171241264e3caF.jpg"></p>
<h2 id="冲业绩"><a href="#冲业绩" class="headerlink" title="冲业绩"></a>冲业绩</h2><p><img alt data-src="https://ae01.alicdn.com/kf/He8bc5f780fb2445e9adcd580e7b7337cQ.jpg"></p>
<h2 id="微信群"><a href="#微信群" class="headerlink" title="微信群"></a>微信群</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H7857250280fb47d2b9a2cde3bd2789c5m.jpg"></p>
<h2 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Hfe21359bcc6d43f5bf17bbf8742f05a5L.jpg"></p>
<h2 id="办公环境"><a href="#办公环境" class="headerlink" title="办公环境"></a>办公环境</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H88ec548a56924b2ea1d346677319b850c.jpg"></p>
<p>刚来互联网的时候，<br>感觉每个互联网公司都是文艺公司，<br>后来慢慢地发现，<br>大部分互联网公司其实都是普通公司，<br>然而这几年不知为什么，<br>二逼公司越来越多，<br>各种奇葩的新闻涌现了出来，<br>比如低俗年会、体罚员工、不切实际的KPI等等，<br>简直防不胜防。<br>不过互联网行业毕竟还在成长，<br>相信经过时间的洗练，<br>大部分公司会越来越正常、越来越完善吧。  </p>
<p>-END-</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>揭秘 | 程序员突然离职，真相令人扎心！</title>
    <url>/2019/11/23/farmercodethings_3/</url>
    <content><![CDATA[<p><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg"></p><hr><p><img alt data-src="https://ae01.alicdn.com/kf/H790f9e547cab4e41814f392dbd660d2db.jpg"></p><p>这是我毕业后的第一份工作…<br>面试时，HR小姐姐告诉我…  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H8a5aeba73c784ffdaf317c28456b9d8dK.jpg"></p><p>然鹅…我入职之后才发现：<br>对标阿里的只有加班强度<br>对标华为的只有狼性文化<br>对标百度的，额，没有对标百度  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H791b4a73ca7a44a88057fef842738d42Y.jpg"></p><p>同事们有的住在海淀区、有的住在朝阳区，<br>作为刚毕业的一枚“穷”学生，<br>我只能住在郊区，<br>一小时的地铁，<br>清晰的“分割”了生活和工作  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H604465a55e0e4b3c931cfcb4f34f51deZ.jpg"></p><p>双休是有的，但也就是换个地方加班…</p><a id="more"></a>









<p><img alt data-src="https://ae01.alicdn.com/kf/H4fe4b781356d490fa06943cbe4c20b2fG.jpg"></p>
<p>小伙伴的境遇好像也类似，<br>约饭渐渐变成了奢望…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H1997ed25e5ab4493a021994cbed6d254A.jpg"></p>
<p>好不容易凑到一起，基本也都带着电脑…</p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H27281680802148638779d6996cfb8637o.jpg"></p>
<p>有些事情，我一直没想明白，<br>为什么迟到一分钟会扣钱，<br>而加班6小时却没有加班费？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H9da655bb36eb4f7d8bae18abbe3a264eU.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H27750a2094a748b289b9ef3e08e07806J.jpg"></p>
<p>为什么加班把项目推上线没有奖金，<br>而写出一个Bug却会被惩罚？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hcd410616c6a54a4ebf129c16336a9ac4P.jpg"></p>
<p>工作一段时间后，我变了很多…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H78411e7d95e54c5da239f72c683ab40dm.jpg"></p>
<p>不仅是我，我入职时心仪的妹子，也变了  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hc7cb5c5b98fd4bb0a836d1ec50042701t.jpg"></p>
<p>哈，苍天饶过谁呢？<br>不，有些东西不会变…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H25c09580b0d748328aa77db7ecb86850K.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H02c3b1ec5194411d8317e7a3666a35f5t.jpg"></p>
<p>我离职的冲动越来越强，<br>但是，老板总在关键时刻“指点”我，<br>好吧，也可能是“指指点点”…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hd854dba43b1f47cb8e1b21e5ed5eeccdt.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hd3531ecd25624484a98be932afeb2d8e4.jpg"></p>
<p>有时候，HR也会说…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H68d8cfb273dc45a9935ee437e07429c7N.jpg"></p>
<p>有时候，我会问自己：这样的日子，什么时候是个头呢？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb9cafff1a5434c4ab79afa3968b066b2z.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb6da8210dd4b4457b39ad9c8d12141c6U.jpg"></p>
<p>终于有一天…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H8ed2866965264f83a27a58a7596bcedf2.jpg"></p>
<p>在走出写字楼的一瞬间，我才发现：<br>天也忒蓝了，<br>树也忒绿了，<br>阳光也忒明媚了，<br>生活也忒美好了。<br>于是，我决定…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb4332ce9a3bd480dbfb07a5a99b3c00ej.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4b23d214762e4b5f83c3bff59d624460s.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H42293e2fe8a649a085af247fa5d50f97r.jpg"></p>
<p>从西山回来之后…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H5911bcdfec934502a029ff61c276b3849.jpg"></p>
<p>当然，以上皆为虚构，如有雷同，表示同情！<br>-END-<br>转载声明：本文转载自「程序员吴小胖」。  </p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网公司忽悠员工的黑话</title>
    <url>/2019/11/20/farmercodethings_2/</url>
    <content><![CDATA[<p>据说每个互联网公司都有一些心照不宣的黑话，一起欣赏↓</p><h4 id="招聘时"><a href="#招聘时" class="headerlink" title="招聘时"></a>招聘时</h4><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/Hfbb5ec649cf741b4bac39062e7c15ec3x.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H7cb0e62cc51d438ebd2efb2f342fe8b5i.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/Hedb7ea63218f40708882d0227a8f0a6ea.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H636d01eefe0e49fa9f6f439f9ed5bb7eC.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H9ba62f9fc7df4968948413eed0b0909co.jpg"></p><h4 id="老板"><a href="#老板" class="headerlink" title="老板"></a>老板</h4><p>市场很大 = 我还不知道怎么赚钱<br>有一定的用户基础 = 建立了 QQ 群和微信群<br>自主研发的系统 = XXX 开源代码二次开发的<br>采用了大数据技术 = Nginx 日志开起来了，怎么用以后再说<br>采用了云技术 = 买了几台 ECS<br>……  </p><h4 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h4><p>在吗？= 有个需求需要改一下<br>没有我要的那种感觉 = 抄下苹果<br>我下去再确认一下 = 这个老子没想到，别说了<br>设计应该大道至简 = 复杂的我也不会<br>商业模式要形成闭环 = 放东西线上卖<br>……</p><a id="more"></a>







<h4 id="程序猿"><a href="#程序猿" class="headerlink" title="程序猿"></a>程序猿</h4><p>在吗？= 今天做不完<br>你这个需求不清晰 = 我不想做<br>目前技术实现不了 = 我不想做<br>现在服务器性能跟不上 = 我不想做<br>这个太复杂了 = 我不想做<br>……</p>
<p><strong>你品，你细品！</strong></p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- api装饰器详解</title>
    <url>/2019/11/20/odoo13_2/</url>
    <content><![CDATA[<p>最近有些小伙伴对Odoo的api中的装饰器总是有些误区，或者使用方式不对。导致结果和预想的不一致。</p><p>那么可以肯定的说，那是你使用姿势的问题。下面且听我讲解姿势，如：老汉推车…… 咳咳，跑偏了。</p><h2 id="api装饰器种类"><a href="#api装饰器种类" class="headerlink" title="api装饰器种类"></a>api装饰器种类</h2><h3 id="姿势一：-api-model"><a href="#姿势一：-api-model" class="headerlink" title="姿势一： @api.model"></a>姿势一： @api.model</h3><p>装饰一个记录样式的方法，其中<code>self</code>是一个记录集，但其内容无关紧要，仅模型相关。<br>即在记录行方式下装饰一个内容不明确、但模型明确的方法。<br>举个姿势：</p><a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>特别提示，此姿势应用在<code>create</code>方法中，会给<code>create</code>方法使用默认的装饰器<code>model_create_single</code>  </p>
<h3 id="姿势二：-api-onchange-args"><a href="#姿势二：-api-onchange-args" class="headerlink" title="姿势二： @api.onchange(*args)"></a>姿势二： @api.onchange(*args)</h3><p>装饰给定字段的onchange方法。就是当字段发生改变时，触发绑定的函数。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.onchange('partner_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_partner</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.message = <span class="string">"Dear %s"</span> % (self.partner_id.name <span class="keyword">or</span> <span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<p>在该字段出现的表单视图中，修改给定字段之一时将调用该方法。<br>该姿势还可应用于<strong>动态domain、警告提示</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.onchange('partner_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_partner</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'domain'</span>: &#123;<span class="string">'other_id'</span>: [(<span class="string">'partner_id'</span>, <span class="string">'='</span>, partner_id)]&#125;,</span><br><span class="line">            <span class="string">'warning'</span>: &#123;<span class="string">'title'</span>: <span class="string">"Warning"</span>, <span class="string">'message'</span>: <span class="string">"What is this?"</span>, <span class="string">'type'</span>: <span class="string">'notification'</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>注意：<br>    1.如果类型设置为通知，则警告将显示在通知中。否则，它将默认显示在对话框中。<br>    2.由于<code>@ onchange</code>返回伪记录的记录集， 因此调用任何一种CRUD方法的行为是不确定的，因为它们可能尚不存在于数据库中。相反，只需如示例中所示设置记录的字段，或调用：meth：<code>update</code>方法。<br>    3.<code>@ onchange</code>仅支持简单的字段名称，点分名称 （关系字段的字段，例如``partner_id.tz’’）不支持，将被忽略<br>    4.表单视图中一定要存在字段，否则不调用  </p>
<h3 id="姿势三：-api-constrains-args"><a href="#姿势三：-api-constrains-args" class="headerlink" title="姿势三： @api.constrains(*args)"></a>姿势三： @api.constrains(*args)</h3><p>约束检查装饰器。每个参数必须是一个字段名称。<br>在已修改命名字段之一的记录上调用。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.constrains('name', 'description')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_description</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> record.name == record.description:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"Fields name and description must be different"</span>)</span><br></pre></td></tr></table></figure>

<p>注意：<br>    1、<code>@ constrains</code>仅支持简单的字段名称，点分名称（关系字段的字段，例如<code>partner_id.customer</code>）不支持，将被忽略<br>    2、仅在create或write调用中才触发<code>@ constrains</code>。这意味着视图中不存在的字段不会触发调用  </p>
<h3 id="姿势四：-api-depends-args"><a href="#姿势四：-api-depends-args" class="headerlink" title="姿势四： @api.depends(*args)"></a>姿势四： @api.depends(*args)</h3><p>返回一个装饰器，该装饰器指定<code>compute</code>方法的字段相关性（对于新型函数字段）。<br>每个参数必须是字段或者一个由点号分隔的字段名称序列组成的字符串。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pname = fields.Char(compute=<span class="string">'_compute_pname'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.depends('partner_id.name', 'partner_id.is_company')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_pname</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> record.partner_id.is_company:</span><br><span class="line">            record.pname = (record.partner_id.name <span class="keyword">or</span> <span class="string">""</span>).upper()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record.pname = record.partner_id.name</span><br></pre></td></tr></table></figure>

<h3 id="姿势五：-api-depends-context-args"><a href="#姿势五：-api-depends-context-args" class="headerlink" title="姿势五： @api.depends_context(*args)"></a>姿势五： @api.depends_context(*args)</h3><p>返回一个装饰器，该装饰器指定非存储的<code>compute</code>方法。每个参数都是上下文的键<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = fields.Float(compute=<span class="string">'_compute_product_price'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.depends_context('pricelist')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_product_price</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> product.env.context.get(<span class="string">'pricelist'</span>):</span><br><span class="line">            pricelist = self.env[<span class="string">'product.pricelist'</span>].browse(product.env.context[<span class="string">'pricelist'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pricelist = self.env[<span class="string">'product.pricelist'</span>].get_default_pricelist()</span><br><span class="line">        product.price = pricelist.get_products_price(product).get(product.id, <span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>

<p>注意：<br>    所有依赖项必须是可哈希的。以下按键有特殊<br>    支持：<br>         -<code>force_company</code>（上下文值或当前公司ID），<br>         -<code>uid</code>（当前用户ID和超级用户标志），<br>         -<code>active_test</code>（env.context中的值或field.context中的值）。  </p>
<h3 id="姿势六：-api-returns-model-downgrade-None-upgrade-None"><a href="#姿势六：-api-returns-model-downgrade-None-upgrade-None" class="headerlink" title="姿势六： @api.returns(model, downgrade=None, upgrade=None)"></a>姿势六： @api.returns(model, downgrade=None, upgrade=None)</h3><p>用于返回<code>model</code>实例的一个装饰器<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@model</span></span><br><span class="line"><span class="meta">@returns('res.partner')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_partner</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">    ...     <span class="comment"># return some record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output depends on call style: traditional vs record style</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.traditional</span></span><br><span class="line">partner_id = model.find_partner(cr, uid, arg, context=context)</span><br><span class="line"><span class="comment"># 2.record style</span></span><br><span class="line">recs = model.browse(cr, uid, ids, context)</span><br><span class="line">partner_record = recs.find_partner(arg)</span><br></pre></td></tr></table></figure>

<h3 id="姿势七：-api-model-create-multi-method"><a href="#姿势七：-api-model-create-multi-method" class="headerlink" title="姿势七： @api.model_create_multi(method)"></a>姿势七： @api.model_create_multi(method)</h3><p>装饰一个采用字典列表并创建多个记录的方法。 可以使用单个字典或列表的形式调用该方法。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model_create_multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, vals_list)</span>:</span></span><br><span class="line">    self._check_create()</span><br><span class="line">    <span class="keyword">return</span> super(ProductionLot, self).create(vals_list)</span><br><span class="line"></span><br><span class="line">record = model.create(vals)</span><br><span class="line">records = model.create([vals, ...])</span><br></pre></td></tr></table></figure>

<h3 id="姿势八：-api-model-create-single-method"><a href="#姿势八：-api-model-create-single-method" class="headerlink" title="姿势八： @api.model_create_single(method)"></a>姿势八： @api.model_create_single(method)</h3><p>装饰一个采用字典并创建单个记录的方法。 默认是这个。</p>
<h3 id="姿势九：-api-multi-和-api-one-在Odoo13-已经阉割"><a href="#姿势九：-api-multi-和-api-one-在Odoo13-已经阉割" class="headerlink" title="姿势九： @api.multi 和 @api.one 在Odoo13 已经阉割"></a>姿势九： @api.multi 和 @api.one 在Odoo13 已经阉割</h3><hr>
<p>以上为Odoo13开发中常用的所有的api装饰器了。<br><strong>祝大家早点掌握姿势，实践出真理。实在不行就换个姿势，再来一次。</strong></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 控制tree视图动态显示隐藏列以及多行编辑的方式</title>
    <url>/2019/11/18/odoo13_1/</url>
    <content><![CDATA[<p>如题： Odoo13 新增了许多特性，如动态显示隐藏列，多行编辑。</p>
<a id="more"></a>
<p>动态显示列，只需要在<code>tree</code>视图中定义字段时候，加上 optional 参数即可</p>
<p>多行编辑，只需要在<code>tree</code>视图定义 multi_edit=”1”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"view_repair_order_tree"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>repair.tree<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>repair.order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree</span> <span class="attr">string</span>=<span class="string">"Repairs order"</span> <span class="attr">multi_edit</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">decoration-muted</span>=<span class="string">"state in ('done','cancel')"</span> <span class="attr">decoration-info</span>=<span class="string">"state=='draft'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_id"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_qty"</span> <span class="attr">optional</span>=<span class="string">"hide"</span> <span class="attr">string</span>=<span class="string">"Quantity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_uom"</span> <span class="attr">string</span>=<span class="string">"Unit of Measure"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"user_id"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"partner_id"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"address_id"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"guarantee_limit"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"location_id"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"company_id"</span> <span class="attr">groups</span>=<span class="string">"base.group_multi_company"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"activity_exception_decoration"</span> <span class="attr">widget</span>=<span class="string">"activity_exception"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/Hc21fedad81d343ef8d5eee440e5a28cbT.jpg"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- 输出样式详解</title>
    <url>/2019/11/18/python_1/</url>
    <content><![CDATA[<p>控制台打印log时候，各种各样的信息难以区分，降低了重要信息的可读性。<br>因此可以使用颜色进行区分。</p><p>书写格式：<br>     开头部分：\033[显示方式;前景色;背景色m + 结尾部分：\033[0m</p><p>注意：开头部分的三个参数：显示方式，前景色，背景色是可选参数，可以只写其中的某一个；另外由于表示三个参数不同含义的数值都是唯一的没有重复的，所以三个参数的书写先后顺序没有固定要求，系统都能识别；但是，建议按照默认的格式规范书写。<br>对于结尾部分，其实也可以省略，但是为了书写规范，建议\033[***开头，\033[0m结尾。</p><a id="more"></a>


<hr>
<p>字体色     |       背景色     |      颜色描述<br>| ——  | —–:           | :—-: |<br>30        |        40       |       黑色<br>31        |        41       |       红色<br>32        |        42       |       绿色<br>33        |        43       |       黃色<br>34        |        44       |       蓝色<br>35        |        45       |       紫红色<br>36        |        46       |       青蓝色<br>37        |        47       |       白色</p>
<hr>
<p>显示方式     |      效果<br>| ——  | :—-: |<br>0           |     终端默认设置<br>1           |     高亮显示<br>4           |     使用下划线<br>5           |     闪烁<br>7           |     反白显示<br>8           |     不可见</p>
<p>数值表示的参数含义：</p>
<p>显示方式: 0（默认值）、1（高亮）、22（非粗体）、4（下划线）、24（非下划线）、 5（闪烁）、25（非闪烁）、7（反显）、27（非反显）</p>
<p>前景色: 30（黑色）、31（红色）、32（绿色）、 33（黄色）、34（蓝色）、35（洋 红）、36（青色）、37（白色）</p>
<p>背景色: 40（黑色）、41（红色）、42（绿色）、 43（黄色）、44（蓝色）、45（洋 红）、46（青色）、47（白色）</p>
<p>常见开头格式：<br>\033[0m            默认字体正常显示，不高亮</p>
<p>\033[32;0m       红色字体正常显示</p>
<p>\033[1;32;40m  显示方式: 高亮    字体前景色：绿色  背景色：黑色</p>
<p>\033[0;31;46m  显示方式: 正常    字体前景色：红色  背景色：青色</p>
<p>\033[1;31m  显示方式: 高亮    字体前景色：红色  背景色：无</p>
<p>举例说明：<br>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_logger.info(<span class="string">"\n\n \033[1;37;42m 用户：%s 创建单据：%s \033[0m \n"</span>%(self.env.user.name, res.name))</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/H8d435a766d504fa78b9abf04481bb946n.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'\033[1;35;0m字体变色，但无背景色 \033[0m'</span>)  <span class="comment"># 有高亮 或者 print('\033[1;35m字体有色，但无背景色 \033[0m')</span></span><br><span class="line">print(<span class="string">'\033[1;45m 字体不变色，有背景色 \033[0m'</span>)  <span class="comment"># 有高亮</span></span><br><span class="line">print(<span class="string">'\033[1;35;46m 字体有色，且有背景色 \033[0m'</span>)  <span class="comment"># 有高亮</span></span><br><span class="line">print(<span class="string">'\033[0;35;46m 字体有色，且有背景色 \033[0m'</span>)  <span class="comment"># 无高亮</span></span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/Hc26ba6a6e67541b3bf0a8de0d0b5b34bf.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'\033[0;36m床前明月光，'</span>)</span><br><span class="line">print(<span class="string">'疑是地上霜。'</span>)</span><br><span class="line">print(<span class="string">'举头望明月，'</span>)</span><br><span class="line">print(<span class="string">'低头思故乡。\033[0m'</span>)</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/H99019d233a3b4158997eae061b37afe3W.jpg"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>清纯美女图（早餐）</title>
    <url>/2019/11/12/picture_girl_2/</url>
    <content><![CDATA[<p><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hb9b160e480c24c71b9b3dab3f03439e3R.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H2bc4d7fc60944409acded54e16044755u.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hf6daa23858c14a30b60fe3a5f166657a5.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hfb5035e6c5074bfc8c83987d9e519faaI.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H375c3745f0a245718ddc3fabafb328edB.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hae58449e181242499c22ae28e43e387dD.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H09ef5534385d4a2f9f107261fa895350k.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hb5e3aa60684043e0b140fb8686edb784l.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Had98f4157f334363a24a973c8836aa5cM.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>清纯</category>
      </categories>
  </entry>
  <entry>
    <title>性感美女图（滑板）</title>
    <url>/2019/11/12/picture_girl_1/</url>
    <content><![CDATA[<p><img alt="性感美女" data-src="https://pic.superbed.cn/item/5dcc2b2b8e0e2e3ee9f4b91c.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/Hcb00c0b1500a4f47a4c0240aeb473302p.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H33e3257a533a42299cacfa5689cfc07bh.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H6c5901b61b3d4ee49574d561394ec974F.jpg"><br> <!-- 
 ![](https://pic.superbed.cn/item/5dcc2c1e8e0e2e3ee9f4deee.jpg)
 ![](https://puui.qpic.cn/fans_admin/0/3_600007305_1573661727042/0)
 ![](https://p.pstatp.com/origin/fef50001455d06f7593b)
  --></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H08f5e6c4a17d4824a7937aae86d2b67d8.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/Hc4c4c1b09ac245b7b06da2d587ceb62bj.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H58a1abb4cbb54fc18ac2f51cf3ca4e73L.jpg"><br> <!-- 
 ![](https://pic.superbed.cn/item/5dcc2ca78e0e2e3ee9f4effa.jpg)
 ![](https://puui.qpic.cn/fans_admin/0/3_600007305_1573661864617/0)
 ![](https://p.pstatp.com/origin/ff750000b7cb378c598c)
  --></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H632e8a4c8a8b48368f41dd221f409e4ax.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H984a5a8eab6041ad8cc3984bd92c1301D.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>性感</category>
      </categories>
  </entry>
  <entry>
    <title>Odoo12-- 改变switchButton的显示内容</title>
    <url>/2019/11/07/odoo12_2/</url>
    <content><![CDATA[<p><strong>odoo原本的switchbutton，当鼠标悬浮上去是显示的是英文，比如：View List, View Kanban</strong></p>
<a id="more"></a>
<p><img alt="switchbutton更改前" data-src="https://upload-images.jianshu.io/upload_images/8791854-55ecdf487553ef7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><strong>现在改变其显示内容，可自定义修改。</strong><br><img alt="switchbutton更改后" data-src="https://upload-images.jianshu.io/upload_images/8791854-0ff221f83ce9bbd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>#####原理：在页面加载时候，渲染SwitchButtons时候，对其重写。<br><strong>对<code>abstract_controller.js</code>文件中<code>_renderSwitchButtons</code>方法进行改造。</strong></p>
<p><strong>参考代码：</strong><br><img alt="主要代码" data-src="https://upload-images.jianshu.io/upload_images/8791854-f736cecc922c8943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$switchButtons.each(<span class="function"><span class="keyword">function</span> (<span class="params">k, v</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.type &amp;&amp; v.type === <span class="string">'button'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data_original_title_node = v.attributes.getNamedItem(<span class="string">'data-original-title'</span>);</span><br><span class="line">                <span class="keyword">var</span> view_type = v.attributes.getNamedItem(<span class="string">'data-view-type'</span>).nodeValue;</span><br><span class="line">                <span class="keyword">if</span> (view_type === <span class="string">'list'</span>) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = <span class="string">'列表视图'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view_type === <span class="string">'kanban'</span>) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = <span class="string">'看板视图'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                v.attributes.setNamedItem(data_original_title_node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义配置面板</title>
    <url>/2019/11/07/odoo12_7/</url>
    <content><![CDATA[<p><strong>如题，Odoo开发过程中，有时遇到一些需求需要在页面中快速配置一些信息数据,此时就需要用到配置面板， 如下图所示：</strong><br><img alt="配置面板" data-src="https://upload-images.jianshu.io/upload_images/8791854-48b3b9b19f3e5a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>**主要分三步：<br>一是定义配置面板的模板<br>二是定义路由渲染模板<br>三是给指定模型视图绑定模板路由</p>
<a id="more"></a>
<p>代码如下：**</p>
<p>模板文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">odoo</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ONBOARDING STEPS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"onboarding_quotation_layout_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Quotation Layout<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Customize the look of your quotations.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"done_icon"</span> <span class="attr">t-value</span>=<span class="string">"'fa-star'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"done_text"</span>&gt;</span>Looks great!<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Customize<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_quotation_layout'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('account_onboarding_invoice_layout_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_order_confirmation_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Confirmation &amp;amp; Payment<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Choose how to confirm quotations and get paid.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Set payments<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_payment_acquirer'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('sale_onboarding_order_confirmation_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_sample_quotation_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Sample Quotation<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Send a quotation to test the customer portal.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Send sample<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_sample_quotation'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('sale_onboarding_sample_quotation_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ONBOARDING PANEL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_quotation_onboarding_panel"</span> <span class="attr">name</span>=<span class="string">"sale.quotation.onboarding.panel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"classes"</span> <span class="attr">t-value</span>=<span class="string">"'o_onboarding_violet'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"bg_image"</span> <span class="attr">t-value</span>=<span class="string">"'/sale/static/src/img/sale_quotation_onboarding_bg.jpg'"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"close_method"</span> <span class="attr">t-value</span>=<span class="string">"'action_close_sale_quotation_onboarding'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"close_model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_company_step"</span> <span class="attr">name</span>=<span class="string">"company_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.onboarding_quotation_layout_step"</span> <span class="attr">name</span>=<span class="string">"quotation_layout_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.sale_onboarding_order_confirmation_step"</span> <span class="attr">name</span>=<span class="string">"payment_acquirer_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.sale_onboarding_sample_quotation_step"</span> <span class="attr">name</span>=<span class="string">"sample_quotation_step"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ORDER CONFIRMATION --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_order_confirmation_form"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.order.confirmation.onboarding.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>sale.payment.acquirer.onboarding.wizard<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"payment.payment_acquirer_onboarding_wizard_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//div[@name='left-column']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"class"</span>&gt;</span>col col-4<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_payment_acquirer_wizard"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>How your customers can confirm an order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>sale.payment.acquirer.onboarding.wizard<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_order_confirmation_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QUOTATION LAYOUT --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_quotation_layout_form"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.onboarding.quotation.layout.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>res.company<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"base.view_company_document_template_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//button[@special='save']"</span> <span class="attr">position</span>=<span class="string">"replace"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">string</span>=<span class="string">"Apply"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"object"</span> <span class="attr">name</span>=<span class="string">"action_save_onboarding_quotation_layout"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_quotation_layout"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Configure your document layout<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>res.company<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_quotation_layout_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SAMPLE QUOTATION --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_sample_quotation_form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>mail.compose.message.sale.onboarding.sample.quotation.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>mail.compose.message<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"mail.email_compose_message_wizard_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//span[@name='document_followers_text']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//button[@name='save_as_template']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//field[@name='template_id']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_sample_quotation"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Send a sample quotation.<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>mail.compose.message<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_sample_quotation_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">odoo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Part of Odoo. See LICENSE file for full copyright and licensing details.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> odoo <span class="keyword">import</span> http</span><br><span class="line"><span class="keyword">from</span> odoo.http <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingController</span><span class="params">(http.Controller)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @http.route('/sales/sale_quotation_onboarding_panel', auth='user', type='json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sale_quotation_onboarding</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Returns the `banner` for the sale onboarding panel.</span></span><br><span class="line"><span class="string">            It can be empty if the user has closed it or if he doesn't have</span></span><br><span class="line"><span class="string">            the permission to see it. """</span></span><br><span class="line"></span><br><span class="line">        company = request.env.user.company_id</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.env.user._is_admin() <span class="keyword">or</span> \</span><br><span class="line">           company.sale_quotation_onboarding_state == <span class="string">'closed'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'html'</span>: request.env.ref(<span class="string">'sale.sale_quotation_onboarding_panel'</span>).render(&#123;</span><br><span class="line">                <span class="string">'company'</span>: company,</span><br><span class="line">                <span class="string">'state'</span>: company.get_and_update_sale_quotation_onboarding_state()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>指定模型视图，添加<code>banner_route</code>属性，属性值为路由。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"view_quotation_tree_with_onboarding"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.order.tree<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>sale.order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"view_quotation_tree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//tree"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"banner_route"</span>&gt;</span>/sales/sale_quotation_onboarding_panel<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上， 为自定义配置面板大致过程。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义水滴状引导提示信息</title>
    <url>/2019/11/07/odoo12_6/</url>
    <content><![CDATA[<p><strong>如题，odoo本身自带水滴形状的提示。有时候二开的时候需要给某些按钮添加一个提示，则可以利用odoo的tooltips插件</strong><br><img alt="水滴形状提示.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-dfa69d7a825ad73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p><strong>鼠标移动上去会有文字提示</strong></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-1c30d4414b500cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7c19b939247e26e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-ebc8f9e7637c1aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>我们只需要定义一个tour.js文件就可以，在文件中，我们指定元素位置，绑定相关提示信息就可以。</strong><br>其中：<br><code>trigger</code>:要绑定的元素,<br><code>content</code>:  提示内容,<br><code>position</code>: 位置,<br><code>edition</code>:版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">odoo.define(<span class="string">'crm.tour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> core = <span class="built_in">require</span>(<span class="string">'web.core'</span>);</span><br><span class="line"><span class="keyword">var</span> tour = <span class="built_in">require</span>(<span class="string">'web_tour.tour'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _t = core._t;</span><br><span class="line"></span><br><span class="line">tour.register(<span class="string">'crm_tour'</span>, &#123;</span><br><span class="line">    url: <span class="string">"/web"</span>,</span><br><span class="line">&#125;, [tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app."</span>),</span><br><span class="line">    position: <span class="string">'right'</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app."</span>),</span><br><span class="line">    position: <span class="string">'bottom'</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o-kanban-button-new"</span>,</span><br><span class="line">    extra_trigger: <span class="string">'.o_opportunity_kanban'</span>,</span><br><span class="line">    content: _t(<span class="string">"Click here to &lt;b&gt;create your first opportunity&lt;/b&gt; and add it to your pipeline."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_quick_create input:first"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Choose a name&lt;/b&gt; for your opportunity, example: &lt;i&gt;'Need a new website'&lt;/i&gt;"</span>),</span><br><span class="line">    position: <span class="string">"right"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_quick_create .o_kanban_add"</span>,</span><br><span class="line">    content: _t(<span class="string">"Click here to &lt;b&gt;add your opportunity&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_opportunity_kanban .o_kanban_group:first-child .o_kanban_record:last-child"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Drag &amp;amp; drop opportunities&lt;/b&gt; between columns as you progress in your sales cycle."</span>),</span><br><span class="line">    position: <span class="string">"right"</span>,</span><br><span class="line">    run: <span class="string">"drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(2) "</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_record:not(.o_updating) .o_activity_color_default"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"This opportunity has &lt;b&gt;no activity planned&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_schedule_activity"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"Let's schedule an activity."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.modal-body .o_field_many2one'</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;p&gt;You will be able to customize your followup activities. Examples:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;introductory email&lt;/li&gt;&lt;li&gt;call 10 days after&lt;/li&gt;&lt;li&gt;second call 3 days after, ...&lt;/li&gt;&lt;/ol&gt;&lt;p class='mb0'&gt;&lt;i&gt;Select a standard activity for now.&lt;/i&gt;&lt;/p&gt;"</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params">actions</span>) </span>&#123;</span><br><span class="line">        actions.auto(<span class="string">'.modal-footer button[special=cancel]'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_record"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"Click on the opportunity to zoom in."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params">actions</span>) </span>&#123;</span><br><span class="line">        actions.auto(<span class="string">".o_kanban_record .oe_kanban_action[data-type=edit]"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_opportunity_form .o_chatter_button_new_message"</span>,</span><br><span class="line">    content: _t(<span class="string">'&lt;p&gt;&lt;b&gt;Send messages&lt;/b&gt; to your prospect and get replies automatically attached to this opportunity.&lt;/p&gt;&lt;p class="mb0"&gt;Type &lt;i&gt;\'@\'&lt;/i&gt; to mention people - it\'s like cc-ing on emails.&lt;/p&gt;'</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".breadcrumb-item:not(.active):last"</span>,</span><br><span class="line">    extra_trigger: <span class="string">'.o_opportunity_form'</span>,</span><br><span class="line">    content: _t(<span class="string">"Use the breadcrumbs to &lt;b&gt;go back to your sales pipeline&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="base.menu_administration"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Configuration options are available in the Settings app."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="base.menu_administration"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Configuration options are available in the Settings app."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_web_settings_dashboard .o_user_emails"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Invite coworkers&lt;/b&gt; via email.&lt;br/&gt;&lt;i&gt;Enter one email per line.&lt;/i&gt;"</span>),</span><br><span class="line">    position: <span class="string">"right"</span></span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Good job! You completed the tour of the CRM app."</span>),</span><br><span class="line">    position: <span class="string">'right'</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Good job! You completed the tour of the CRM app."</span>),</span><br><span class="line">    position: <span class="string">'bottom'</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 列表视图禁止打开表单内容</title>
    <url>/2019/11/07/odoo12_5/</url>
    <content><![CDATA[<p>正常的列表视图做为菜单动作直接打开的话，直接点击是跳转当前动作下的表单视图；还有一种是做为表单视图One2many、Many2many类型的嵌入式列表视图，直接点击打开Dialog窗口展示表单视图，一些特殊的需求场景下往往希望只将信息展示到列表即止，不用更多的详细互动。<br>两种方式：</p>
<a id="more"></a>
<p>1.找到相关的行点击入口，通过万能的context扩展一个独立的禁止打开参数，默认不禁止，视图里通过显式声明使用该功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ListRenderer = <span class="built_in">require</span>(<span class="string">'web.ListRenderer'</span>);</span><br><span class="line">ListRenderer.include(&#123;</span><br><span class="line">    _onRowClicked: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> context = self.dataset.get_context().eval();</span><br><span class="line">        <span class="keyword">if</span>(!context[<span class="string">"disable_open"</span>])&#123;</span><br><span class="line">            self._super.apply(self, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"sale_ids"</span> <span class="attr">context</span>=<span class="string">"&#123;'disable_open': True&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.禁止 鼠标的点击事件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"sale_ids"</span> <span class="attr">style</span>=<span class="string">"pointer-events: none;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- statebar根据单据状态动态显示</title>
    <url>/2019/11/07/odoo12_1/</url>
    <content><![CDATA[<h5 id="当状态为草稿或者结算时候，显示结算。"><a href="#当状态为草稿或者结算时候，显示结算。" class="headerlink" title="当状态为草稿或者结算时候，显示结算。"></a>当状态为草稿或者结算时候，显示结算。</h5><p><img alt="已审核状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-351316405b170a57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p>#####当进行结算操作，状态变为‘到期收款’或者其他状态时，就显示单据状态<br><img alt="到期收款状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-0f33c4599f6e2776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img alt="背书状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f627f36b33b68b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>model.py 文件， ‘dynamic_state’选项为动态显示的内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = fields.Selection([</span><br><span class="line">    (<span class="string">'draft'</span>, <span class="string">'草稿'</span>),</span><br><span class="line">    (<span class="string">'verify'</span>, <span class="string">'已审核'</span>),</span><br><span class="line">    (<span class="string">'due_payment'</span>, <span class="string">'到期收款'</span>),</span><br><span class="line">    (<span class="string">'discount'</span>, <span class="string">'贴现'</span>),</span><br><span class="line">    (<span class="string">'endorsement'</span>, <span class="string">'背书'</span>),</span><br><span class="line">    (<span class="string">'endorsement_return'</span>, <span class="string">'背书退回'</span>),</span><br><span class="line">    (<span class="string">'bill_return'</span>, <span class="string">'票据退回'</span>),</span><br><span class="line">    (<span class="string">'dynamic_state'</span>, <span class="string">'结算'</span>), <span class="comment"># 动态显示，设置默认值为'结算'</span></span><br><span class="line">   ], string=<span class="string">'单据状态'</span>, copy=<span class="literal">False</span>, index=<span class="literal">True</span>, track_visibility=<span class="string">'onchange'</span>, track_sequence=<span class="number">3</span>, default=<span class="string">'draft'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>xml文件， ‘dynamic_state’ 会根据单据的状态动态显示 dynamic_visible属性中的值</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span> <span class="attr">widget</span>=<span class="string">"statusbar"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">statusbar_visible</span>=<span class="string">"draft,verify,dynamic_state"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">dynamic_visible</span>=<span class="string">"due_payment,discount,endorsement,endorsement_return,bill_return"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>js文件，继承relational_fields.js 。FieldStatus的widget进行重写。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">odoo.define(<span class="string">'ps_base.statusbar_dynamic_visible'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> relational_fields = <span class="built_in">require</span>(<span class="string">'web.relational_fields'</span>);</span><br><span class="line"></span><br><span class="line">relational_fields.FieldStatus.include(&#123;</span><br><span class="line"></span><br><span class="line">_setState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.field.type === <span class="string">'many2one'</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.status_information = _.map(<span class="keyword">this</span>.record.specialData[<span class="keyword">this</span>.name], <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _.extend(&#123;</span><br><span class="line"></span><br><span class="line">selected: info.id === self.value.res_id,</span><br><span class="line"></span><br><span class="line">&#125;, info);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selection = <span class="keyword">this</span>.field.selection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.attrs.statusbar_visible) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> restriction = <span class="keyword">this</span>.attrs.statusbar_visible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.attrs.dynamic_visible) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dynamic_state = <span class="keyword">this</span>.attrs.dynamic_visible.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dynamic_state.indexOf(self.value) !== <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line">restriction = restriction.replace(<span class="string">'dynamic_state'</span>, self.value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restriction = restriction.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">selection = _.filter(selection, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _.contains(restriction, val[<span class="number">0</span>]) || val[<span class="number">0</span>] === self.value;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.status_information = _.map(selection, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">id</span>: val[<span class="number">0</span>], <span class="attr">display_name</span>: val[<span class="number">1</span>], <span class="attr">selected</span>: val[<span class="number">0</span>] === self.value, <span class="attr">fold</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 销售订单确认后生成销售出库单的代码跟踪</title>
    <url>/2019/11/07/odoo12_4/</url>
    <content><![CDATA[<p><strong>如题：销售订单在<code>报价单</code>状态点击<code>确认</code>按钮，状态变更为<code>销售订单</code>,同时生成一个<code>销售出库单</code></strong></p>
<a id="more"></a>
<p><img alt="报价单" data-src="https://upload-images.jianshu.io/upload_images/8791854-b56cf0ed2d6a5b56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="销售订单" data-src="https://upload-images.jianshu.io/upload_images/8791854-92296fe8c111be8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<p>———————————————–分割线—————————————–<br>####代码过程<br>#####1.点击 <code>确认</code>按钮<br>主要执行两个逻辑：<br>一是将单据状态改变，由报价单改为销售订单<br>二是通过推拉规则生成调拨单</p>
<p>以下为<code>sale</code>模块的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; set(self.mapped(<span class="string">'state'</span>)):</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(</span><br><span class="line">                <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">            ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(<span class="keyword">lambda</span> order: order.partner_id <span class="keyword">not</span> <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">        order.message_subscribe([order.partner_id.id])</span><br><span class="line">        self.write(&#123;</span><br><span class="line">            <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">            <span class="string">'confirmation_date'</span>: fields.Datetime.now()</span><br><span class="line">        &#125;)</span><br><span class="line">        self._action_confirm()</span><br><span class="line">        <span class="keyword">if</span> self.env[<span class="string">'ir.config_parameter'</span>].sudo().get_param(<span class="string">'sale.auto_done_setting'</span>):</span><br><span class="line">            self.action_done()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>重点代码是<code>self._action_confirm()</code>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Implementation of additionnal mecanism of Sales Order confirmation.</span></span><br><span class="line"><span class="string">        This method should be extended when the confirmation should generated</span></span><br><span class="line"><span class="string">        other documents. In this method, the SO are in 'sale' state (not yet 'done').</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.env.context.get(<span class="string">'send_email'</span>):</span><br><span class="line">        self.force_quotation_send()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create an analytic account if at least an expense product</span></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> any([expense_policy <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">False</span>, <span class="string">'no'</span>] <span class="keyword">for</span> expense_policy <span class="keyword">in</span> order.order_line.mapped(<span class="string">'product_id.expense_policy'</span>)]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> order.analytic_account_id:</span><br><span class="line">                order._create_analytic_account()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>通过代码注释，我们可以确定这是确认订单的附加机制，生成其他单据时候应拓展此方法。</p>
<p>####2.生成调拨单<br>继续跟踪代码<br>以下为<code>sale_stock</code>模块的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self:</span><br><span class="line">        order.order_line._action_launch_stock_rule()</span><br><span class="line">    super(SaleOrder, self)._action_confirm()</span><br></pre></td></tr></table></figure>
<p>不难发现，再次拓展了<strong>_action_confirm</strong>方法。<br>重点代码：<code>order.order_line._action_launch_stock_rule()</code><br>继续跟踪sale.order.line的<code>_action_launch_stock_rule</code>的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_launch_stock_rule</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Launch procurement group run method with required/custom fields genrated by a</span></span><br><span class="line"><span class="string">    sale order line. procurement group will launch '_run_pull', '_run_buy' or '_run_manufacture'</span></span><br><span class="line"><span class="string">    depending on the sale order line product rule.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    precision = self.env[<span class="string">'decimal.precision'</span>].precision_get(<span class="string">'Product Unit of Measure'</span>)</span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> line.state != <span class="string">'sale'</span> <span class="keyword">or</span> <span class="keyword">not</span> line.product_id.type <span class="keyword">in</span> (<span class="string">'consu'</span>,<span class="string">'product'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        qty = line._get_qty_procurement()</span><br><span class="line">        <span class="keyword">if</span> float_compare(qty, line.product_uom_qty, precision_digits=precision) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        group_id = line.order_id.procurement_group_id</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> group_id:</span><br><span class="line">            group_id = self.env[<span class="string">'procurement.group'</span>].create(&#123;</span><br><span class="line">                <span class="string">'name'</span>: line.order_id.name, <span class="string">'move_type'</span>: line.order_id.picking_policy,</span><br><span class="line">                <span class="string">'sale_id'</span>: line.order_id.id,</span><br><span class="line">                <span class="string">'partner_id'</span>: line.order_id.partner_shipping_id.id,</span><br><span class="line">            &#125;)</span><br><span class="line">            line.order_id.procurement_group_id = group_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># In case the procurement group is already created and the order was</span></span><br><span class="line">            <span class="comment"># cancelled, we need to update certain values of the group.</span></span><br><span class="line">            updated_vals = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> group_id.partner_id != line.order_id.partner_shipping_id:</span><br><span class="line">                updated_vals.update(&#123;<span class="string">'partner_id'</span>: line.order_id.partner_shipping_id.id&#125;)</span><br><span class="line">            <span class="keyword">if</span> group_id.move_type != line.order_id.picking_policy:</span><br><span class="line">                updated_vals.update(&#123;<span class="string">'move_type'</span>: line.order_id.picking_policy&#125;)</span><br><span class="line">            <span class="keyword">if</span> updated_vals:</span><br><span class="line">                group_id.write(updated_vals)</span><br><span class="line"></span><br><span class="line">        values = line._prepare_procurement_values(group_id=group_id)</span><br><span class="line">        product_qty = line.product_uom_qty - qty</span><br><span class="line"></span><br><span class="line">        procurement_uom = line.product_uom</span><br><span class="line">        quant_uom = line.product_id.uom_id</span><br><span class="line">        get_param = self.env[<span class="string">'ir.config_parameter'</span>].sudo().get_param</span><br><span class="line">        <span class="keyword">if</span> procurement_uom.id != quant_uom.id <span class="keyword">and</span> get_param(<span class="string">'stock.propagate_uom'</span>) != <span class="string">'1'</span>:</span><br><span class="line">            product_qty = line.product_uom._compute_quantity(product_qty, quant_uom, rounding_method=<span class="string">'HALF-UP'</span>)</span><br><span class="line">            procurement_uom = quant_uom</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.env[<span class="string">'procurement.group'</span>].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</span><br><span class="line">        <span class="keyword">except</span> UserError <span class="keyword">as</span> error:</span><br><span class="line">            errors.append(error.name)</span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> UserError(<span class="string">'\n'</span>.join(errors))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>主要代码<code>self.env[&#39;procurement.group&#39;].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</code><br>在此之前，主要是计算生成调拨单的数据。</p>
<p>继续跟踪<code>run</code>方法。</p>
<p>以下为<code>stock</code>模块的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, product_id, product_qty, product_uom, location_id, name, origin, values)</span>:</span></span><br><span class="line">    <span class="string">""" Method used in a procurement case. The purpose is to supply the</span></span><br><span class="line"><span class="string">    product passed as argument in the location also given as an argument.</span></span><br><span class="line"><span class="string">    In order to be able to find a suitable location that provide the product</span></span><br><span class="line"><span class="string">    it will search among stock.rule.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    values.setdefault(<span class="string">'company_id'</span>, self.env[<span class="string">'res.company'</span>]._company_default_get(<span class="string">'procurement.group'</span>))</span><br><span class="line">    values.setdefault(<span class="string">'priority'</span>, <span class="string">'1'</span>)</span><br><span class="line">    values.setdefault(<span class="string">'date_planned'</span>, fields.Datetime.now())</span><br><span class="line">    rule = self._get_rule(product_id, location_id, values)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rule:</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(<span class="string">'No procurement rule found in location "%s" for product "%s".\n Check routes configuration.'</span>) % (location_id.display_name, product_id.display_name))</span><br><span class="line">    action = <span class="string">'pull'</span> <span class="keyword">if</span> rule.action == <span class="string">'pull_push'</span> <span class="keyword">else</span> rule.action</span><br><span class="line">    <span class="keyword">if</span> hasattr(rule, <span class="string">'_run_%s'</span> % action):</span><br><span class="line">        getattr(rule, <span class="string">'_run_%s'</span> % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        _logger.error(<span class="string">"The method _run_%s doesn't exist on the procument rules"</span> % action)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>重点代码：<code>getattr(rule, &#39;_run_%s&#39; % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</code><br>发现是根据<code>推拉规则</code>，通过<code>反射</code>的方式执行的代码。<br>执行<code>_run_pull</code>或者<code>_run_push</code>….</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_pull</span><span class="params">(self, product_id, product_qty, product_uom, location_id, name, origin, values)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.location_src_id:</span><br><span class="line">        msg = _(<span class="string">'No source location defined on stock rule: %s!'</span>) % (self.name, )</span><br><span class="line">        <span class="keyword">raise</span> UserError(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create the move as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)</span></span><br><span class="line">    <span class="comment"># Search if picking with move for it exists already:</span></span><br><span class="line">    group_id = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> self.group_propagation_option == <span class="string">'propagate'</span>:</span><br><span class="line">        group_id = values.get(<span class="string">'group_id'</span>, <span class="literal">False</span>) <span class="keyword">and</span> values[<span class="string">'group_id'</span>].id</span><br><span class="line">    <span class="keyword">elif</span> self.group_propagation_option == <span class="string">'fixed'</span>:</span><br><span class="line">        group_id = self.group_id.id</span><br><span class="line"></span><br><span class="line">    data = self._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)</span><br><span class="line">    <span class="comment"># Since action_confirm launch following procurement_group we should activate it.</span></span><br><span class="line">    move = self.env[<span class="string">'stock.move'</span>].sudo().with_context(force_company=data.get(<span class="string">'company_id'</span>, <span class="literal">False</span>)).create(data)</span><br><span class="line">    move._action_confirm()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>重点代码<code>move._action_confirm()</code><br>此时是<strong>先生成库存移动move单</strong>，通过<strong>_action_confirm()生成picking单</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self, merge=True, merge_into=False)</span>:</span></span><br><span class="line">    <span class="string">""" Confirms stock move or put it in waiting if it's linked to another move.</span></span><br><span class="line"><span class="string">    :param: merge: According to this boolean, a newly confirmed move will be merged</span></span><br><span class="line"><span class="string">    in another move of the same picking sharing its characteristics.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    move_create_proc = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">    move_to_confirm = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">    move_waiting = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line"></span><br><span class="line">    to_assign = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> self:</span><br><span class="line">        <span class="comment"># if the move is preceeded, then it's waiting (if preceeding move is done, then action_assign has been called already and its state is already available)</span></span><br><span class="line">        <span class="keyword">if</span> move.move_orig_ids:</span><br><span class="line">            move_waiting |= move</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> move.procure_method == <span class="string">'make_to_order'</span>:</span><br><span class="line">                move_create_proc |= move</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_to_confirm |= move</span><br><span class="line">        <span class="keyword">if</span> move._should_be_assigned():</span><br><span class="line">            key = (move.group_id.id, move.location_id.id, move.location_dest_id.id)</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> to_assign:</span><br><span class="line">                to_assign[key] = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">            to_assign[key] |= move</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create procurements for make to order moves</span></span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> move_create_proc:</span><br><span class="line">        values = move._prepare_procurement_values()</span><br><span class="line">        origin = (move.group_id <span class="keyword">and</span> move.group_id.name <span class="keyword">or</span> (move.origin <span class="keyword">or</span> move.picking_id.name <span class="keyword">or</span> <span class="string">"/"</span>))</span><br><span class="line">        self.env[<span class="string">'procurement.group'</span>].run(move.product_id, move.product_uom_qty, move.product_uom, move.location_id, move.rule_id <span class="keyword">and</span> move.rule_id.name <span class="keyword">or</span> <span class="string">"/"</span>, origin,</span><br><span class="line">                                          values)</span><br><span class="line"></span><br><span class="line">    move_to_confirm.write(&#123;<span class="string">'state'</span>: <span class="string">'confirmed'</span>&#125;)</span><br><span class="line">    (move_waiting | move_create_proc).write(&#123;<span class="string">'state'</span>: <span class="string">'waiting'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># assign picking in batch for all confirmed move that share the same details</span></span><br><span class="line">    <span class="keyword">for</span> moves <span class="keyword">in</span> to_assign.values():</span><br><span class="line">        moves._assign_picking()</span><br><span class="line">    self._push_apply()</span><br><span class="line">    <span class="keyword">if</span> merge:</span><br><span class="line">        <span class="keyword">return</span> self._merge_moves(merge_into=merge_into)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure>
<p>重点代码：<code>moves._assign_picking()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_assign_picking</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Try to assign the moves to an existing picking that has not been</span></span><br><span class="line"><span class="string">    reserved yet and has the same procurement group, locations and picking</span></span><br><span class="line"><span class="string">    type (moves should already have them identical). Otherwise, create a new</span></span><br><span class="line"><span class="string">    picking to assign them to. """</span></span><br><span class="line">    Picking = self.env[<span class="string">'stock.picking'</span>]</span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> self:</span><br><span class="line">        recompute = <span class="literal">False</span></span><br><span class="line">        picking = move._search_picking_for_assignation()</span><br><span class="line">        <span class="keyword">if</span> picking:</span><br><span class="line">            <span class="keyword">if</span> picking.partner_id.id != move.partner_id.id <span class="keyword">or</span> picking.origin != move.origin:</span><br><span class="line">                <span class="comment"># If a picking is found, we'll append `move` to its move list and thus its</span></span><br><span class="line">                <span class="comment"># `partner_id` and `ref` field will refer to multiple records. In this</span></span><br><span class="line">                <span class="comment"># case, we chose to  wipe them.</span></span><br><span class="line">                picking.write(&#123;</span><br><span class="line">                    <span class="string">'partner_id'</span>: <span class="literal">False</span>,</span><br><span class="line">                    <span class="string">'origin'</span>: <span class="literal">False</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recompute = <span class="literal">True</span></span><br><span class="line">            picking = Picking.create(move._get_new_picking_values())</span><br><span class="line">        move.write(&#123;<span class="string">'picking_id'</span>: picking.id&#125;)</span><br><span class="line">        move._assign_picking_post_process(new=recompute)</span><br><span class="line">        <span class="comment"># If this method is called in batch by a write on a one2many and</span></span><br><span class="line">        <span class="comment"># at some point had to create a picking, some next iterations could</span></span><br><span class="line">        <span class="comment"># try to find back the created picking. As we look for it by searching</span></span><br><span class="line">        <span class="comment"># on some computed fields, we have to force a recompute, else the</span></span><br><span class="line">        <span class="comment"># record won't be found.</span></span><br><span class="line">        <span class="keyword">if</span> recompute:</span><br><span class="line">            move.recompute()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>在此处生成的是<strong>确认</strong>状态的picking单以及move单。<br><strong>但是为什么我们在交货单中看到的是就绪状态的单据呢？</strong><br>别急，我们继续查找代码。<br>在此，先插一句，必须了解什么是jit即时调度。（我不知道，别问我了！）<br>以下代码为<code>procurement_jit</code>模块</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_action_launch_stock_rule</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = super(SaleOrderLine, self)._action_launch_stock_rule()</span><br><span class="line">        orders = list(set(x.order_id <span class="keyword">for</span> x <span class="keyword">in</span> self))</span><br><span class="line">        <span class="keyword">for</span> order <span class="keyword">in</span> orders:</span><br><span class="line">            reassign = order.picking_ids.filtered(<span class="keyword">lambda</span> x: x.state==<span class="string">'confirmed'</span> <span class="keyword">or</span> (x.state <span class="keyword">in</span> [<span class="string">'waiting'</span>, <span class="string">'assigned'</span>] <span class="keyword">and</span> <span class="keyword">not</span> x.printed))</span><br><span class="line">            <span class="keyword">if</span> reassign:</span><br><span class="line">                reassign.action_assign()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>聪明的你，已经发现玄机所在了，不错，就是执行了一个关键代码<code>reassign.action_assign()</code></p>
<p>以上。</p>
<p>备注：<br>花费了一天时间，研究逻辑，可能是本人也不太熟悉这部分业务的过程。时间耽误很长。建议各位研究业务过程，业务了解，代码也就好找了。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 关于配置模型中的数据问题</title>
    <url>/2019/11/07/odoo12_3/</url>
    <content><![CDATA[<p>####抛砖：<br>res.config.settings 是个瞬态的，会被定时清理。<br>在这里设置的东西，被清理后，这些配置数据是怎么生效的？？？？</p>
<a id="more"></a>
<p><strong>例如：<br>在库存的设置中，我勾选了交货包裹这一项。一段时间后，res.config.settings被清理。清理后，我勾选的项依然有效，是什么原理？<br>能否拿到配置中的某个字段，根据这个字段，在我的代码中做一些判断。</strong></p>
<p>####引玉：</p>
<p>我们一般会继承res.config.settings来定义一些配置信息。 而res.config.settings是一个暂态模型(models.TransientModel)并不能长久保存数据，那数据是保存在什么地方的呢？</p>
<p>简单回答，这些配置数据并不保存在同一个地方，很多设置的状态是通过动态判断来获得的。<br>实际上当我们定义一个一个如下的配置类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConfigWizard</span><span class="params">(models.TransientModel)</span>:</span></span><br><span class="line">     _name = <span class="string">'my.settings'</span></span><br><span class="line">     _inherit = <span class="string">'res.config.settings'</span></span><br><span class="line"> </span><br><span class="line">    default_foo = fields.type(..., default_model=<span class="string">'my.model'</span>)</span><br><span class="line">    group_bar = fields.Boolean(..., group=<span class="string">'base.group_user'</span>,implied_group=<span class="string">'my.group'</span>)</span><br><span class="line">    module_baz = fields.Boolean(...)</span><br><span class="line">    config_qux = fields.Char(..., config_parameter=<span class="string">'my.parameter'</span>)</span><br><span class="line">    other_field = fields.type(...)</span><br></pre></td></tr></table></figure>

<p>可以看到配置类上的字段分以上5种类型, 也就是：</p>
<p>名字以default_开头，系统会根据设置的值来设置全局的ir.default值<br>名字以group_开头，系统会根据设置的值来配置res.group值<br>名字以module_baz, 系统会根据设置，安装或卸载baz模块<br>字段定义中包含config_parameter属性，系统将设置的值记录到ir.config_parameter表中，其key为config_parameter的值（上例中为：my.parameter), value为本配置字段的值<br>其他字段，则需要继承set_value方法以设定存储的地点，而get_value中设置获取值的方法<br>当打开配置界面时系统会自动调用res.config.settings类的default_get方法，而该方法定义了如何获取这5类字段的设置值的方法。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- Win下使用GitStats git代码统计工具</title>
    <url>/2019/11/07/git_3/</url>
    <content><![CDATA[<p><strong>gitstats 是一款git历史统计工具，可以生成定量的统计数据，并以html图表的形式展示。统计文件包括文件数量、代码量、提交量、作者信息、每天活跃度、每周活跃度、每月活跃度以及提交数排名等等，信息比较丰富。</strong><br>##安装<br>gitstats 依赖 Git 、Python2 以及Gnuplot。<br>以下是最新的依赖版本。</p><a id="more"></a>
<ul>
<li>Python (&gt;= 2.6.0)</li>
<li>Git (&gt;= 1.5.2.4)</li>
<li>Gnuplot (&gt;= 4.0.0)</li>
</ul>
<p>###1. gitstats<br>可以从<a href="https://github.com/hoxu/gitstats下载gitstats" target="_blank" rel="noopener">https://github.com/hoxu/gitstats下载gitstats</a> ，或者用<a href="https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。" target="_blank" rel="noopener">https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。</a><br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-fc1d49e6401bd36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###2. Python2<br>由于只支持Python2，可以到<a href="https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。</a><br>安装完以后需要配置环境变量，例如安装在C:\Python27 ，则在环境变量path中增加C:\Python27。<br>为了避免多个python冲突，把python安装目录下的python.exe修改为python2.exe。</p>
<hr>
<p>也可以使用conda创建虚拟环境</p>
<p>###3. Gnuplot<br>可以到<a href="https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。" target="_blank" rel="noopener">https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。</a><br>安装完毕后，根据README-Windows.txt里描述，需要配置环境变量，配置到安装目录的bin下，例如D:\gnuplot\bin，同样的，在环境变量path中增加。<br>配置完成后，可以在cmd中输入gnuplot验证。<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-8df7c0f52d4570ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###使用<br>在cmd中使用python执行gitstats中的gitstats.py。<br>命令如下：python2 [gitstats.py路径] [git库路径] [输出结果路径]<br>eg:<br>python2 E:\git\gitstats\gitstats.py E:\git\myTestGit E:\git\git_result</p>
<p>然后等待窗口执行完毕，在输出结果路径里找index.html，打开即可查看详细输出结果。</p>
<hr>
<p>如果错误，可以使用以下方式：<br>1.进入到git的bin目录，运行sh.exe，执行 cd …，退到根目录。打开目录中的cmd</p>
<p>2.在控制台中进入到需要统计的git项目目录，执行 </p>
<p>python 目录/gitstats.py . stats</p>
<p>stats目录生成后，打开其中的index.html<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f68a6db3eaa3b5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python gitstats.py  F:\WORK\PSCLOUD\pscloud  E:\gitstats\result</span><br></pre></td></tr></table></figure>



<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 refusing to merge unrelated histories 错误</title>
    <url>/2019/11/07/git_1/</url>
    <content><![CDATA[<p>引用</p><p>git pull 失败 ,提示：<code>fatal: refusing to [merge](https://www.centos.bz/tag/merge/) unrelated histories</code></p><p>其实这个问题是因为 两个 根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并</p><a id="more"></a>


<p>具体的方法， 一个种方法： 是 从远端库拉下来代码 ， 本地要加入的代码放到远端库下载到本地的库， 然后提交上去 ， 因为这样的话， 你基于的库就是远端的库， 这是一次<a href="https://www.centos.bz/tag/update/" target="_blank" rel="noopener">update</a>了</p>
<p>第二种方法：<br>使用这个强制的方法</p>
<p><code>git pull origin [master](https://www.centos.bz/tag/master/) --allow-unrelated-histories</code></p>
<p>后面加上 <code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并</p>
<p>后面再push就可以了 <code>[git push](https://www.centos.bz/tag/git-push/) [gitlab](https://www.centos.bz/tag/gitlab/) master:init</code></p>
<p>gitlab是别名 ， 使用</p>
<p><code>git remote add gitlab ssh://xzh@192.168.1.91:50022/opt/gitrepo/withholdings/WithholdingTransaction</code></p>
<p>master是本地的branch名字<br>init是远端要推送的branch名字</p>
<p>本地必须要先add ，<a href="https://www.centos.bz/tag/commit/" target="_blank" rel="noopener">commit</a>完了 才能推上去</p>
<p>关于这个问题，可以参考<a href="http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。" target="_blank" rel="noopener">http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。</a></p>
<p>在进行git pull 时，添加一个可选项</p>
<p><code>git pull origin master --allow-unrelated-histories</code></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 RPC failed; curl 18 transfer closed with outstanding read data remaining的解决</title>
    <url>/2019/11/07/git_2/</url>
    <content><![CDATA[<p>如图：<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7a5c238b4bb6e991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>解决方案也是网上搜的，总结一下</p><p>一，加大缓存区</p><figure class="highlight plain"><figcaption><span>config --global http.postBuffer 524288000```</span></figcaption><table><tr><td class="code"><pre><span class="line">这个大约是500M</span><br><span class="line">二、少clone一些，–depth 1</span><br><span class="line">```git clone https://github.com/flutter/flutter.git --depth 1</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>–depth 1的含义是复制深度为1，就是每个文件只取最近一次提交，不是整个历史版本。<br>三、换协议<br>clone http方式换成SSH的方式，即 https:// 改为 git://<br>例如<code>git clone https://github.com/flutter/flutter.git</code><br>换成<code>git clone git://github.com/flutter/flutter.git</code></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- Ubuntu16.04安装Redis</title>
    <url>/2019/11/07/ubuntu_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis是常用基于内存的Key-Value数据库，比Memcache更先进，支持多种数据结构，高效，快速。用Redis可以很轻松解决高并发的数据访问问题；作为实时监控信号处理也非常不错。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Ubuntu 16.04</p>
<h1 id="安装Redis服务器端"><a href="#安装Redis服务器端" class="headerlink" title="安装Redis服务器端"></a>安装Redis服务器端</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>

<p>安装完成后，Redis服务器会自动启动，我们检查Redis服务器程序</p>
<a id="more"></a>

<h2 id="检查Redis服务器系统进程"><a href="#检查Redis服务器系统进程" class="headerlink" title="检查Redis服务器系统进程"></a>检查Redis服务器系统进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ ps -aux|grep redis</span><br><span class="line">redis 4162  0.1  0.0  10676  1420 ?        Ss   23:24   0:00 /usr/bin/redis-server /etc/redis/redis.conf</span><br><span class="line">conan 4172  0.0  0.0  11064   924 pts/0    S+   23:26   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态"><a href="#通过启动命令检查Redis服务器状态" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态-1"><a href="#通过启动命令检查Redis服务器状态-1" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ sudo /etc/init.d/redis-server status</span><br><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 四 2017-11-09 12:22:09 CST; 59s ago</span><br><span class="line">     Docs: http://redis.io/documentation,</span><br><span class="line">           man:redis-server(1)</span><br><span class="line"> Main PID: 5394 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis-server.service</span><br><span class="line">           └─5394 /usr/bin/redis-server 127.0.0.1:6379 11月 09 12:22:09 zzf systemd[1]: Starting Advanced key-value store...</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5388]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5395]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf systemd[1]: Started Advanced key-value store.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br></pre></td></tr></table></figure>

<h1 id="通过命令行客户端访问Redis"><a href="#通过命令行客户端访问Redis" class="headerlink" title="通过命令行客户端访问Redis"></a>通过命令行客户端访问Redis</h1><p>安装Redis服务器，会自动地一起安装Redis命令行客户端程序。</p>
<p>在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h1 id="命令行的帮助"><a href="#命令行的帮助" class="headerlink" title="命令行的帮助"></a>命令行的帮助</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; <span class="built_in">help</span></span><br><span class="line">redis-cli 2.2.12 Type: <span class="string">"help @"</span> to get a list of commands <span class="keyword">in</span> </span><br><span class="line">      <span class="string">"help "</span> <span class="keyword">for</span> <span class="built_in">help</span> on <span class="string">"help "</span> to get a list of possible <span class="built_in">help</span> topics <span class="string">"quit"</span> to <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h1 id="查看所有的key列表"><a href="#查看所有的key列表" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys * (empty list or <span class="built_in">set</span>)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<h1 id="基本的Redis客户端命令操作"><a href="#基本的Redis客户端命令操作" class="headerlink" title="基本的Redis客户端命令操作"></a>基本的Redis客户端命令操作</h1><p><strong>增加一条记录key1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"hello"</span> OK</span><br></pre></td></tr></table></figure>

<h1 id="打印记录"><a href="#打印记录" class="headerlink" title="打印记录"></a>打印记录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; get key1 <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一条数字记录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> key2 1 OK</span><br></pre></td></tr></table></figure>

<h1 id="让数字自增"><a href="#让数字自增" class="headerlink" title="让数字自增"></a>让数字自增</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(<span class="built_in">integer</span>) 2 redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(<span class="built_in">integer</span>) 3 <span class="comment"># 打印记录</span></span><br><span class="line">redis 127.0.0.1:6379&gt; get key2 <span class="string">"3"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一个列表记录key3</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 a</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 从左边插入列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 b</span><br><span class="line">(<span class="built_in">integer</span>) 2 <span class="comment"># 从右边插入列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH key3 c</span><br><span class="line">(<span class="built_in">integer</span>) 3 <span class="comment"># 打印列表记录，按从左到右的顺序</span></span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE key3 0 3</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"a"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一个哈希记表录key4</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET key4 name <span class="string">"John Smith"</span> (<span class="built_in">integer</span>) 1 <span class="comment"># 在哈希表中插入，email的Key和Value的值</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HSET key4 email <span class="string">"abc@gmail.com"</span> (<span class="built_in">integer</span>) 1 <span class="comment"># 打印哈希表中，name为key的值</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGET key4 name <span class="string">"John Smith"</span> <span class="comment"># 打印整个哈希表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key4 1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"John Smith"</span></span><br><span class="line">3) <span class="string">"email"</span></span><br><span class="line">4) <span class="string">"abc@gmail.com"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一条哈希表记录key5</strong></p>
<h1 id="增加一条哈希表记录key5，一次插入多个Key和value的值"><a href="#增加一条哈希表记录key5，一次插入多个Key和value的值" class="headerlink" title="增加一条哈希表记录key5，一次插入多个Key和value的值"></a>增加一条哈希表记录key5，一次插入多个Key和value的值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMSET key5 username antirez password P1pp0 age 3 OK</span><br></pre></td></tr></table></figure>

<h1 id="打印哈希表中，username和age为key的值"><a href="#打印哈希表中，username和age为key的值" class="headerlink" title="打印哈希表中，username和age为key的值"></a>打印哈希表中，username和age为key的值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMGET key5 username age 1) <span class="string">"antirez"</span></span><br><span class="line">2) <span class="string">"3"</span> <span class="comment"># 打印完整的哈希表记录</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key5 1) <span class="string">"username"</span></span><br><span class="line">2) <span class="string">"antirez"</span></span><br><span class="line">3) <span class="string">"password"</span></span><br><span class="line">4) <span class="string">"P1pp0"</span></span><br><span class="line">5) <span class="string">"age"</span></span><br><span class="line">6) <span class="string">"3"</span></span><br></pre></td></tr></table></figure>

<p><strong>删除记录</strong></p>
<h1 id="查看所有的key列表-1"><a href="#查看所有的key列表-1" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br><span class="line">4) <span class="string">"key5"</span></span><br><span class="line">5) <span class="string">"key1"</span> </span><br><span class="line"><span class="comment"># 删除key1,key5</span></span><br><span class="line">redis 127.0.0.1:6379&gt; del key1</span><br><span class="line">(<span class="built_in">integer</span>) 1 redis 127.0.0.1:6379&gt; del key5</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 查看所有的key列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br></pre></td></tr></table></figure>

<h1 id="修改Redis的配置"><a href="#修改Redis的配置" class="headerlink" title="修改Redis的配置"></a>修改Redis的配置</h1><h2 id="使用Redis的访问账号"><a href="#使用Redis的访问账号" class="headerlink" title="使用Redis的访问账号"></a>使用Redis的访问账号</h2><p>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为redisredis。</p>
<p>用vi打开Redis服务器的配置文件redis.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>#取消注释requirepass</p>
<figure class="highlight plain"><figcaption><span>redisredis```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 让Redis服务器被远程访问</span><br><span class="line"></span><br><span class="line">默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。</span><br><span class="line"></span><br><span class="line">用vi打开Redis服务器的配置文件redis.conf</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">~ sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>#注释bind</p>
<figure class="highlight plain"><figcaption><span>127.0.0.1```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">修改后，重启Redis服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">~ sudo /etc/init.d/redis-server restart</span><br><span class="line">Stopping redis-server: redis-server.</span><br><span class="line">Starting redis-server: redis-server.</span><br></pre></td></tr></table></figure>

<p>未使用密码登陆Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys * (error) ERR operation not permitted</span><br></pre></td></tr></table></figure>

<p>发现可以登陆，但无法执行命令了。</p>
<p>登陆Redis服务器，输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  redis-cli -a redisredis</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span>&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>登陆后，一切正常。</p>
<p>我们检查Redis的网络监听端口</p>
<p>检查Redis服务器占用端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<p>我们看到网络监听从之前的 127.0.0.1:3306 变成 0 0.0.0.0:3306，表示Redis已经允许远程登陆访问。</p>
<p>我们在远程的另一台Linux访问Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli -a redisredis -h 192.168.1.199 redis 192.168.1.199:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br></pre></td></tr></table></figure>

<p>远程访问正常。通过上面的操作，我们就把Redis数据库服务器，在Linux Ubuntu中的系统安装完成。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- 查找并且杀死查找出的所有进程</title>
    <url>/2019/11/07/ubuntu_1/</url>
    <content><![CDATA[<p>直接命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep abc | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure><p>其中abc为要查找的进程</p>]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>女程序员：梦见男朋友和别的女人一起逛街怎么办？在线等,挺急的</title>
    <url>/2019/11/07/farmercodethings_1/</url>
    <content><![CDATA[<p><img alt="趣图" data-src="https://ae01.alicdn.com/kf/H560c21980ed540dd9a3e029eef047d27a.jpg"></p><hr><h1 id="神级评论"><a href="#神级评论" class="headerlink" title="神级评论"></a>神级评论</h1><h2 id="亡羊补牢型"><a href="#亡羊补牢型" class="headerlink" title="亡羊补牢型"></a>亡羊补牢型</h2><p>1.把那个女人的指针指向你即可；</p><p>2.谁让你把男朋友设成 public 的；</p><p>3.心真软，就该把他的接口屏蔽掉；</p><p>4.protected 逛街(youOnly)；</p><p>5.设计问题，应该采用单例模式；</p><p>6.没做回归测试；</p><p>7.标准做法是做个断言；</p><p>8.注释掉了，逛街的参数就不用改了吗？</p><p>9.“最后含泪把那个女人注释掉了，再一运行就是我男朋友自己逛街了。”很明显是变量名作用域的问题，改个名字就行了；</p><a id="more"></a>
<!-- 
![](https://pic.superbed.cn/item/5dce1ac58e0e2e3ee931bd9d.jpg)
![](https://puui.qpic.cn/fans_admin/0/3_118841988_1573788358855/0)
![](https://p.pstatp.com/origin/fec30000447fd374a680)
-->











<p>10.还可以有个多线程的算法，把你的优先级设成 99，一个 idle 线程的优先级设成 50，把那个女人的优先级设成 49。酱紫就永远调度不到啦。</p>
<h2 id="我行我素型"><a href="#我行我素型" class="headerlink" title="我行我素型"></a>我行我素型</h2><p>1.加个断点看看那个女人是谁；</p>
<p>2.那也没关系，那就老调用那个女人…你BF放在那里不动…养着…</p>
<p>3.上绝招，用 goto，做个死循环，让他们逛死；</p>
<p>4.善心点，别 goto 了，加个 exit 结束进程吧，冤冤相报何时了啊。</p>
<h2 id="要出大事型"><a href="#要出大事型" class="headerlink" title="要出大事型"></a>要出大事型</h2><p>1.查一下 Log，仅仅只有逛街了吗……</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2-- jinja2模板过滤器</title>
    <url>/2019/11/07/jinja2_1/</url>
    <content><![CDATA[<p>###jinja2模板过滤器<br>过滤器是通过管道符号’|‘进行使用的，例如 {{ name|length }} ，<br>将返回name的长度，过滤器相当于一个函数，把当前变量传入到过滤<br>器中，然后过滤器根据自己的功能，返回相应的值，之后再将结果渲染<br>到页面中。</p>
<a id="more"></a>
<p>####基本用法：</p>
 {{变量|过滤器名}} 

<p>####常用过滤器：<br><strong>default过滤器</strong><br>使用方式: {{ value|default('默认值') }} ，如果value这个key不存在，那么就会使用default过滤器提供的默认值。如果你想判断一个值是否为False（例如：None、空字符串、空列表、空字典），那么就必须传递另外一个参数 {{ value|default('默认值',boolean=True) }} 可以使用‘or’来替代default 例如 {{signature or ‘no signature’}} 。<br>####自动转义过滤器：<br><strong>’safe‘过滤器：</strong>可以关闭一个字符串的自动转义。<br><strong>‘escape’过滤器：</strong>对某一改字符串进行转义。<br><strong>’autoescape‘标签，</strong>可以对他里面的代码块关闭或开启自动转义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;  &#123;#使用闭合标签关闭自动转义，off关闭，on开启#&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; talk|escape &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>
<p>等等还有很多常用过滤器，请自行查阅。</p>
<p>####自定义过滤器:<br>过滤器本质上是一个函数。如果在模板中调用这个过滤器，就会将这个变量的值作为第一个参数传给过滤器函数，然后过滤器函数返回过滤后的值，需要使用到一个装饰器，<strong>@app.template_filter(‘自定义过滤器名’)</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_filter('my_cut')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(value)</span>:</span></span><br><span class="line">    value = value.replace(<span class="string">'hello'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; article|my_cut &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>#####自定义时间处理过滤器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_time = datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">0</span>)  <span class="comment"># 发表时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter('handle_time')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_time</span><span class="params">(time)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(time, datetime):</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        timestamp = (now - time).total_seconds()</span><br><span class="line">        <span class="keyword">if</span> timestamp &lt; <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'刚刚'</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>:</span><br><span class="line">            minutes = timestamp/<span class="number">60</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'%s分钟前'</span> % int(minutes)</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span>*<span class="number">60</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>:</span><br><span class="line">            hours = timestamp/(<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"%s小时前"</span> % int(hours)</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>:</span><br><span class="line">            days = timestamp/(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"%s天前"</span> % int(days)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> time.strftime(<span class="string">"%Y/%m/%d %H:%M"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> time</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; create_time|handle_time &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>###宏<br>宏类似于Python中的函数，我们在宏中定义行为，还可以进行传递参数，就像Python中的函数一样一样儿的。</p>
<p>在宏中定义一个宏的关键字是macro，后面跟其 宏的名称和参数等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro input(name,age=18) %&#125;  # 参数age的默认值为18</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">" &#123;&#123; name &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">" &#123;&#123; age &#125;&#125;"</span> &gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法也和Python的类似</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('daxin') &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('daxin',age=20) &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Jinjia2</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
