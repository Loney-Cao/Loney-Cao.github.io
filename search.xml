<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Odoo13-- 代码性能分析</title>
    <url>/2019/11/23/odoo13_3/</url>
    <content><![CDATA[<p>最近有些小伙伴总是问我代码这么写行不行，性能怎么样，balabala……</p><p>其实Odoo本身已经给我们提供了分析工具<code>Profile</code><br>下面就介绍一下<code>profile</code></p><h2 id="profile的使用"><a href="#profile的使用" class="headerlink" title="profile的使用"></a>profile的使用</h2><p>profile的定义位于 odoo.tools目录下的 profile.py 和 misc.py文件。小伙伴请自行阅读源码。</p><h3 id="姿势一：-Graph-a-method"><a href="#姿势一：-Graph-a-method" class="headerlink" title="姿势一： Graph a method"></a>姿势一： Graph a method</h3><a id="more"></a>


<p>以Graph形式的代码分析，就是为执行的方法生成图形。  </p>
<p>标准姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.misc <span class="keyword">import</span> profile</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">@profile('/temp/prof.profile')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mymethod</span><span class="params">(...)</span></span></span><br></pre></td></tr></table></figure>

<p>这个性能工具在misc包中，因此需要从那里进行导入。<br>它会生成一个进一步生成图形文件的包含统计数据的文件。<br>要使用这个性能工具，你需要传递文件路径来作为参数。<br>在调用该函数时，它会在给定位置生成一个文件。<br>参见下例，它会在桌面生成一个make_available.prof文件  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.misc <span class="keyword">import</span> profile</span><br><span class="line">...</span><br><span class="line"><span class="meta">@profile('/Users/parth/Desktop/make_available.profile')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_available</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> self.state != <span class="string">'lost'</span>:</span><br><span class="line">    self.write(&#123;<span class="string">'state'</span>: <span class="string">'available'</span>&#125;)</span><br><span class="line">    self.env[<span class="string">'res.partner'</span>].create(&#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'email'</span>: <span class="string">'test@ada.asd'</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>在调用make_available方法时，它会在桌面生成一个文件。要将这个数据转化为图形数据，需要安装gprof2dot工具，然后执行给定的命令来生成图形：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gprof2dot -f pstats -o /Users/parth/Desktop/prof.xdot /Users/parth/Desktop/make_available.prof</span><br></pre></td></tr></table></figure>

<p>这条命令会在桌面上生成prof.xdot 文件。然后，你可以使用下面的命令来通过xdot显示图形  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xdot /Users/parth/Desktop/prof.xdot</span><br></pre></td></tr></table></figure>

<h3 id="姿势二：-Log-a-method"><a href="#姿势二：-Log-a-method" class="headerlink" title="姿势二： Log a method"></a>姿势二： Log a method</h3><p>以Log形式的代码分析，就是为执行的方法生成通过日志方式输出。  </p>
<p>标准姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> odoo.tools.profiler <span class="keyword">import</span> profile</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mymethod</span><span class="params">(...)</span>:</span></span><br></pre></td></tr></table></figure>

<p>实战姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; set(self.mapped(<span class="string">'state'</span>)):</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(</span><br><span class="line">            <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">        ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(<span class="keyword">lambda</span> order: order.partner_id <span class="keyword">not</span> <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">        order.message_subscribe([order.partner_id.id])</span><br><span class="line">    self.write(&#123;</span><br><span class="line">        <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">        <span class="string">'date_order'</span>: fields.Datetime.now()</span><br><span class="line">    &#125;)</span><br><span class="line">    self._action_confirm()</span><br><span class="line">    <span class="keyword">if</span> self.env.user.has_group(<span class="string">'sale.group_auto_done_setting'</span>):</span><br><span class="line">        self.action_done()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>结果  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2019-11-23 05:58:47,018 187644 INFO 13 odoo.tools.profiler:  </span><br><span class="line">calls     queries   ms  </span><br><span class="line">sale.order -------------------------- F:\WORK\Odoo13\odoo\addons\sale\models\sale.py, 727  </span><br><span class="line"></span><br><span class="line">1         0         1.0           @profile  </span><br><span class="line">                                  def action_confirm(self):  </span><br><span class="line">1         10        49.42             <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; <span class="built_in">set</span>(self.mapped(<span class="string">'state'</span>)):  </span><br><span class="line">                                          raise UserError(_(</span><br><span class="line">                                              <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">                                          ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line">3         13        54.82             <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(lambda order: order.partner_id not <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">1         13        46.88                 order.message_subscribe([order.partner_id.id])</span><br><span class="line">1         0         0.0               self.write(&#123;</span><br><span class="line">1         0         0.0                   <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">1         37        330.79                <span class="string">'date_order'</span>: fields.Datetime.now()</span><br><span class="line">                                      &#125;)</span><br><span class="line">1         20        70.31             self._action_confirm()</span><br><span class="line">1         1         0.96              <span class="keyword">if</span> self.env.user.has_group(<span class="string">'sale.group_auto_done_setting'</span>):</span><br><span class="line">                                          self.action_done()</span><br><span class="line">1         0         0.0               <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line">Total:</span><br><span class="line">1         94        554.17</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>当都是男程序员们“神仙打架”的研发组来了一个女实习生...</title>
    <url>/2019/11/23/farmercodethings_5/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title="  "></a><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg">  </h2><p><img alt data-src="https://ae01.alicdn.com/kf/H53bf02da46154fbe802b4023aeb44172S.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2e257128671e4085bf4f6dd3d83618e8G.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H884b8efe170c4d48986247a33d9bb38cL.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9da7466159e84e2c870b0e4a47162f0aV.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H09bdea9b53894573a1011755f90f2ca3p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9d7c2c8fb94340ecbecfe575803e4667I.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H73d5677241a64325a4cf2d489a79f3678.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4ca443cdce9547a0a240e5f51d64b74aL.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H5e27c0627f654c929453446058c9d5db8.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hbe2159d1bb224b7c9b2eb149a79c33253.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hf78be4f3c13b4f58a93e8950619f0e0ca.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hee3c28e6ffc64315ab840c9a926ac37fY.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/He9db3e110e964c8fb0f642419a98da04j.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha4cc4a95832a466ea94a156c3226aa05g.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4d8e9d4e8c0a4a3eab84bc95f1ea442fb.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb6783f5f977548718717249c379cc56cS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H33e3441e29a0493b987125ef2c5b0a666.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H38bdae4d8495446a879158dde61c5742S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H24167f2744ce44d0b2d42c47189e1989I.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hcba69ce6b8d4462a98e2e4c703844f0fG.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hab1e3ffeff5a40e39dd26decd2877483v.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H0a4480b38f7e48ca8d2d06f277078f9eB.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H259b7aba5d174a9eb8b3696825c69c86L.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H260f34581a1e41b1a1b1867b0def261aS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H18515b18c2a34cb586c664f748182c1c0.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H88fcfecf8bba4a41a7f13da3401060caQ.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hc4153a9c7ec14c3ebee47efaf88af0b1U.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6682d67d54c645029af0051ecfb38fa6y.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/He9edb86bcb254a41a74b5f5014b457d7O.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hcaf437e29f6149e18f462214c2f0df60w.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H8d51d4f061654fc3b26fe2121ab276c1g.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H3df7afeb99db400fbdb32f692ca37e8fg.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H13a29949d9c3487e9a3f00a95ffb22b5o.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H026d3217acc54f57a463cab60e7a26d11.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha72284873f7945a49a6cee438bd6978aF.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb2932c80f4dc418a9444d846e45b8232P.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H983b707f8d0e482aa3d40c7cc9280908M.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hfcefab1d835145d78b01e311a8267ceer.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hb59874facade43e9aa4a7ac3c0b546bcP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H9a5922c2518a490ea65ec2288275022c4.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H04af9f4ec87b4dd2a0800444844b323fJ.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4f43134119d54c93ba3c5ae3a76acb6fN.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hf3ef49457b174564aebeee3d568ff50d3.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha31ee477ea8e42e598316f8edf6f7b3dE.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hc8524d685a144363a6a660e95485f3cbS.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H111536872d4a45e6a4273e9c27f5f239i.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H90653e96170f4d858f0caf695ffed5f1p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2fc40154308e464891837c006308bac8k.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hba183164283e46bb9225124288c59892B.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd3d071e173ed467496eb1334fd954db8o.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H83c1de7630b94aaf8b81e1e16a18b51b6.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H38c49f07cde846cba7cd2cbec191a8c5d.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H97ae512ad9474f68a102f50101b6d76fp.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6c52928c8ef74ed682a48b660fac77837.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H6dd15c6c61f841adb68b39a962c6ef20U.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H2d085e949fa34824b1c5b49f11c58b05B.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H348db1c65f4945059c2d0fc95426e3e56.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd9112e3f677941d48a8db7731048524fb.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H8974e9c03eb94061a6f4ed988e3a8b71N.jpg"></p><p><img alt data-src="https://ae01.alicdn.com/kf/H218fdba073b54b1bb1f1f46ce4933707S.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H69131c376acb4a1ab3c328709e9040dcf.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hbc4b3dbe57244eb48ef0eff7bd93e0faZ.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H1e8911fcf1824d3393d5b68e0619ca3fA.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Ha1cf4c6cacad43158b7525670610f05eP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Head075c4cb864258b03771076a1b39f5p.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H379d9b4a056e42d0bda1c90326ed2a4dK.jpg"><br>最终话<br><img alt data-src="https://ae01.alicdn.com/kf/Hcdd137dc158943338100cdee03b866c5c.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/Hd9c69558e7004cf2868be02e42796d4f3.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H78060c924f334da6880a55add681239cP.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H189cd8cae3f84a2f838cc9cdf3ec6e5c8.jpg"></p><p>成长是一个动态的过程…<br>再牛逼的职场人，都是从实习生成长起来的。<br>奇葩的实习生，可能让人心累又无奈；<br>厉害的实习生，会让人感叹后生可畏。<br>作为职场相对“弱势”的群体，<br>在适当允许犯错的情况下，给予实习生正确的指导；<br>而不是单纯压榨他们。<br>实习生也应该抓住机会表现自己，<br>毕竟，竞争激烈的职场不是象牙塔。  </p><p>最后，“千万不要招实习生”只是一句善意的玩笑，嘻嘻~  </p><a id="more"></a>












<p>欢迎各位实习生多来互联网公司体验体验！  </p>
<p>-END-</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>二逼互联网公司现形记，看看你的公司中了几条？</title>
    <url>/2019/11/23/farmercodethings_4/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title="  "></a><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg">  </h2><p>来源：西二旗生活指北（ID：ShelchiLifeGuide）<br>作者：景岁  </p><p>这些年，<br>随着互联网行业的快速发展，<br>很多大大小小的互联网公司涌现了出来。<br>这些公司里，<br>有的发展了很多年，<br>规章制度已经很成熟了，<br>简称普通公司，<br>有的虽然不太成熟，<br>但是却心怀梦想和对员工的关爱，<br>俗称文艺公司，<br>还有的，<br>经常爆出各种奇葩的新闻，<br>简称二逼公司。<br>今天指北就带大家简单盘点一下，<br>这三种互联网公司的区别——  </p><a id="more"></a>

<h2 id="午休"><a href="#午休" class="headerlink" title="午休"></a>午休</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Hc7f406eaa60341cfb7d5fce3c3ac73fb1.jpg"></p>
<h2 id="零食"><a href="#零食" class="headerlink" title="零食"></a>零食</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H62a34b865e094f4d873ea338d97bd40am.jpg"></p>
<h2 id="座椅"><a href="#座椅" class="headerlink" title="座椅"></a>座椅</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H1f62adaa20db431a8e6eb9a86b8ced44F.jpg"></p>
<h2 id="卫生间"><a href="#卫生间" class="headerlink" title="卫生间"></a>卫生间</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H3be419006dc8464a925e6b038ebc8b3fg.jpg"></p>
<h2 id="团建"><a href="#团建" class="headerlink" title="团建"></a>团建</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H300bbc261e44420ba23722dc256cafe1p.jpg"></p>
<h2 id="年会奖品"><a href="#年会奖品" class="headerlink" title="年会奖品"></a>年会奖品</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H0b08987aea6a4b70b589379ede038a18n.jpg"></p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H73da1298110240b18d1b376e7e7a71f7L.jpg"></p>
<h2 id="工资"><a href="#工资" class="headerlink" title="工资"></a>工资</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H85834c6d40e14e21914171241264e3caF.jpg"></p>
<h2 id="冲业绩"><a href="#冲业绩" class="headerlink" title="冲业绩"></a>冲业绩</h2><p><img alt data-src="https://ae01.alicdn.com/kf/He8bc5f780fb2445e9adcd580e7b7337cQ.jpg"></p>
<h2 id="微信群"><a href="#微信群" class="headerlink" title="微信群"></a>微信群</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H7857250280fb47d2b9a2cde3bd2789c5m.jpg"></p>
<h2 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Hfe21359bcc6d43f5bf17bbf8742f05a5L.jpg"></p>
<h2 id="办公环境"><a href="#办公环境" class="headerlink" title="办公环境"></a>办公环境</h2><p><img alt data-src="https://ae01.alicdn.com/kf/H88ec548a56924b2ea1d346677319b850c.jpg"></p>
<p>刚来互联网的时候，<br>感觉每个互联网公司都是文艺公司，<br>后来慢慢地发现，<br>大部分互联网公司其实都是普通公司，<br>然而这几年不知为什么，<br>二逼公司越来越多，<br>各种奇葩的新闻涌现了出来，<br>比如低俗年会、体罚员工、不切实际的KPI等等，<br>简直防不胜防。<br>不过互联网行业毕竟还在成长，<br>相信经过时间的洗练，<br>大部分公司会越来越正常、越来越完善吧。  </p>
<p>-END-</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>揭秘 | 程序员突然离职，真相令人扎心！</title>
    <url>/2019/11/23/farmercodethings_3/</url>
    <content><![CDATA[<p><img alt data-src="https://ae01.alicdn.com/kf/Hda1abd11bede4ec7871475f477aca540l.jpg"></p><hr><p><img alt data-src="https://ae01.alicdn.com/kf/H790f9e547cab4e41814f392dbd660d2db.jpg"></p><p>这是我毕业后的第一份工作…<br>面试时，HR小姐姐告诉我…  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H8a5aeba73c784ffdaf317c28456b9d8dK.jpg"></p><p>然鹅…我入职之后才发现：<br>对标阿里的只有加班强度<br>对标华为的只有狼性文化<br>对标百度的，额，没有对标百度  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H791b4a73ca7a44a88057fef842738d42Y.jpg"></p><p>同事们有的住在海淀区、有的住在朝阳区，<br>作为刚毕业的一枚“穷”学生，<br>我只能住在郊区，<br>一小时的地铁，<br>清晰的“分割”了生活和工作  </p><p><img alt data-src="https://ae01.alicdn.com/kf/H604465a55e0e4b3c931cfcb4f34f51deZ.jpg"></p><p>双休是有的，但也就是换个地方加班…</p><a id="more"></a>









<p><img alt data-src="https://ae01.alicdn.com/kf/H4fe4b781356d490fa06943cbe4c20b2fG.jpg"></p>
<p>小伙伴的境遇好像也类似，<br>约饭渐渐变成了奢望…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H1997ed25e5ab4493a021994cbed6d254A.jpg"></p>
<p>好不容易凑到一起，基本也都带着电脑…</p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H27281680802148638779d6996cfb8637o.jpg"></p>
<p>有些事情，我一直没想明白，<br>为什么迟到一分钟会扣钱，<br>而加班6小时却没有加班费？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H9da655bb36eb4f7d8bae18abbe3a264eU.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H27750a2094a748b289b9ef3e08e07806J.jpg"></p>
<p>为什么加班把项目推上线没有奖金，<br>而写出一个Bug却会被惩罚？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hcd410616c6a54a4ebf129c16336a9ac4P.jpg"></p>
<p>工作一段时间后，我变了很多…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H78411e7d95e54c5da239f72c683ab40dm.jpg"></p>
<p>不仅是我，我入职时心仪的妹子，也变了  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hc7cb5c5b98fd4bb0a836d1ec50042701t.jpg"></p>
<p>哈，苍天饶过谁呢？<br>不，有些东西不会变…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H25c09580b0d748328aa77db7ecb86850K.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H02c3b1ec5194411d8317e7a3666a35f5t.jpg"></p>
<p>我离职的冲动越来越强，<br>但是，老板总在关键时刻“指点”我，<br>好吧，也可能是“指指点点”…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hd854dba43b1f47cb8e1b21e5ed5eeccdt.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hd3531ecd25624484a98be932afeb2d8e4.jpg"></p>
<p>有时候，HR也会说…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H68d8cfb273dc45a9935ee437e07429c7N.jpg"></p>
<p>有时候，我会问自己：这样的日子，什么时候是个头呢？  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb9cafff1a5434c4ab79afa3968b066b2z.jpg"></p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb6da8210dd4b4457b39ad9c8d12141c6U.jpg"></p>
<p>终于有一天…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H8ed2866965264f83a27a58a7596bcedf2.jpg"></p>
<p>在走出写字楼的一瞬间，我才发现：<br>天也忒蓝了，<br>树也忒绿了，<br>阳光也忒明媚了，<br>生活也忒美好了。<br>于是，我决定…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/Hb4332ce9a3bd480dbfb07a5a99b3c00ej.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H4b23d214762e4b5f83c3bff59d624460s.jpg"><br><img alt data-src="https://ae01.alicdn.com/kf/H42293e2fe8a649a085af247fa5d50f97r.jpg"></p>
<p>从西山回来之后…  </p>
<p><img alt data-src="https://ae01.alicdn.com/kf/H5911bcdfec934502a029ff61c276b3849.jpg"></p>
<p>当然，以上皆为虚构，如有雷同，表示同情！<br>-END-<br>转载声明：本文转载自「程序员吴小胖」。  </p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网公司忽悠员工的黑话</title>
    <url>/2019/11/20/farmercodethings_2/</url>
    <content><![CDATA[<p>据说每个互联网公司都有一些心照不宣的黑话，一起欣赏↓</p><h4 id="招聘时"><a href="#招聘时" class="headerlink" title="招聘时"></a>招聘时</h4><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/Hfbb5ec649cf741b4bac39062e7c15ec3x.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H7cb0e62cc51d438ebd2efb2f342fe8b5i.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/Hedb7ea63218f40708882d0227a8f0a6ea.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H636d01eefe0e49fa9f6f439f9ed5bb7eC.jpg"></p><p><img alt="黑话" data-src="https://ae01.alicdn.com/kf/H9ba62f9fc7df4968948413eed0b0909co.jpg"></p><h4 id="老板"><a href="#老板" class="headerlink" title="老板"></a>老板</h4><p>市场很大 = 我还不知道怎么赚钱<br>有一定的用户基础 = 建立了 QQ 群和微信群<br>自主研发的系统 = XXX 开源代码二次开发的<br>采用了大数据技术 = Nginx 日志开起来了，怎么用以后再说<br>采用了云技术 = 买了几台 ECS<br>……  </p><h4 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h4><p>在吗？= 有个需求需要改一下<br>没有我要的那种感觉 = 抄下苹果<br>我下去再确认一下 = 这个老子没想到，别说了<br>设计应该大道至简 = 复杂的我也不会<br>商业模式要形成闭环 = 放东西线上卖<br>……</p><a id="more"></a>







<h4 id="程序猿"><a href="#程序猿" class="headerlink" title="程序猿"></a>程序猿</h4><p>在吗？= 今天做不完<br>你这个需求不清晰 = 我不想做<br>目前技术实现不了 = 我不想做<br>现在服务器性能跟不上 = 我不想做<br>这个太复杂了 = 我不想做<br>……</p>
<p><strong>你品，你细品！</strong></p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- api装饰器详解</title>
    <url>/2019/11/20/odoo13_2/</url>
    <content><![CDATA[<p>最近有些小伙伴对Odoo的api中的装饰器总是有些误区，或者使用方式不对。导致结果和预想的不一致。</p><p>那么可以肯定的说，那是你使用姿势的问题。下面且听我讲解姿势，如：老汉推车…… 咳咳，跑偏了。</p><h2 id="api装饰器种类"><a href="#api装饰器种类" class="headerlink" title="api装饰器种类"></a>api装饰器种类</h2><h3 id="姿势一：-api-model"><a href="#姿势一：-api-model" class="headerlink" title="姿势一： @api.model"></a>姿势一： @api.model</h3><p>装饰一个记录样式的方法，其中<code>self</code>是一个记录集，但其内容无关紧要，仅模型相关。<br>即在记录行方式下装饰一个内容不明确、但模型明确的方法。<br>举个姿势：</p><a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>特别提示，此姿势应用在<code>create</code>方法中，会给<code>create</code>方法使用默认的装饰器<code>model_create_single</code>  </p>
<h3 id="姿势二：-api-onchange-args"><a href="#姿势二：-api-onchange-args" class="headerlink" title="姿势二： @api.onchange(*args)"></a>姿势二： @api.onchange(*args)</h3><p>装饰给定字段的onchange方法。就是当字段发生改变时，触发绑定的函数。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.onchange('partner_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_partner</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.message = <span class="string">"Dear %s"</span> % (self.partner_id.name <span class="keyword">or</span> <span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<p>在该字段出现的表单视图中，修改给定字段之一时将调用该方法。<br>该姿势还可应用于<strong>动态domain、警告提示</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.onchange('partner_id')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_onchange_partner</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'domain'</span>: &#123;<span class="string">'other_id'</span>: [(<span class="string">'partner_id'</span>, <span class="string">'='</span>, partner_id)]&#125;,</span><br><span class="line">            <span class="string">'warning'</span>: &#123;<span class="string">'title'</span>: <span class="string">"Warning"</span>, <span class="string">'message'</span>: <span class="string">"What is this?"</span>, <span class="string">'type'</span>: <span class="string">'notification'</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>注意：<br>    1.如果类型设置为通知，则警告将显示在通知中。否则，它将默认显示在对话框中。<br>    2.由于<code>@ onchange</code>返回伪记录的记录集， 因此调用任何一种CRUD方法的行为是不确定的，因为它们可能尚不存在于数据库中。相反，只需如示例中所示设置记录的字段，或调用：meth：<code>update</code>方法。<br>    3.<code>@ onchange</code>仅支持简单的字段名称，点分名称 （关系字段的字段，例如``partner_id.tz’’）不支持，将被忽略<br>    4.表单视图中一定要存在字段，否则不调用  </p>
<h3 id="姿势三：-api-constrains-args"><a href="#姿势三：-api-constrains-args" class="headerlink" title="姿势三： @api.constrains(*args)"></a>姿势三： @api.constrains(*args)</h3><p>约束检查装饰器。每个参数必须是一个字段名称。<br>在已修改命名字段之一的记录上调用。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.constrains('name', 'description')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_description</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> record.name == record.description:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"Fields name and description must be different"</span>)</span><br></pre></td></tr></table></figure>

<p>注意：<br>    1、<code>@ constrains</code>仅支持简单的字段名称，点分名称（关系字段的字段，例如<code>partner_id.customer</code>）不支持，将被忽略<br>    2、仅在create或write调用中才触发<code>@ constrains</code>。这意味着视图中不存在的字段不会触发调用  </p>
<h3 id="姿势四：-api-depends-args"><a href="#姿势四：-api-depends-args" class="headerlink" title="姿势四： @api.depends(*args)"></a>姿势四： @api.depends(*args)</h3><p>返回一个装饰器，该装饰器指定<code>compute</code>方法的字段相关性（对于新型函数字段）。<br>每个参数必须是字段或者一个由点号分隔的字段名称序列组成的字符串。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pname = fields.Char(compute=<span class="string">'_compute_pname'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.depends('partner_id.name', 'partner_id.is_company')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_pname</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> record.partner_id.is_company:</span><br><span class="line">            record.pname = (record.partner_id.name <span class="keyword">or</span> <span class="string">""</span>).upper()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record.pname = record.partner_id.name</span><br></pre></td></tr></table></figure>

<h3 id="姿势五：-api-depends-context-args"><a href="#姿势五：-api-depends-context-args" class="headerlink" title="姿势五： @api.depends_context(*args)"></a>姿势五： @api.depends_context(*args)</h3><p>返回一个装饰器，该装饰器指定非存储的<code>compute</code>方法。每个参数都是上下文的键<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = fields.Float(compute=<span class="string">'_compute_product_price'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.depends_context('pricelist')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_product_price</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> product.env.context.get(<span class="string">'pricelist'</span>):</span><br><span class="line">            pricelist = self.env[<span class="string">'product.pricelist'</span>].browse(product.env.context[<span class="string">'pricelist'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pricelist = self.env[<span class="string">'product.pricelist'</span>].get_default_pricelist()</span><br><span class="line">        product.price = pricelist.get_products_price(product).get(product.id, <span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>

<p>注意：<br>    所有依赖项必须是可哈希的。以下按键有特殊<br>    支持：<br>         -<code>force_company</code>（上下文值或当前公司ID），<br>         -<code>uid</code>（当前用户ID和超级用户标志），<br>         -<code>active_test</code>（env.context中的值或field.context中的值）。  </p>
<h3 id="姿势六：-api-returns-model-downgrade-None-upgrade-None"><a href="#姿势六：-api-returns-model-downgrade-None-upgrade-None" class="headerlink" title="姿势六： @api.returns(model, downgrade=None, upgrade=None)"></a>姿势六： @api.returns(model, downgrade=None, upgrade=None)</h3><p>用于返回<code>model</code>实例的一个装饰器<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@model</span></span><br><span class="line"><span class="meta">@returns('res.partner')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_partner</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">    ...     <span class="comment"># return some record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output depends on call style: traditional vs record style</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.traditional</span></span><br><span class="line">partner_id = model.find_partner(cr, uid, arg, context=context)</span><br><span class="line"><span class="comment"># 2.record style</span></span><br><span class="line">recs = model.browse(cr, uid, ids, context)</span><br><span class="line">partner_record = recs.find_partner(arg)</span><br></pre></td></tr></table></figure>

<h3 id="姿势七：-api-model-create-multi-method"><a href="#姿势七：-api-model-create-multi-method" class="headerlink" title="姿势七： @api.model_create_multi(method)"></a>姿势七： @api.model_create_multi(method)</h3><p>装饰一个采用字典列表并创建多个记录的方法。 可以使用单个字典或列表的形式调用该方法。<br>举个姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model_create_multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, vals_list)</span>:</span></span><br><span class="line">    self._check_create()</span><br><span class="line">    <span class="keyword">return</span> super(ProductionLot, self).create(vals_list)</span><br><span class="line"></span><br><span class="line">record = model.create(vals)</span><br><span class="line">records = model.create([vals, ...])</span><br></pre></td></tr></table></figure>

<h3 id="姿势八：-api-model-create-single-method"><a href="#姿势八：-api-model-create-single-method" class="headerlink" title="姿势八： @api.model_create_single(method)"></a>姿势八： @api.model_create_single(method)</h3><p>装饰一个采用字典并创建单个记录的方法。 默认是这个。</p>
<h3 id="姿势九：-api-multi-和-api-one-在Odoo13-已经阉割"><a href="#姿势九：-api-multi-和-api-one-在Odoo13-已经阉割" class="headerlink" title="姿势九： @api.multi 和 @api.one 在Odoo13 已经阉割"></a>姿势九： @api.multi 和 @api.one 在Odoo13 已经阉割</h3><hr>
<p>以上为Odoo13开发中常用的所有的api装饰器了。<br><strong>祝大家早点掌握姿势，实践出真理。实在不行就换个姿势，再来一次。</strong></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo13-- 控制tree视图动态显示隐藏列以及多行编辑的方式</title>
    <url>/2019/11/18/odoo13_1/</url>
    <content><![CDATA[<p>如题： Odoo13 新增了许多特性，如动态显示隐藏列，多行编辑。</p>
<a id="more"></a>
<p>动态显示列，只需要在<code>tree</code>视图中定义字段时候，加上 optional 参数即可</p>
<p>多行编辑，只需要在<code>tree</code>视图定义 multi_edit=”1”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"view_repair_order_tree"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>repair.tree<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>repair.order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree</span> <span class="attr">string</span>=<span class="string">"Repairs order"</span> <span class="attr">multi_edit</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">decoration-muted</span>=<span class="string">"state in ('done','cancel')"</span> <span class="attr">decoration-info</span>=<span class="string">"state=='draft'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_id"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_qty"</span> <span class="attr">optional</span>=<span class="string">"hide"</span> <span class="attr">string</span>=<span class="string">"Quantity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"product_uom"</span> <span class="attr">string</span>=<span class="string">"Unit of Measure"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"user_id"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"partner_id"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"address_id"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"guarantee_limit"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"location_id"</span> <span class="attr">optional</span>=<span class="string">"hide"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"company_id"</span> <span class="attr">groups</span>=<span class="string">"base.group_multi_company"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span> <span class="attr">optional</span>=<span class="string">"show"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"activity_exception_decoration"</span> <span class="attr">widget</span>=<span class="string">"activity_exception"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/Hc21fedad81d343ef8d5eee440e5a28cbT.jpg"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo13</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-- 输出样式详解</title>
    <url>/2019/11/18/python_1/</url>
    <content><![CDATA[<p>控制台打印log时候，各种各样的信息难以区分，降低了重要信息的可读性。<br>因此可以使用颜色进行区分。</p><p>书写格式：<br>     开头部分：\033[显示方式;前景色;背景色m + 结尾部分：\033[0m</p><p>注意：开头部分的三个参数：显示方式，前景色，背景色是可选参数，可以只写其中的某一个；另外由于表示三个参数不同含义的数值都是唯一的没有重复的，所以三个参数的书写先后顺序没有固定要求，系统都能识别；但是，建议按照默认的格式规范书写。<br>对于结尾部分，其实也可以省略，但是为了书写规范，建议\033[***开头，\033[0m结尾。</p><a id="more"></a>


<hr>
<p>字体色     |       背景色     |      颜色描述<br>| ——  | —–:           | :—-: |<br>30        |        40       |       黑色<br>31        |        41       |       红色<br>32        |        42       |       绿色<br>33        |        43       |       黃色<br>34        |        44       |       蓝色<br>35        |        45       |       紫红色<br>36        |        46       |       青蓝色<br>37        |        47       |       白色</p>
<hr>
<p>显示方式     |      效果<br>| ——  | :—-: |<br>0           |     终端默认设置<br>1           |     高亮显示<br>4           |     使用下划线<br>5           |     闪烁<br>7           |     反白显示<br>8           |     不可见</p>
<p>数值表示的参数含义：</p>
<p>显示方式: 0（默认值）、1（高亮）、22（非粗体）、4（下划线）、24（非下划线）、 5（闪烁）、25（非闪烁）、7（反显）、27（非反显）</p>
<p>前景色: 30（黑色）、31（红色）、32（绿色）、 33（黄色）、34（蓝色）、35（洋 红）、36（青色）、37（白色）</p>
<p>背景色: 40（黑色）、41（红色）、42（绿色）、 43（黄色）、44（蓝色）、45（洋 红）、46（青色）、47（白色）</p>
<p>常见开头格式：<br>\033[0m            默认字体正常显示，不高亮</p>
<p>\033[32;0m       红色字体正常显示</p>
<p>\033[1;32;40m  显示方式: 高亮    字体前景色：绿色  背景色：黑色</p>
<p>\033[0;31;46m  显示方式: 正常    字体前景色：红色  背景色：青色</p>
<p>\033[1;31m  显示方式: 高亮    字体前景色：红色  背景色：无</p>
<p>举例说明：<br>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_logger.info(<span class="string">"\n\n \033[1;37;42m 用户：%s 创建单据：%s \033[0m \n"</span>%(self.env.user.name, res.name))</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/H8d435a766d504fa78b9abf04481bb946n.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'\033[1;35;0m字体变色，但无背景色 \033[0m'</span>)  <span class="comment"># 有高亮 或者 print('\033[1;35m字体有色，但无背景色 \033[0m')</span></span><br><span class="line">print(<span class="string">'\033[1;45m 字体不变色，有背景色 \033[0m'</span>)  <span class="comment"># 有高亮</span></span><br><span class="line">print(<span class="string">'\033[1;35;46m 字体有色，且有背景色 \033[0m'</span>)  <span class="comment"># 有高亮</span></span><br><span class="line">print(<span class="string">'\033[0;35;46m 字体有色，且有背景色 \033[0m'</span>)  <span class="comment"># 无高亮</span></span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/Hc26ba6a6e67541b3bf0a8de0d0b5b34bf.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'\033[0;36m床前明月光，'</span>)</span><br><span class="line">print(<span class="string">'疑是地上霜。'</span>)</span><br><span class="line">print(<span class="string">'举头望明月，'</span>)</span><br><span class="line">print(<span class="string">'低头思故乡。\033[0m'</span>)</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://ae01.alicdn.com/kf/H99019d233a3b4158997eae061b37afe3W.jpg"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>清纯美女图（早餐）</title>
    <url>/2019/11/12/picture_girl_2/</url>
    <content><![CDATA[<p><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hb9b160e480c24c71b9b3dab3f03439e3R.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H2bc4d7fc60944409acded54e16044755u.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hf6daa23858c14a30b60fe3a5f166657a5.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hfb5035e6c5074bfc8c83987d9e519faaI.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H375c3745f0a245718ddc3fabafb328edB.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hae58449e181242499c22ae28e43e387dD.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/H09ef5534385d4a2f9f107261fa895350k.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Hb5e3aa60684043e0b140fb8686edb784l.jpg"><br><img alt="清纯美女" data-src="https://ae01.alicdn.com/kf/Had98f4157f334363a24a973c8836aa5cM.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>清纯</category>
      </categories>
  </entry>
  <entry>
    <title>性感美女图（滑板）</title>
    <url>/2019/11/12/picture_girl_1/</url>
    <content><![CDATA[<p><img alt="性感美女" data-src="https://pic.superbed.cn/item/5dcc2b2b8e0e2e3ee9f4b91c.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/Hcb00c0b1500a4f47a4c0240aeb473302p.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H33e3257a533a42299cacfa5689cfc07bh.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H6c5901b61b3d4ee49574d561394ec974F.jpg"><br> <!-- 
 ![](https://pic.superbed.cn/item/5dcc2c1e8e0e2e3ee9f4deee.jpg)
 ![](https://puui.qpic.cn/fans_admin/0/3_600007305_1573661727042/0)
 ![](https://p.pstatp.com/origin/fef50001455d06f7593b)
  --></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H08f5e6c4a17d4824a7937aae86d2b67d8.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/Hc4c4c1b09ac245b7b06da2d587ceb62bj.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H58a1abb4cbb54fc18ac2f51cf3ca4e73L.jpg"><br> <!-- 
 ![](https://pic.superbed.cn/item/5dcc2ca78e0e2e3ee9f4effa.jpg)
 ![](https://puui.qpic.cn/fans_admin/0/3_600007305_1573661864617/0)
 ![](https://p.pstatp.com/origin/ff750000b7cb378c598c)
  --></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H632e8a4c8a8b48368f41dd221f409e4ax.jpg"></p><p><img alt="性感美女" data-src="https://ae01.alicdn.com/kf/H984a5a8eab6041ad8cc3984bd92c1301D.jpg"></p>]]></content>
      <categories>
        <category>image</category>
        <category>美女</category>
        <category>性感</category>
      </categories>
  </entry>
  <entry>
    <title>Odoo12-- 改变switchButton的显示内容</title>
    <url>/2019/11/07/odoo12_2/</url>
    <content><![CDATA[<p><strong>odoo原本的switchbutton，当鼠标悬浮上去是显示的是英文，比如：View List, View Kanban</strong></p>
<a id="more"></a>
<p><img alt="switchbutton更改前" data-src="https://upload-images.jianshu.io/upload_images/8791854-55ecdf487553ef7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><strong>现在改变其显示内容，可自定义修改。</strong><br><img alt="switchbutton更改后" data-src="https://upload-images.jianshu.io/upload_images/8791854-0ff221f83ce9bbd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>#####原理：在页面加载时候，渲染SwitchButtons时候，对其重写。<br><strong>对<code>abstract_controller.js</code>文件中<code>_renderSwitchButtons</code>方法进行改造。</strong></p>
<p><strong>参考代码：</strong><br><img alt="主要代码" data-src="https://upload-images.jianshu.io/upload_images/8791854-f736cecc922c8943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$switchButtons.each(<span class="function"><span class="keyword">function</span> (<span class="params">k, v</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.type &amp;&amp; v.type === <span class="string">'button'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data_original_title_node = v.attributes.getNamedItem(<span class="string">'data-original-title'</span>);</span><br><span class="line">                <span class="keyword">var</span> view_type = v.attributes.getNamedItem(<span class="string">'data-view-type'</span>).nodeValue;</span><br><span class="line">                <span class="keyword">if</span> (view_type === <span class="string">'list'</span>) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = <span class="string">'列表视图'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view_type === <span class="string">'kanban'</span>) &#123;</span><br><span class="line">                    data_original_title_node.nodeValue = <span class="string">'看板视图'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                v.attributes.setNamedItem(data_original_title_node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- statebar根据单据状态动态显示</title>
    <url>/2019/11/07/odoo12_1/</url>
    <content><![CDATA[<h5 id="当状态为草稿或者结算时候，显示结算。"><a href="#当状态为草稿或者结算时候，显示结算。" class="headerlink" title="当状态为草稿或者结算时候，显示结算。"></a>当状态为草稿或者结算时候，显示结算。</h5><p><img alt="已审核状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-351316405b170a57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p>#####当进行结算操作，状态变为‘到期收款’或者其他状态时，就显示单据状态<br><img alt="到期收款状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-0f33c4599f6e2776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img alt="背书状态" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f627f36b33b68b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>model.py 文件， ‘dynamic_state’选项为动态显示的内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = fields.Selection([</span><br><span class="line">    (<span class="string">'draft'</span>, <span class="string">'草稿'</span>),</span><br><span class="line">    (<span class="string">'verify'</span>, <span class="string">'已审核'</span>),</span><br><span class="line">    (<span class="string">'due_payment'</span>, <span class="string">'到期收款'</span>),</span><br><span class="line">    (<span class="string">'discount'</span>, <span class="string">'贴现'</span>),</span><br><span class="line">    (<span class="string">'endorsement'</span>, <span class="string">'背书'</span>),</span><br><span class="line">    (<span class="string">'endorsement_return'</span>, <span class="string">'背书退回'</span>),</span><br><span class="line">    (<span class="string">'bill_return'</span>, <span class="string">'票据退回'</span>),</span><br><span class="line">    (<span class="string">'dynamic_state'</span>, <span class="string">'结算'</span>), <span class="comment"># 动态显示，设置默认值为'结算'</span></span><br><span class="line">   ], string=<span class="string">'单据状态'</span>, copy=<span class="literal">False</span>, index=<span class="literal">True</span>, track_visibility=<span class="string">'onchange'</span>, track_sequence=<span class="number">3</span>, default=<span class="string">'draft'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>xml文件， ‘dynamic_state’ 会根据单据的状态动态显示 dynamic_visible属性中的值</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"state"</span> <span class="attr">widget</span>=<span class="string">"statusbar"</span> <span class="attr">readonly</span>=<span class="string">"1"</span> <span class="attr">statusbar_visible</span>=<span class="string">"draft,verify,dynamic_state"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">dynamic_visible</span>=<span class="string">"due_payment,discount,endorsement,endorsement_return,bill_return"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>js文件，继承relational_fields.js 。FieldStatus的widget进行重写。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">odoo.define(<span class="string">'ps_base.statusbar_dynamic_visible'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> relational_fields = <span class="built_in">require</span>(<span class="string">'web.relational_fields'</span>);</span><br><span class="line"></span><br><span class="line">relational_fields.FieldStatus.include(&#123;</span><br><span class="line"></span><br><span class="line">_setState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.field.type === <span class="string">'many2one'</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.status_information = _.map(<span class="keyword">this</span>.record.specialData[<span class="keyword">this</span>.name], <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _.extend(&#123;</span><br><span class="line"></span><br><span class="line">selected: info.id === self.value.res_id,</span><br><span class="line"></span><br><span class="line">&#125;, info);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selection = <span class="keyword">this</span>.field.selection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.attrs.statusbar_visible) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> restriction = <span class="keyword">this</span>.attrs.statusbar_visible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.attrs.dynamic_visible) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dynamic_state = <span class="keyword">this</span>.attrs.dynamic_visible.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dynamic_state.indexOf(self.value) !== <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line">restriction = restriction.replace(<span class="string">'dynamic_state'</span>, self.value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restriction = restriction.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">selection = _.filter(selection, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _.contains(restriction, val[<span class="number">0</span>]) || val[<span class="number">0</span>] === self.value;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.status_information = _.map(selection, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">id</span>: val[<span class="number">0</span>], <span class="attr">display_name</span>: val[<span class="number">1</span>], <span class="attr">selected</span>: val[<span class="number">0</span>] === self.value, <span class="attr">fold</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 销售订单确认后生成销售出库单的代码跟踪</title>
    <url>/2019/11/07/odoo12_4/</url>
    <content><![CDATA[<p><strong>如题：销售订单在<code>报价单</code>状态点击<code>确认</code>按钮，状态变更为<code>销售订单</code>,同时生成一个<code>销售出库单</code></strong></p>
<a id="more"></a>
<p><img alt="报价单" data-src="https://upload-images.jianshu.io/upload_images/8791854-b56cf0ed2d6a5b56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="销售订单" data-src="https://upload-images.jianshu.io/upload_images/8791854-92296fe8c111be8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<p>———————————————–分割线—————————————–<br>####代码过程<br>#####1.点击 <code>确认</code>按钮<br>主要执行两个逻辑：<br>一是将单据状态改变，由报价单改为销售订单<br>二是通过推拉规则生成调拨单</p>
<p>以下为<code>sale</code>模块的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._get_forbidden_state_confirm() &amp; set(self.mapped(<span class="string">'state'</span>)):</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(</span><br><span class="line">                <span class="string">'It is not allowed to confirm an order in the following states: %s'</span></span><br><span class="line">            ) % (<span class="string">', '</span>.join(self._get_forbidden_state_confirm())))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self.filtered(<span class="keyword">lambda</span> order: order.partner_id <span class="keyword">not</span> <span class="keyword">in</span> order.message_partner_ids):</span><br><span class="line">        order.message_subscribe([order.partner_id.id])</span><br><span class="line">        self.write(&#123;</span><br><span class="line">            <span class="string">'state'</span>: <span class="string">'sale'</span>,</span><br><span class="line">            <span class="string">'confirmation_date'</span>: fields.Datetime.now()</span><br><span class="line">        &#125;)</span><br><span class="line">        self._action_confirm()</span><br><span class="line">        <span class="keyword">if</span> self.env[<span class="string">'ir.config_parameter'</span>].sudo().get_param(<span class="string">'sale.auto_done_setting'</span>):</span><br><span class="line">            self.action_done()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>重点代码是<code>self._action_confirm()</code>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Implementation of additionnal mecanism of Sales Order confirmation.</span></span><br><span class="line"><span class="string">        This method should be extended when the confirmation should generated</span></span><br><span class="line"><span class="string">        other documents. In this method, the SO are in 'sale' state (not yet 'done').</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.env.context.get(<span class="string">'send_email'</span>):</span><br><span class="line">        self.force_quotation_send()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create an analytic account if at least an expense product</span></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> any([expense_policy <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">False</span>, <span class="string">'no'</span>] <span class="keyword">for</span> expense_policy <span class="keyword">in</span> order.order_line.mapped(<span class="string">'product_id.expense_policy'</span>)]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> order.analytic_account_id:</span><br><span class="line">                order._create_analytic_account()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>通过代码注释，我们可以确定这是确认订单的附加机制，生成其他单据时候应拓展此方法。</p>
<p>####2.生成调拨单<br>继续跟踪代码<br>以下为<code>sale_stock</code>模块的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> self:</span><br><span class="line">        order.order_line._action_launch_stock_rule()</span><br><span class="line">    super(SaleOrder, self)._action_confirm()</span><br></pre></td></tr></table></figure>
<p>不难发现，再次拓展了<strong>_action_confirm</strong>方法。<br>重点代码：<code>order.order_line._action_launch_stock_rule()</code><br>继续跟踪sale.order.line的<code>_action_launch_stock_rule</code>的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@api.multi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_launch_stock_rule</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Launch procurement group run method with required/custom fields genrated by a</span></span><br><span class="line"><span class="string">    sale order line. procurement group will launch '_run_pull', '_run_buy' or '_run_manufacture'</span></span><br><span class="line"><span class="string">    depending on the sale order line product rule.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    precision = self.env[<span class="string">'decimal.precision'</span>].precision_get(<span class="string">'Product Unit of Measure'</span>)</span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> line.state != <span class="string">'sale'</span> <span class="keyword">or</span> <span class="keyword">not</span> line.product_id.type <span class="keyword">in</span> (<span class="string">'consu'</span>,<span class="string">'product'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        qty = line._get_qty_procurement()</span><br><span class="line">        <span class="keyword">if</span> float_compare(qty, line.product_uom_qty, precision_digits=precision) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        group_id = line.order_id.procurement_group_id</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> group_id:</span><br><span class="line">            group_id = self.env[<span class="string">'procurement.group'</span>].create(&#123;</span><br><span class="line">                <span class="string">'name'</span>: line.order_id.name, <span class="string">'move_type'</span>: line.order_id.picking_policy,</span><br><span class="line">                <span class="string">'sale_id'</span>: line.order_id.id,</span><br><span class="line">                <span class="string">'partner_id'</span>: line.order_id.partner_shipping_id.id,</span><br><span class="line">            &#125;)</span><br><span class="line">            line.order_id.procurement_group_id = group_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># In case the procurement group is already created and the order was</span></span><br><span class="line">            <span class="comment"># cancelled, we need to update certain values of the group.</span></span><br><span class="line">            updated_vals = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> group_id.partner_id != line.order_id.partner_shipping_id:</span><br><span class="line">                updated_vals.update(&#123;<span class="string">'partner_id'</span>: line.order_id.partner_shipping_id.id&#125;)</span><br><span class="line">            <span class="keyword">if</span> group_id.move_type != line.order_id.picking_policy:</span><br><span class="line">                updated_vals.update(&#123;<span class="string">'move_type'</span>: line.order_id.picking_policy&#125;)</span><br><span class="line">            <span class="keyword">if</span> updated_vals:</span><br><span class="line">                group_id.write(updated_vals)</span><br><span class="line"></span><br><span class="line">        values = line._prepare_procurement_values(group_id=group_id)</span><br><span class="line">        product_qty = line.product_uom_qty - qty</span><br><span class="line"></span><br><span class="line">        procurement_uom = line.product_uom</span><br><span class="line">        quant_uom = line.product_id.uom_id</span><br><span class="line">        get_param = self.env[<span class="string">'ir.config_parameter'</span>].sudo().get_param</span><br><span class="line">        <span class="keyword">if</span> procurement_uom.id != quant_uom.id <span class="keyword">and</span> get_param(<span class="string">'stock.propagate_uom'</span>) != <span class="string">'1'</span>:</span><br><span class="line">            product_qty = line.product_uom._compute_quantity(product_qty, quant_uom, rounding_method=<span class="string">'HALF-UP'</span>)</span><br><span class="line">            procurement_uom = quant_uom</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.env[<span class="string">'procurement.group'</span>].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</span><br><span class="line">        <span class="keyword">except</span> UserError <span class="keyword">as</span> error:</span><br><span class="line">            errors.append(error.name)</span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> UserError(<span class="string">'\n'</span>.join(errors))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>主要代码<code>self.env[&#39;procurement.group&#39;].run(line.product_id, product_qty, procurement_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)</code><br>在此之前，主要是计算生成调拨单的数据。</p>
<p>继续跟踪<code>run</code>方法。</p>
<p>以下为<code>stock</code>模块的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, product_id, product_qty, product_uom, location_id, name, origin, values)</span>:</span></span><br><span class="line">    <span class="string">""" Method used in a procurement case. The purpose is to supply the</span></span><br><span class="line"><span class="string">    product passed as argument in the location also given as an argument.</span></span><br><span class="line"><span class="string">    In order to be able to find a suitable location that provide the product</span></span><br><span class="line"><span class="string">    it will search among stock.rule.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    values.setdefault(<span class="string">'company_id'</span>, self.env[<span class="string">'res.company'</span>]._company_default_get(<span class="string">'procurement.group'</span>))</span><br><span class="line">    values.setdefault(<span class="string">'priority'</span>, <span class="string">'1'</span>)</span><br><span class="line">    values.setdefault(<span class="string">'date_planned'</span>, fields.Datetime.now())</span><br><span class="line">    rule = self._get_rule(product_id, location_id, values)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rule:</span><br><span class="line">        <span class="keyword">raise</span> UserError(_(<span class="string">'No procurement rule found in location "%s" for product "%s".\n Check routes configuration.'</span>) % (location_id.display_name, product_id.display_name))</span><br><span class="line">    action = <span class="string">'pull'</span> <span class="keyword">if</span> rule.action == <span class="string">'pull_push'</span> <span class="keyword">else</span> rule.action</span><br><span class="line">    <span class="keyword">if</span> hasattr(rule, <span class="string">'_run_%s'</span> % action):</span><br><span class="line">        getattr(rule, <span class="string">'_run_%s'</span> % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        _logger.error(<span class="string">"The method _run_%s doesn't exist on the procument rules"</span> % action)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>重点代码：<code>getattr(rule, &#39;_run_%s&#39; % action)(product_id, product_qty, product_uom, location_id, name, origin, values)</code><br>发现是根据<code>推拉规则</code>，通过<code>反射</code>的方式执行的代码。<br>执行<code>_run_pull</code>或者<code>_run_push</code>….</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_pull</span><span class="params">(self, product_id, product_qty, product_uom, location_id, name, origin, values)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.location_src_id:</span><br><span class="line">        msg = _(<span class="string">'No source location defined on stock rule: %s!'</span>) % (self.name, )</span><br><span class="line">        <span class="keyword">raise</span> UserError(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create the move as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)</span></span><br><span class="line">    <span class="comment"># Search if picking with move for it exists already:</span></span><br><span class="line">    group_id = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> self.group_propagation_option == <span class="string">'propagate'</span>:</span><br><span class="line">        group_id = values.get(<span class="string">'group_id'</span>, <span class="literal">False</span>) <span class="keyword">and</span> values[<span class="string">'group_id'</span>].id</span><br><span class="line">    <span class="keyword">elif</span> self.group_propagation_option == <span class="string">'fixed'</span>:</span><br><span class="line">        group_id = self.group_id.id</span><br><span class="line"></span><br><span class="line">    data = self._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)</span><br><span class="line">    <span class="comment"># Since action_confirm launch following procurement_group we should activate it.</span></span><br><span class="line">    move = self.env[<span class="string">'stock.move'</span>].sudo().with_context(force_company=data.get(<span class="string">'company_id'</span>, <span class="literal">False</span>)).create(data)</span><br><span class="line">    move._action_confirm()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>重点代码<code>move._action_confirm()</code><br>此时是<strong>先生成库存移动move单</strong>，通过<strong>_action_confirm()生成picking单</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_action_confirm</span><span class="params">(self, merge=True, merge_into=False)</span>:</span></span><br><span class="line">    <span class="string">""" Confirms stock move or put it in waiting if it's linked to another move.</span></span><br><span class="line"><span class="string">    :param: merge: According to this boolean, a newly confirmed move will be merged</span></span><br><span class="line"><span class="string">    in another move of the same picking sharing its characteristics.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    move_create_proc = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">    move_to_confirm = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">    move_waiting = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line"></span><br><span class="line">    to_assign = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> self:</span><br><span class="line">        <span class="comment"># if the move is preceeded, then it's waiting (if preceeding move is done, then action_assign has been called already and its state is already available)</span></span><br><span class="line">        <span class="keyword">if</span> move.move_orig_ids:</span><br><span class="line">            move_waiting |= move</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> move.procure_method == <span class="string">'make_to_order'</span>:</span><br><span class="line">                move_create_proc |= move</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_to_confirm |= move</span><br><span class="line">        <span class="keyword">if</span> move._should_be_assigned():</span><br><span class="line">            key = (move.group_id.id, move.location_id.id, move.location_dest_id.id)</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> to_assign:</span><br><span class="line">                to_assign[key] = self.env[<span class="string">'stock.move'</span>]</span><br><span class="line">            to_assign[key] |= move</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create procurements for make to order moves</span></span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> move_create_proc:</span><br><span class="line">        values = move._prepare_procurement_values()</span><br><span class="line">        origin = (move.group_id <span class="keyword">and</span> move.group_id.name <span class="keyword">or</span> (move.origin <span class="keyword">or</span> move.picking_id.name <span class="keyword">or</span> <span class="string">"/"</span>))</span><br><span class="line">        self.env[<span class="string">'procurement.group'</span>].run(move.product_id, move.product_uom_qty, move.product_uom, move.location_id, move.rule_id <span class="keyword">and</span> move.rule_id.name <span class="keyword">or</span> <span class="string">"/"</span>, origin,</span><br><span class="line">                                          values)</span><br><span class="line"></span><br><span class="line">    move_to_confirm.write(&#123;<span class="string">'state'</span>: <span class="string">'confirmed'</span>&#125;)</span><br><span class="line">    (move_waiting | move_create_proc).write(&#123;<span class="string">'state'</span>: <span class="string">'waiting'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># assign picking in batch for all confirmed move that share the same details</span></span><br><span class="line">    <span class="keyword">for</span> moves <span class="keyword">in</span> to_assign.values():</span><br><span class="line">        moves._assign_picking()</span><br><span class="line">    self._push_apply()</span><br><span class="line">    <span class="keyword">if</span> merge:</span><br><span class="line">        <span class="keyword">return</span> self._merge_moves(merge_into=merge_into)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure>
<p>重点代码：<code>moves._assign_picking()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_assign_picking</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Try to assign the moves to an existing picking that has not been</span></span><br><span class="line"><span class="string">    reserved yet and has the same procurement group, locations and picking</span></span><br><span class="line"><span class="string">    type (moves should already have them identical). Otherwise, create a new</span></span><br><span class="line"><span class="string">    picking to assign them to. """</span></span><br><span class="line">    Picking = self.env[<span class="string">'stock.picking'</span>]</span><br><span class="line">    <span class="keyword">for</span> move <span class="keyword">in</span> self:</span><br><span class="line">        recompute = <span class="literal">False</span></span><br><span class="line">        picking = move._search_picking_for_assignation()</span><br><span class="line">        <span class="keyword">if</span> picking:</span><br><span class="line">            <span class="keyword">if</span> picking.partner_id.id != move.partner_id.id <span class="keyword">or</span> picking.origin != move.origin:</span><br><span class="line">                <span class="comment"># If a picking is found, we'll append `move` to its move list and thus its</span></span><br><span class="line">                <span class="comment"># `partner_id` and `ref` field will refer to multiple records. In this</span></span><br><span class="line">                <span class="comment"># case, we chose to  wipe them.</span></span><br><span class="line">                picking.write(&#123;</span><br><span class="line">                    <span class="string">'partner_id'</span>: <span class="literal">False</span>,</span><br><span class="line">                    <span class="string">'origin'</span>: <span class="literal">False</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recompute = <span class="literal">True</span></span><br><span class="line">            picking = Picking.create(move._get_new_picking_values())</span><br><span class="line">        move.write(&#123;<span class="string">'picking_id'</span>: picking.id&#125;)</span><br><span class="line">        move._assign_picking_post_process(new=recompute)</span><br><span class="line">        <span class="comment"># If this method is called in batch by a write on a one2many and</span></span><br><span class="line">        <span class="comment"># at some point had to create a picking, some next iterations could</span></span><br><span class="line">        <span class="comment"># try to find back the created picking. As we look for it by searching</span></span><br><span class="line">        <span class="comment"># on some computed fields, we have to force a recompute, else the</span></span><br><span class="line">        <span class="comment"># record won't be found.</span></span><br><span class="line">        <span class="keyword">if</span> recompute:</span><br><span class="line">            move.recompute()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>在此处生成的是<strong>确认</strong>状态的picking单以及move单。<br><strong>但是为什么我们在交货单中看到的是就绪状态的单据呢？</strong><br>别急，我们继续查找代码。<br>在此，先插一句，必须了解什么是jit即时调度。（我不知道，别问我了！）<br>以下代码为<code>procurement_jit</code>模块</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.multi</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_action_launch_stock_rule</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = super(SaleOrderLine, self)._action_launch_stock_rule()</span><br><span class="line">        orders = list(set(x.order_id <span class="keyword">for</span> x <span class="keyword">in</span> self))</span><br><span class="line">        <span class="keyword">for</span> order <span class="keyword">in</span> orders:</span><br><span class="line">            reassign = order.picking_ids.filtered(<span class="keyword">lambda</span> x: x.state==<span class="string">'confirmed'</span> <span class="keyword">or</span> (x.state <span class="keyword">in</span> [<span class="string">'waiting'</span>, <span class="string">'assigned'</span>] <span class="keyword">and</span> <span class="keyword">not</span> x.printed))</span><br><span class="line">            <span class="keyword">if</span> reassign:</span><br><span class="line">                reassign.action_assign()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>聪明的你，已经发现玄机所在了，不错，就是执行了一个关键代码<code>reassign.action_assign()</code></p>
<p>以上。</p>
<p>备注：<br>花费了一天时间，研究逻辑，可能是本人也不太熟悉这部分业务的过程。时间耽误很长。建议各位研究业务过程，业务了解，代码也就好找了。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>女程序员：梦见男朋友和别的女人一起逛街怎么办？在线等,挺急的</title>
    <url>/2019/11/07/farmercodethings_1/</url>
    <content><![CDATA[<p><img alt="趣图" data-src="https://ae01.alicdn.com/kf/H560c21980ed540dd9a3e029eef047d27a.jpg"></p><hr><h1 id="神级评论"><a href="#神级评论" class="headerlink" title="神级评论"></a>神级评论</h1><h2 id="亡羊补牢型"><a href="#亡羊补牢型" class="headerlink" title="亡羊补牢型"></a>亡羊补牢型</h2><p>1.把那个女人的指针指向你即可；</p><p>2.谁让你把男朋友设成 public 的；</p><p>3.心真软，就该把他的接口屏蔽掉；</p><p>4.protected 逛街(youOnly)；</p><p>5.设计问题，应该采用单例模式；</p><p>6.没做回归测试；</p><p>7.标准做法是做个断言；</p><p>8.注释掉了，逛街的参数就不用改了吗？</p><p>9.“最后含泪把那个女人注释掉了，再一运行就是我男朋友自己逛街了。”很明显是变量名作用域的问题，改个名字就行了；</p><a id="more"></a>
<!-- 
![](https://pic.superbed.cn/item/5dce1ac58e0e2e3ee931bd9d.jpg)
![](https://puui.qpic.cn/fans_admin/0/3_118841988_1573788358855/0)
![](https://p.pstatp.com/origin/fec30000447fd374a680)
-->











<p>10.还可以有个多线程的算法，把你的优先级设成 99，一个 idle 线程的优先级设成 50，把那个女人的优先级设成 49。酱紫就永远调度不到啦。</p>
<h2 id="我行我素型"><a href="#我行我素型" class="headerlink" title="我行我素型"></a>我行我素型</h2><p>1.加个断点看看那个女人是谁；</p>
<p>2.那也没关系，那就老调用那个女人…你BF放在那里不动…养着…</p>
<p>3.上绝招，用 goto，做个死循环，让他们逛死；</p>
<p>4.善心点，别 goto 了，加个 exit 结束进程吧，冤冤相报何时了啊。</p>
<h2 id="要出大事型"><a href="#要出大事型" class="headerlink" title="要出大事型"></a>要出大事型</h2><p>1.查一下 Log，仅仅只有逛街了吗……</p>
]]></content>
      <categories>
        <category>FarmerCodeThings</category>
        <category>funny</category>
      </categories>
      <tags>
        <tag>Funny</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2-- jinja2模板过滤器</title>
    <url>/2019/11/07/jinja2_1/</url>
    <content><![CDATA[<p>###jinja2模板过滤器<br>过滤器是通过管道符号’|‘进行使用的，例如 {{ name|length }} ，<br>将返回name的长度，过滤器相当于一个函数，把当前变量传入到过滤<br>器中，然后过滤器根据自己的功能，返回相应的值，之后再将结果渲染<br>到页面中。</p>
<a id="more"></a>
<p>####基本用法：</p>
 {{变量|过滤器名}} 

<p>####常用过滤器：<br><strong>default过滤器</strong><br>使用方式: {{ value|default('默认值') }} ，如果value这个key不存在，那么就会使用default过滤器提供的默认值。如果你想判断一个值是否为False（例如：None、空字符串、空列表、空字典），那么就必须传递另外一个参数 {{ value|default('默认值',boolean=True) }} 可以使用‘or’来替代default 例如 {{signature or ‘no signature’}} 。<br>####自动转义过滤器：<br><strong>’safe‘过滤器：</strong>可以关闭一个字符串的自动转义。<br><strong>‘escape’过滤器：</strong>对某一改字符串进行转义。<br><strong>’autoescape‘标签，</strong>可以对他里面的代码块关闭或开启自动转义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;  &#123;#使用闭合标签关闭自动转义，off关闭，on开启#&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; talk|escape &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>
<p>等等还有很多常用过滤器，请自行查阅。</p>
<p>####自定义过滤器:<br>过滤器本质上是一个函数。如果在模板中调用这个过滤器，就会将这个变量的值作为第一个参数传给过滤器函数，然后过滤器函数返回过滤后的值，需要使用到一个装饰器，<strong>@app.template_filter(‘自定义过滤器名’)</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_filter('my_cut')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(value)</span>:</span></span><br><span class="line">    value = value.replace(<span class="string">'hello'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; article|my_cut &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>#####自定义时间处理过滤器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_time = datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">0</span>)  <span class="comment"># 发表时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter('handle_time')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_time</span><span class="params">(time)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(time, datetime):</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        timestamp = (now - time).total_seconds()</span><br><span class="line">        <span class="keyword">if</span> timestamp &lt; <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'刚刚'</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>:</span><br><span class="line">            minutes = timestamp/<span class="number">60</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'%s分钟前'</span> % int(minutes)</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span>*<span class="number">60</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>:</span><br><span class="line">            hours = timestamp/(<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"%s小时前"</span> % int(hours)</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span> &lt;= timestamp &lt;= <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>:</span><br><span class="line">            days = timestamp/(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"%s天前"</span> % int(days)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> time.strftime(<span class="string">"%Y/%m/%d %H:%M"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> time</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; create_time|handle_time &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>###宏<br>宏类似于Python中的函数，我们在宏中定义行为，还可以进行传递参数，就像Python中的函数一样一样儿的。</p>
<p>在宏中定义一个宏的关键字是macro，后面跟其 宏的名称和参数等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro input(name,age=18) %&#125;  # 参数age的默认值为18</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">" &#123;&#123; name &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">" &#123;&#123; age &#125;&#125;"</span> &gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法也和Python的类似</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('daxin') &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('daxin',age=20) &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Jinjia2</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义水滴状引导提示信息</title>
    <url>/2019/11/07/odoo12_6/</url>
    <content><![CDATA[<p><strong>如题，odoo本身自带水滴形状的提示。有时候二开的时候需要给某些按钮添加一个提示，则可以利用odoo的tooltips插件</strong><br><img alt="水滴形状提示.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-dfa69d7a825ad73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p><strong>鼠标移动上去会有文字提示</strong></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-1c30d4414b500cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7c19b939247e26e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-ebc8f9e7637c1aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><strong>我们只需要定义一个tour.js文件就可以，在文件中，我们指定元素位置，绑定相关提示信息就可以。</strong><br>其中：<br><code>trigger</code>:要绑定的元素,<br><code>content</code>:  提示内容,<br><code>position</code>: 位置,<br><code>edition</code>:版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">odoo.define(<span class="string">'crm.tour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> core = <span class="built_in">require</span>(<span class="string">'web.core'</span>);</span><br><span class="line"><span class="keyword">var</span> tour = <span class="built_in">require</span>(<span class="string">'web_tour.tour'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _t = core._t;</span><br><span class="line"></span><br><span class="line">tour.register(<span class="string">'crm_tour'</span>, &#123;</span><br><span class="line">    url: <span class="string">"/web"</span>,</span><br><span class="line">&#125;, [tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app."</span>),</span><br><span class="line">    position: <span class="string">'right'</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Ready to boost your sales? Your &lt;b&gt;Pipeline&lt;/b&gt; can be found here, under the &lt;b&gt;CRM&lt;/b&gt; app."</span>),</span><br><span class="line">    position: <span class="string">'bottom'</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o-kanban-button-new"</span>,</span><br><span class="line">    extra_trigger: <span class="string">'.o_opportunity_kanban'</span>,</span><br><span class="line">    content: _t(<span class="string">"Click here to &lt;b&gt;create your first opportunity&lt;/b&gt; and add it to your pipeline."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_quick_create input:first"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Choose a name&lt;/b&gt; for your opportunity, example: &lt;i&gt;'Need a new website'&lt;/i&gt;"</span>),</span><br><span class="line">    position: <span class="string">"right"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_quick_create .o_kanban_add"</span>,</span><br><span class="line">    content: _t(<span class="string">"Click here to &lt;b&gt;add your opportunity&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_opportunity_kanban .o_kanban_group:first-child .o_kanban_record:last-child"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Drag &amp;amp; drop opportunities&lt;/b&gt; between columns as you progress in your sales cycle."</span>),</span><br><span class="line">    position: <span class="string">"right"</span>,</span><br><span class="line">    run: <span class="string">"drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(2) "</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_record:not(.o_updating) .o_activity_color_default"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"This opportunity has &lt;b&gt;no activity planned&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_schedule_activity"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"Let's schedule an activity."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.modal-body .o_field_many2one'</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;p&gt;You will be able to customize your followup activities. Examples:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;introductory email&lt;/li&gt;&lt;li&gt;call 10 days after&lt;/li&gt;&lt;li&gt;second call 3 days after, ...&lt;/li&gt;&lt;/ol&gt;&lt;p class='mb0'&gt;&lt;i&gt;Select a standard activity for now.&lt;/i&gt;&lt;/p&gt;"</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params">actions</span>) </span>&#123;</span><br><span class="line">        actions.auto(<span class="string">'.modal-footer button[special=cancel]'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_kanban_record"</span>,</span><br><span class="line">    extra_trigger: <span class="string">".o_opportunity_kanban"</span>,</span><br><span class="line">    content: _t(<span class="string">"Click on the opportunity to zoom in."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params">actions</span>) </span>&#123;</span><br><span class="line">        actions.auto(<span class="string">".o_kanban_record .oe_kanban_action[data-type=edit]"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_opportunity_form .o_chatter_button_new_message"</span>,</span><br><span class="line">    content: _t(<span class="string">'&lt;p&gt;&lt;b&gt;Send messages&lt;/b&gt; to your prospect and get replies automatically attached to this opportunity.&lt;/p&gt;&lt;p class="mb0"&gt;Type &lt;i&gt;\'@\'&lt;/i&gt; to mention people - it\'s like cc-ing on emails.&lt;/p&gt;'</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".breadcrumb-item:not(.active):last"</span>,</span><br><span class="line">    extra_trigger: <span class="string">'.o_opportunity_form'</span>,</span><br><span class="line">    content: _t(<span class="string">"Use the breadcrumbs to &lt;b&gt;go back to your sales pipeline&lt;/b&gt;."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span></span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="base.menu_administration"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Configuration options are available in the Settings app."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="base.menu_administration"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Configuration options are available in the Settings app."</span>),</span><br><span class="line">    position: <span class="string">"bottom"</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">".o_web_settings_dashboard .o_user_emails"</span>,</span><br><span class="line">    content: _t(<span class="string">"&lt;b&gt;Invite coworkers&lt;/b&gt; via email.&lt;br/&gt;&lt;i&gt;Enter one email per line.&lt;/i&gt;"</span>),</span><br><span class="line">    position: <span class="string">"right"</span></span><br><span class="line">&#125;, tour.STEPS.TOGGLE_HOME_MENU, tour.STEPS.SHOW_APPS_MENU_ITEM, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Good job! You completed the tour of the CRM app."</span>),</span><br><span class="line">    position: <span class="string">'right'</span>,</span><br><span class="line">    edition: <span class="string">'community'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    trigger: <span class="string">'.o_app[data-menu-xmlid="crm.crm_menu_root"]'</span>,</span><br><span class="line">    content: _t(<span class="string">"Good job! You completed the tour of the CRM app."</span>),</span><br><span class="line">    position: <span class="string">'bottom'</span>,</span><br><span class="line">    edition: <span class="string">'enterprise'</span></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- Win下使用GitStats git代码统计工具</title>
    <url>/2019/11/07/git_3/</url>
    <content><![CDATA[<p><strong>gitstats 是一款git历史统计工具，可以生成定量的统计数据，并以html图表的形式展示。统计文件包括文件数量、代码量、提交量、作者信息、每天活跃度、每周活跃度、每月活跃度以及提交数排名等等，信息比较丰富。</strong><br>##安装<br>gitstats 依赖 Git 、Python2 以及Gnuplot。<br>以下是最新的依赖版本。</p><a id="more"></a>
<ul>
<li>Python (&gt;= 2.6.0)</li>
<li>Git (&gt;= 1.5.2.4)</li>
<li>Gnuplot (&gt;= 4.0.0)</li>
</ul>
<p>###1. gitstats<br>可以从<a href="https://github.com/hoxu/gitstats下载gitstats" target="_blank" rel="noopener">https://github.com/hoxu/gitstats下载gitstats</a> ，或者用<a href="https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。" target="_blank" rel="noopener">https://github.com/hoxu/gitstats.git在git中拉取。值得一提的是，在win下使用，要把gitstats工程里的gitstats文件重命名成gitstats.py。</a><br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-fc1d49e6401bd36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###2. Python2<br>由于只支持Python2，可以到<a href="https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-2713/，获取python2的win下的安装包。</a><br>安装完以后需要配置环境变量，例如安装在C:\Python27 ，则在环境变量path中增加C:\Python27。<br>为了避免多个python冲突，把python安装目录下的python.exe修改为python2.exe。</p>
<hr>
<p>也可以使用conda创建虚拟环境</p>
<p>###3. Gnuplot<br>可以到<a href="https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。" target="_blank" rel="noopener">https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/下载5.0.6版本，选择win版本即可。</a><br>安装完毕后，根据README-Windows.txt里描述，需要配置环境变量，配置到安装目录的bin下，例如D:\gnuplot\bin，同样的，在环境变量path中增加。<br>配置完成后，可以在cmd中输入gnuplot验证。<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-8df7c0f52d4570ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>###使用<br>在cmd中使用python执行gitstats中的gitstats.py。<br>命令如下：python2 [gitstats.py路径] [git库路径] [输出结果路径]<br>eg:<br>python2 E:\git\gitstats\gitstats.py E:\git\myTestGit E:\git\git_result</p>
<p>然后等待窗口执行完毕，在输出结果路径里找index.html，打开即可查看详细输出结果。</p>
<hr>
<p>如果错误，可以使用以下方式：<br>1.进入到git的bin目录，运行sh.exe，执行 cd …，退到根目录。打开目录中的cmd</p>
<p>2.在控制台中进入到需要统计的git项目目录，执行 </p>
<p>python 目录/gitstats.py . stats</p>
<p>stats目录生成后，打开其中的index.html<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-9f68a6db3eaa3b5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python gitstats.py  F:\WORK\PSCLOUD\pscloud  E:\gitstats\result</span><br></pre></td></tr></table></figure>



<p>====================================================================================================================<br><img alt data-src="https://upload-images.jianshu.io/upload_images/8791854-650264f2ce09f4f5.gif?imageMogr2/auto-orient/strip"></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 RPC failed; curl 18 transfer closed with outstanding read data remaining的解决</title>
    <url>/2019/11/07/git_2/</url>
    <content><![CDATA[<p>如图：<br><img alt="image.png" data-src="https://upload-images.jianshu.io/upload_images/8791854-7a5c238b4bb6e991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>解决方案也是网上搜的，总结一下</p><p>一，加大缓存区</p><figure class="highlight plain"><figcaption><span>config --global http.postBuffer 524288000```</span></figcaption><table><tr><td class="code"><pre><span class="line">这个大约是500M</span><br><span class="line">二、少clone一些，–depth 1</span><br><span class="line">```git clone https://github.com/flutter/flutter.git --depth 1</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>–depth 1的含义是复制深度为1，就是每个文件只取最近一次提交，不是整个历史版本。<br>三、换协议<br>clone http方式换成SSH的方式，即 https:// 改为 git://<br>例如<code>git clone https://github.com/flutter/flutter.git</code><br>换成<code>git clone git://github.com/flutter/flutter.git</code></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-- 出现 refusing to merge unrelated histories 错误</title>
    <url>/2019/11/07/git_1/</url>
    <content><![CDATA[<p>引用</p><p>git pull 失败 ,提示：<code>fatal: refusing to [merge](https://www.centos.bz/tag/merge/) unrelated histories</code></p><p>其实这个问题是因为 两个 根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并</p><a id="more"></a>


<p>具体的方法， 一个种方法： 是 从远端库拉下来代码 ， 本地要加入的代码放到远端库下载到本地的库， 然后提交上去 ， 因为这样的话， 你基于的库就是远端的库， 这是一次<a href="https://www.centos.bz/tag/update/" target="_blank" rel="noopener">update</a>了</p>
<p>第二种方法：<br>使用这个强制的方法</p>
<p><code>git pull origin [master](https://www.centos.bz/tag/master/) --allow-unrelated-histories</code></p>
<p>后面加上 <code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并</p>
<p>后面再push就可以了 <code>[git push](https://www.centos.bz/tag/git-push/) [gitlab](https://www.centos.bz/tag/gitlab/) master:init</code></p>
<p>gitlab是别名 ， 使用</p>
<p><code>git remote add gitlab ssh://xzh@192.168.1.91:50022/opt/gitrepo/withholdings/WithholdingTransaction</code></p>
<p>master是本地的branch名字<br>init是远端要推送的branch名字</p>
<p>本地必须要先add ，<a href="https://www.centos.bz/tag/commit/" target="_blank" rel="noopener">commit</a>完了 才能推上去</p>
<p>关于这个问题，可以参考<a href="http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。" target="_blank" rel="noopener">http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories。</a></p>
<p>在进行git pull 时，添加一个可选项</p>
<p><code>git pull origin master --allow-unrelated-histories</code></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- 查找并且杀死查找出的所有进程</title>
    <url>/2019/11/07/ubuntu_1/</url>
    <content><![CDATA[<p>直接命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep abc | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure><p>其中abc为要查找的进程</p>]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-- Ubuntu16.04安装Redis</title>
    <url>/2019/11/07/ubuntu_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis是常用基于内存的Key-Value数据库，比Memcache更先进，支持多种数据结构，高效，快速。用Redis可以很轻松解决高并发的数据访问问题；作为实时监控信号处理也非常不错。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Ubuntu 16.04</p>
<h1 id="安装Redis服务器端"><a href="#安装Redis服务器端" class="headerlink" title="安装Redis服务器端"></a>安装Redis服务器端</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>

<p>安装完成后，Redis服务器会自动启动，我们检查Redis服务器程序</p>
<a id="more"></a>

<h2 id="检查Redis服务器系统进程"><a href="#检查Redis服务器系统进程" class="headerlink" title="检查Redis服务器系统进程"></a>检查Redis服务器系统进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ ps -aux|grep redis</span><br><span class="line">redis 4162  0.1  0.0  10676  1420 ?        Ss   23:24   0:00 /usr/bin/redis-server /etc/redis/redis.conf</span><br><span class="line">conan 4172  0.0  0.0  11064   924 pts/0    S+   23:26   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态"><a href="#通过启动命令检查Redis服务器状态" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<h2 id="通过启动命令检查Redis服务器状态-1"><a href="#通过启动命令检查Redis服务器状态-1" class="headerlink" title="通过启动命令检查Redis服务器状态"></a>通过启动命令检查Redis服务器状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ sudo /etc/init.d/redis-server status</span><br><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 四 2017-11-09 12:22:09 CST; 59s ago</span><br><span class="line">     Docs: http://redis.io/documentation,</span><br><span class="line">           man:redis-server(1)</span><br><span class="line"> Main PID: 5394 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis-server.service</span><br><span class="line">           └─5394 /usr/bin/redis-server 127.0.0.1:6379 11月 09 12:22:09 zzf systemd[1]: Starting Advanced key-value store...</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5388]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf run-parts[5395]: run-parts: executing /etc/redis/redi...le</span><br><span class="line">11月 09 12:22:09 zzf systemd[1]: Started Advanced key-value store.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br></pre></td></tr></table></figure>

<h1 id="通过命令行客户端访问Redis"><a href="#通过命令行客户端访问Redis" class="headerlink" title="通过命令行客户端访问Redis"></a>通过命令行客户端访问Redis</h1><p>安装Redis服务器，会自动地一起安装Redis命令行客户端程序。</p>
<p>在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h1 id="命令行的帮助"><a href="#命令行的帮助" class="headerlink" title="命令行的帮助"></a>命令行的帮助</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; <span class="built_in">help</span></span><br><span class="line">redis-cli 2.2.12 Type: <span class="string">"help @"</span> to get a list of commands <span class="keyword">in</span> </span><br><span class="line">      <span class="string">"help "</span> <span class="keyword">for</span> <span class="built_in">help</span> on <span class="string">"help "</span> to get a list of possible <span class="built_in">help</span> topics <span class="string">"quit"</span> to <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h1 id="查看所有的key列表"><a href="#查看所有的key列表" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys * (empty list or <span class="built_in">set</span>)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<h1 id="基本的Redis客户端命令操作"><a href="#基本的Redis客户端命令操作" class="headerlink" title="基本的Redis客户端命令操作"></a>基本的Redis客户端命令操作</h1><p><strong>增加一条记录key1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"hello"</span> OK</span><br></pre></td></tr></table></figure>

<h1 id="打印记录"><a href="#打印记录" class="headerlink" title="打印记录"></a>打印记录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; get key1 <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一条数字记录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> key2 1 OK</span><br></pre></td></tr></table></figure>

<h1 id="让数字自增"><a href="#让数字自增" class="headerlink" title="让数字自增"></a>让数字自增</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(<span class="built_in">integer</span>) 2 redis 127.0.0.1:6379&gt; INCR key2</span><br><span class="line">(<span class="built_in">integer</span>) 3 <span class="comment"># 打印记录</span></span><br><span class="line">redis 127.0.0.1:6379&gt; get key2 <span class="string">"3"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一个列表记录key3</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 a</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 从左边插入列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; LPUSH key3 b</span><br><span class="line">(<span class="built_in">integer</span>) 2 <span class="comment"># 从右边插入列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH key3 c</span><br><span class="line">(<span class="built_in">integer</span>) 3 <span class="comment"># 打印列表记录，按从左到右的顺序</span></span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE key3 0 3</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"a"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一个哈希记表录key4</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET key4 name <span class="string">"John Smith"</span> (<span class="built_in">integer</span>) 1 <span class="comment"># 在哈希表中插入，email的Key和Value的值</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HSET key4 email <span class="string">"abc@gmail.com"</span> (<span class="built_in">integer</span>) 1 <span class="comment"># 打印哈希表中，name为key的值</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGET key4 name <span class="string">"John Smith"</span> <span class="comment"># 打印整个哈希表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key4 1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"John Smith"</span></span><br><span class="line">3) <span class="string">"email"</span></span><br><span class="line">4) <span class="string">"abc@gmail.com"</span></span><br></pre></td></tr></table></figure>

<p><strong>增加一条哈希表记录key5</strong></p>
<h1 id="增加一条哈希表记录key5，一次插入多个Key和value的值"><a href="#增加一条哈希表记录key5，一次插入多个Key和value的值" class="headerlink" title="增加一条哈希表记录key5，一次插入多个Key和value的值"></a>增加一条哈希表记录key5，一次插入多个Key和value的值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMSET key5 username antirez password P1pp0 age 3 OK</span><br></pre></td></tr></table></figure>

<h1 id="打印哈希表中，username和age为key的值"><a href="#打印哈希表中，username和age为key的值" class="headerlink" title="打印哈希表中，username和age为key的值"></a>打印哈希表中，username和age为key的值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HMGET key5 username age 1) <span class="string">"antirez"</span></span><br><span class="line">2) <span class="string">"3"</span> <span class="comment"># 打印完整的哈希表记录</span></span><br><span class="line">redis 127.0.0.1:6379&gt; HGETALL key5 1) <span class="string">"username"</span></span><br><span class="line">2) <span class="string">"antirez"</span></span><br><span class="line">3) <span class="string">"password"</span></span><br><span class="line">4) <span class="string">"P1pp0"</span></span><br><span class="line">5) <span class="string">"age"</span></span><br><span class="line">6) <span class="string">"3"</span></span><br></pre></td></tr></table></figure>

<p><strong>删除记录</strong></p>
<h1 id="查看所有的key列表-1"><a href="#查看所有的key列表-1" class="headerlink" title="查看所有的key列表"></a>查看所有的key列表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br><span class="line">4) <span class="string">"key5"</span></span><br><span class="line">5) <span class="string">"key1"</span> </span><br><span class="line"><span class="comment"># 删除key1,key5</span></span><br><span class="line">redis 127.0.0.1:6379&gt; del key1</span><br><span class="line">(<span class="built_in">integer</span>) 1 redis 127.0.0.1:6379&gt; del key5</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 查看所有的key列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br></pre></td></tr></table></figure>

<h1 id="修改Redis的配置"><a href="#修改Redis的配置" class="headerlink" title="修改Redis的配置"></a>修改Redis的配置</h1><h2 id="使用Redis的访问账号"><a href="#使用Redis的访问账号" class="headerlink" title="使用Redis的访问账号"></a>使用Redis的访问账号</h2><p>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为redisredis。</p>
<p>用vi打开Redis服务器的配置文件redis.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>#取消注释requirepass</p>
<figure class="highlight plain"><figcaption><span>redisredis```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 让Redis服务器被远程访问</span><br><span class="line"></span><br><span class="line">默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。</span><br><span class="line"></span><br><span class="line">用vi打开Redis服务器的配置文件redis.conf</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">~ sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>#注释bind</p>
<figure class="highlight plain"><figcaption><span>127.0.0.1```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">修改后，重启Redis服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">~ sudo /etc/init.d/redis-server restart</span><br><span class="line">Stopping redis-server: redis-server.</span><br><span class="line">Starting redis-server: redis-server.</span><br></pre></td></tr></table></figure>

<p>未使用密码登陆Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys * (error) ERR operation not permitted</span><br></pre></td></tr></table></figure>

<p>发现可以登陆，但无法执行命令了。</p>
<p>登陆Redis服务器，输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  redis-cli -a redisredis</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span>&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>登陆后，一切正常。</p>
<p>我们检查Redis的网络监听端口</p>
<p>检查Redis服务器占用端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ netstat -nlt|grep 6379 tcp 0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<p>我们看到网络监听从之前的 127.0.0.1:3306 变成 0 0.0.0.0:3306，表示Redis已经允许远程登陆访问。</p>
<p>我们在远程的另一台Linux访问Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ redis-cli -a redisredis -h 192.168.1.199 redis 192.168.1.199:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"key3"</span></span><br><span class="line">3) <span class="string">"key4"</span></span><br></pre></td></tr></table></figure>

<p>远程访问正常。通过上面的操作，我们就把Redis数据库服务器，在Linux Ubuntu中的系统安装完成。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 关于配置模型中的数据问题</title>
    <url>/2019/11/07/odoo12_3/</url>
    <content><![CDATA[<p>####抛砖：<br>res.config.settings 是个瞬态的，会被定时清理。<br>在这里设置的东西，被清理后，这些配置数据是怎么生效的？？？？</p>
<a id="more"></a>
<p><strong>例如：<br>在库存的设置中，我勾选了交货包裹这一项。一段时间后，res.config.settings被清理。清理后，我勾选的项依然有效，是什么原理？<br>能否拿到配置中的某个字段，根据这个字段，在我的代码中做一些判断。</strong></p>
<p>####引玉：</p>
<p>我们一般会继承res.config.settings来定义一些配置信息。 而res.config.settings是一个暂态模型(models.TransientModel)并不能长久保存数据，那数据是保存在什么地方的呢？</p>
<p>简单回答，这些配置数据并不保存在同一个地方，很多设置的状态是通过动态判断来获得的。<br>实际上当我们定义一个一个如下的配置类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConfigWizard</span><span class="params">(models.TransientModel)</span>:</span></span><br><span class="line">     _name = <span class="string">'my.settings'</span></span><br><span class="line">     _inherit = <span class="string">'res.config.settings'</span></span><br><span class="line"> </span><br><span class="line">    default_foo = fields.type(..., default_model=<span class="string">'my.model'</span>)</span><br><span class="line">    group_bar = fields.Boolean(..., group=<span class="string">'base.group_user'</span>,implied_group=<span class="string">'my.group'</span>)</span><br><span class="line">    module_baz = fields.Boolean(...)</span><br><span class="line">    config_qux = fields.Char(..., config_parameter=<span class="string">'my.parameter'</span>)</span><br><span class="line">    other_field = fields.type(...)</span><br></pre></td></tr></table></figure>

<p>可以看到配置类上的字段分以上5种类型, 也就是：</p>
<p>名字以default_开头，系统会根据设置的值来设置全局的ir.default值<br>名字以group_开头，系统会根据设置的值来配置res.group值<br>名字以module_baz, 系统会根据设置，安装或卸载baz模块<br>字段定义中包含config_parameter属性，系统将设置的值记录到ir.config_parameter表中，其key为config_parameter的值（上例中为：my.parameter), value为本配置字段的值<br>其他字段，则需要继承set_value方法以设定存储的地点，而get_value中设置获取值的方法<br>当打开配置界面时系统会自动调用res.config.settings类的default_get方法，而该方法定义了如何获取这5类字段的设置值的方法。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 自定义配置面板</title>
    <url>/2019/11/07/odoo12_7/</url>
    <content><![CDATA[<p><strong>如题，Odoo开发过程中，有时遇到一些需求需要在页面中快速配置一些信息数据,此时就需要用到配置面板， 如下图所示：</strong><br><img alt="配置面板" data-src="https://upload-images.jianshu.io/upload_images/8791854-48b3b9b19f3e5a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>**主要分三步：<br>一是定义配置面板的模板<br>二是定义路由渲染模板<br>三是给指定模型视图绑定模板路由</p>
<a id="more"></a>
<p>代码如下：**</p>
<p>模板文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">odoo</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ONBOARDING STEPS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"onboarding_quotation_layout_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Quotation Layout<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Customize the look of your quotations.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"done_icon"</span> <span class="attr">t-value</span>=<span class="string">"'fa-star'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"done_text"</span>&gt;</span>Looks great!<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Customize<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_quotation_layout'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('account_onboarding_invoice_layout_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_order_confirmation_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Confirmation &amp;amp; Payment<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Choose how to confirm quotations and get paid.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Set payments<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_payment_acquirer'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('sale_onboarding_order_confirmation_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_sample_quotation_step"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_step"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"title"</span>&gt;</span>Sample Quotation<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"description"</span>&gt;</span>Send a quotation to test the customer portal.<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"btn_text"</span>&gt;</span>Send sample<span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"method"</span> <span class="attr">t-value</span>=<span class="string">"'action_open_sale_onboarding_sample_quotation'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"state"</span> <span class="attr">t-value</span>=<span class="string">"state.get('sale_onboarding_sample_quotation_state')"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ONBOARDING PANEL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sale_quotation_onboarding_panel"</span> <span class="attr">name</span>=<span class="string">"sale.quotation.onboarding.panel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"classes"</span> <span class="attr">t-value</span>=<span class="string">"'o_onboarding_violet'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"bg_image"</span> <span class="attr">t-value</span>=<span class="string">"'/sale/static/src/img/sale_quotation_onboarding_bg.jpg'"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"close_method"</span> <span class="attr">t-value</span>=<span class="string">"'action_close_sale_quotation_onboarding'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-set</span>=<span class="string">"close_model"</span> <span class="attr">t-value</span>=<span class="string">"'res.company'"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"base.onboarding_company_step"</span> <span class="attr">name</span>=<span class="string">"company_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.onboarding_quotation_layout_step"</span> <span class="attr">name</span>=<span class="string">"quotation_layout_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.sale_onboarding_order_confirmation_step"</span> <span class="attr">name</span>=<span class="string">"payment_acquirer_step"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">t</span> <span class="attr">t-call</span>=<span class="string">"sale.sale_onboarding_sample_quotation_step"</span> <span class="attr">name</span>=<span class="string">"sample_quotation_step"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ORDER CONFIRMATION --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_order_confirmation_form"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.order.confirmation.onboarding.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>sale.payment.acquirer.onboarding.wizard<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"payment.payment_acquirer_onboarding_wizard_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//div[@name='left-column']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"class"</span>&gt;</span>col col-4<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_payment_acquirer_wizard"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>How your customers can confirm an order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>sale.payment.acquirer.onboarding.wizard<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_order_confirmation_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QUOTATION LAYOUT --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_quotation_layout_form"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.onboarding.quotation.layout.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>res.company<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"base.view_company_document_template_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//button[@special='save']"</span> <span class="attr">position</span>=<span class="string">"replace"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">string</span>=<span class="string">"Apply"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"object"</span> <span class="attr">name</span>=<span class="string">"action_save_onboarding_quotation_layout"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_quotation_layout"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Configure your document layout<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>res.company<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_quotation_layout_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SAMPLE QUOTATION --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span> <span class="attr">id</span>=<span class="string">"sale_onboarding_sample_quotation_form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>mail.compose.message.sale.onboarding.sample.quotation.form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>mail.compose.message<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"mail.email_compose_message_wizard_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//span[@name='document_followers_text']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//button[@name='save_as_template']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//field[@name='template_id']"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"invisible"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"action_open_sale_onboarding_sample_quotation"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Send a sample quotation.<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>ir.actions.act_window<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>mail.compose.message<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_id"</span> <span class="attr">ref</span>=<span class="string">"sale_onboarding_sample_quotation_form"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">odoo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由文件<code>sale_onboarding_views.xml</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Part of Odoo. See LICENSE file for full copyright and licensing details.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> odoo <span class="keyword">import</span> http</span><br><span class="line"><span class="keyword">from</span> odoo.http <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingController</span><span class="params">(http.Controller)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @http.route('/sales/sale_quotation_onboarding_panel', auth='user', type='json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sale_quotation_onboarding</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Returns the `banner` for the sale onboarding panel.</span></span><br><span class="line"><span class="string">            It can be empty if the user has closed it or if he doesn't have</span></span><br><span class="line"><span class="string">            the permission to see it. """</span></span><br><span class="line"></span><br><span class="line">        company = request.env.user.company_id</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.env.user._is_admin() <span class="keyword">or</span> \</span><br><span class="line">           company.sale_quotation_onboarding_state == <span class="string">'closed'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'html'</span>: request.env.ref(<span class="string">'sale.sale_quotation_onboarding_panel'</span>).render(&#123;</span><br><span class="line">                <span class="string">'company'</span>: company,</span><br><span class="line">                <span class="string">'state'</span>: company.get_and_update_sale_quotation_onboarding_state()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>指定模型视图，添加<code>banner_route</code>属性，属性值为路由。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"view_quotation_tree_with_onboarding"</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>sale.order.tree<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>sale.order<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"inherit_id"</span> <span class="attr">ref</span>=<span class="string">"view_quotation_tree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"mode"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xpath</span> <span class="attr">expr</span>=<span class="string">"//tree"</span> <span class="attr">position</span>=<span class="string">"attributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"banner_route"</span>&gt;</span>/sales/sale_quotation_onboarding_panel<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xpath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上， 为自定义配置面板大致过程。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo12-- 列表视图禁止打开表单内容</title>
    <url>/2019/11/07/odoo12_5/</url>
    <content><![CDATA[<p>正常的列表视图做为菜单动作直接打开的话，直接点击是跳转当前动作下的表单视图；还有一种是做为表单视图One2many、Many2many类型的嵌入式列表视图，直接点击打开Dialog窗口展示表单视图，一些特殊的需求场景下往往希望只将信息展示到列表即止，不用更多的详细互动。<br>两种方式：</p>
<a id="more"></a>
<p>1.找到相关的行点击入口，通过万能的context扩展一个独立的禁止打开参数，默认不禁止，视图里通过显式声明使用该功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ListRenderer = <span class="built_in">require</span>(<span class="string">'web.ListRenderer'</span>);</span><br><span class="line">ListRenderer.include(&#123;</span><br><span class="line">    _onRowClicked: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> context = self.dataset.get_context().eval();</span><br><span class="line">        <span class="keyword">if</span>(!context[<span class="string">"disable_open"</span>])&#123;</span><br><span class="line">            self._super.apply(self, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"sale_ids"</span> <span class="attr">context</span>=<span class="string">"&#123;'disable_open': True&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.禁止 鼠标的点击事件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"sale_ids"</span> <span class="attr">style</span>=<span class="string">"pointer-events: none;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
        <category>Odoo</category>
      </categories>
      <tags>
        <tag>Odoo12</tag>
      </tags>
  </entry>
</search>
